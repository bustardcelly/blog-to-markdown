<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Todd Anderson]]></title><description><![CDATA[ramblings about making things for web, mobile, desktop and land.]]></description><link>http://custardbelly.com/blog</link><generator>RSS for Node</generator><lastBuildDate>Tue, 18 Feb 2014 03:18:59 GMT</lastBuildDate><atom:link href="http://custardbelly.com/blog/index.xml" rel="self" type="application/rss+xml"/><author><![CDATA[Todd Anderson]]></author><item><title><![CDATA[Running Browser-Based CucumberJS Specs in Testling]]></title><description><![CDATA[<p>In my <a href="http://custardbelly.com/blog/blog-posts/2014/02/10/cucumberjs-tests-browser/index.html">previous</a> <a href="http://custardbelly.com/blog/blog-posts/2014/02/12/cucumberjs-browser-update/index.html">posts</a> I discuss bringing <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> specs to the browser using the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> CLI tool. In this post I intend to address how to use the format reporting options of the <strong>cucumberjs-browser</strong> tool to enable integration with the <a href="https://ci.testling.com/">testling</a> automated cross-browser testing tool to run your specs in various browser environment targets that you may not have installed on your own system.</p>
<h2 id="requirements">Requirements</h2>
<p>For the purposes of this article, it is assumed that you are knowledgable of <a href="http://nodejs.org">node</a> and <a href="http://npmjs.org">npm</a> and familiar with creating feature specs for <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>. </p>
<p>To view examples of features and step definitions for a browser-based application, please visit the <a href="https://github.com/bustardcelly/cucumberjs-examples">cucumberjs-examples</a> repo, from which this post will use to demonstrate integrating the generated testrunner from <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> with <a href="https://ci.testling.com/">testling</a>.</p>
<h2 id="cucumberjs-browser">cucumberjs-browser</h2>
<p>The <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> CLI tool provides the ability to run your feature specs in the browser by bundling your features, steps and support files - written in the usual way you would - to be run and evaluated at runtime by the browser-based <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> testrunner</p>
<p>To install <strong>cucumberjs-browser</strong>:</p>
<pre><code>$ npm install <span class="hljs-attribute">-g</span> cucumberjs<span class="hljs-attribute">-browser</span>
</code></pre><p><em>you may need to <code>sudo</code></em></p>
<p>After installation, the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> will be accessible on the command-line using <code>cucumberjs-browser</code> and can be run within any directory that has <strong>Features</strong> and <strong>Step Definitions</strong> (along with optional support files) that can be consumed by <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>.</p>
<p>The <strong>cucumberjs-browser</strong> CLI tool can be run with the following options:</p>
<pre><code>$ <span class="hljs-tag">cucumberjs-browser</span> <span class="hljs-attr_selector">[-o outdir]</span> <span class="hljs-attr_selector">[-f format]</span> <span class="hljs-attr_selector">[--tmpl template]</span> <span class="hljs-attr_selector">[--features features]</span>
</code></pre><p>Though it is strongly encouraged to provide a custom template using the <code>--tmpl</code> option, for the purpose of this article, we will focus on the format (<code>-f</code>) option. As of the writing of this article, the following format options are available:</p>
<ul>
<li>ui</li>
<li>tap</li>
<li>testem</li>
<li>saucelabs</li>
</ul>
<p>For the purpose of this article, we will be discussing the <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol">TAP</a> format option value.</p>
<p><em>For more infromation about other format options, please visit the latest <a href="https://github.com/bustardcelly/cucumberjs-browser/wiki/Formats">documentation regarding formats</a> on the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a>.</em></p>
<h2 id="tap">TAP</h2>
<p>The <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol">Test Anything Protocol</a> is a specification for reporting test information. The benefit of using such a specification is that it can be consumed by any test harness that recognizes it.</p>
<p>You can output <strong>TAP</strong> reports from <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> using the <code>tap</code> value for the foromat option:</p>
<pre><code>$ cucumberjs<span class="hljs-attribute">-browser</span> <span class="hljs-attribute">-f</span> tap
</code></pre><p>Running this command will generate the necessary files to print <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol">TAP</a> test results in the console when loaded by a browser.</p>
<p>If you were to open the generated testrunner file in a browser using the example from <a href="https://github.com/bustardcelly/cucumberjs-examples">cucumberjs-examples</a>, you would see something like the following if you were to open the browser console:</p>
<pre><code>TAP <span class="hljs-property">version</span> <span class="hljs-number">13</span>
<span class="hljs-comment"># Submit of valid item adds item to list</span>
ok <span class="hljs-number">1</span> I have opened <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> <span class="hljs-type">application</span>
ok <span class="hljs-number">2</span> I have an empty grocery <span class="hljs-type">list</span> view
ok <span class="hljs-number">3</span> I provide a valid grocery <span class="hljs-type">list</span> <span class="hljs-property">item</span> <span class="hljs-property">name</span>
ok <span class="hljs-number">4</span> I select <span class="hljs-keyword">to</span> add an <span class="hljs-property">item</span>
ok <span class="hljs-number">5</span> The <span class="hljs-property">item</span> <span class="hljs-keyword">is</span> added <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> view
<span class="hljs-comment"># Submit of valid item adds item to collection</span>
ok <span class="hljs-number">6</span> I have opened <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> <span class="hljs-type">application</span>
ok <span class="hljs-number">7</span> I have an empty grocery <span class="hljs-type">list</span> view
ok <span class="hljs-number">8</span> I provide a valid grocery <span class="hljs-type">list</span> <span class="hljs-property">item</span> <span class="hljs-property">name</span>
ok <span class="hljs-number">9</span> I select <span class="hljs-keyword">to</span> add an <span class="hljs-property">item</span>
ok <span class="hljs-number">10</span> The <span class="hljs-property">item</span> <span class="hljs-keyword">is</span> accessible <span class="hljs-keyword">from</span> <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> collection
<span class="hljs-comment"># Item added to grocery list</span>
ok <span class="hljs-number">11</span> I have opened <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> <span class="hljs-type">application</span>
ok <span class="hljs-number">12</span> I have an empty grocery <span class="hljs-type">list</span>
ok <span class="hljs-number">13</span> I add an <span class="hljs-property">item</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> <span class="hljs-type">list</span>
ok <span class="hljs-number">14</span> The grocery <span class="hljs-type">list</span> <span class="hljs-keyword">contains</span> a single <span class="hljs-property">item</span>
<span class="hljs-comment"># Item accessible from grocery list</span>
ok <span class="hljs-number">15</span> I have opened <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> <span class="hljs-type">application</span>
ok <span class="hljs-number">16</span> I have an empty grocery <span class="hljs-type">list</span>
ok <span class="hljs-number">17</span> I add an <span class="hljs-property">item</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> <span class="hljs-type">list</span>
ok <span class="hljs-number">18</span> I can access <span class="hljs-keyword">that</span> <span class="hljs-property">item</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span>

<span class="hljs-number">1.</span><span class="hljs-number">.18</span>
<span class="hljs-comment"># tests 18</span>
<span class="hljs-comment"># pass  18</span>

<span class="hljs-comment"># ok</span>
</code></pre><p>It should be noted that the <code>tap</code> listener for <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> uses the excellent <a href="https://github.com/substack/tape">tape</a> module.</p>
<h2 id="testling">testling</h2>
<p>I can&#39;t say enough how much I appreciate <a href="https://ci.testling.com/">testling</a>. You can install <strong>testling</strong> locally to run tests on the browsers installed on your system or use their remote service to run tests against various browsers that may not be available to you, yet are required as targets for your current project.</p>
<h3 id="local">local</h3>
<p>You can install <a href="https://ci.testling.com/">testling</a> to be run locally:</p>
<pre><code><span class="hljs-variable">$ </span>npm install -g testling
</code></pre><p>To run it, change directories into the generated files from <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> and run the following command:</p>
<pre><code><span class="hljs-variable">$ </span>cd browser-test
<span class="hljs-variable">$ </span>testling
</code></pre><p>That will consume a local <code>package.json</code> file and read a <code>testling</code> entry with options associated with running the generated html file againsta installed browsers on your system:</p>
<p><em>/browser-test/package.json</em></p>
<pre><code>{
<span class="hljs-keyword">...</span>

  <span class="hljs-string">"testling"</span> : {
    <span class="hljs-string">"html"</span> : <span class="hljs-string">"cucumber-testrunner.html"</span>,
    <span class="hljs-string">"browsers"</span> : [
        <span class="hljs-string">"chrome/latest"</span>,
        <span class="hljs-string">"firefox/latest"</span>,
        <span class="hljs-string">"safari/latest"</span>
    ]
  },

<span class="hljs-keyword">...</span>
}
<span class="hljs-keyword">...</span>
</code></pre><p>Truthfully, I never run <a href="https://ci.testling.com/">testling</a> locally. The main reasons being </p>
<p><strong>a)</strong> I can automate the running of specs on locally installed browsers easier with other tools (this is for another post :) )<br><strong>b)</strong> Testling provides a bigger benefit in providing tests against browsers I would otherwise have to install VMs for.</p>
<p>That said, I don&#39;t want ot pursuade you from using <strong>testling</strong> locally if it provides benefit in your workflow.</p>
<h3 id="remote">remote</h3>
<p>To use the remote service that <a href="https://ci.testling.com/">testling</a> provides, you still define the <code>testling</code> property in your <code>package.json</code> for the project as described above, but you additionally have to provide a webhook for your <strong>git</strong> repo in order to invoke the test harness. Upon a <code>PUSH</code> to your repository, <a href="https://ci.testling.com/">testling</a> will run the specified HTML file under the listed target browsers and report results based on the <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol">Test Anything Protocol</a> output printed to <code>console</code>.</p>
<p>In addition to providing a great service, you also get the option of adding a nice looking badge to your project.</p>
<p><img src="http://custardbelly.com/blog/images/testling-1.png" alt="testling harness output"></p>
<p>This badge was produced by pushing an update to the <a href="https://github.com/bustardcelly/cucumberjs-examples">cucumberjs-examples</a> exampe repo with a defined webhook. (If you followed along in the previous articles, you will note that the failing IE tests are due to the use of <code>Object.create</code> in source without a polyfill).</p>
<p><em>The process of adding a webhook to your project is described in better detail in the <a href="https://ci.testling.com/guide/quick_start">testling documentation</a>.</em></p>
<h3 id="donate">donate</h3>
<p>If you do use <a href="https://ci.testling.com/">testling</a> in any fashion, I implore you to <a href="https://ci.testling.com/donate">donate to the cause</a> :)</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article I introduced how the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> CLI tool can be used to generate a browser-based testrunner to report tests in <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol">TAP</a> format and integrate the invaluable <a href="https://ci.testling.com/">testling</a> service to run the tests on various browsers that may not be at your disposal otherwise.</p>
<p>While <a href="https://ci.testling.com/">testling</a> provides one consumer endpoint, using the <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol">TAP</a> specification in reporting test results can easily be consumed by another test harness of your choice.</p>
<p>For more information on running <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> in the browser and/or to report any issues, please visit the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> repository.</p>
]]></description><link>http://custardbelly.com/blog/blog-posts/2014/02/18/cucumberjs-testling/index.html</link><guid isPermaLink="true">http://custardbelly.com/blog/blog-posts/2014/02/18/cucumberjs-testling/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[BDD in JavaScript V: CucumberJS and The Browser, II]]></title><description><![CDATA[<p><em>&quot;Whoa. Whoa. Whoa. You can&#39;t just use roman numerals all over the place in your post titles...&quot;</em></p>
<p>In the <a href="http://custardbelly.com/blog/blog-posts/2014/02/10/cucumberjs-tests-browser/index.html">previous article</a> I addressed the available libraries and practices to have your <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> specs running in a browser environment, as well as introduced a new project begun by me: <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a>.</p>
<p>I had originally had the entirety of this post in the previous post, but felt that it was a little bit of information overload. As such, I decided to split them into two posts.</p>
<p>The intent of this article is to address incorporating <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> into our current Grocery List Application example and continue developing features that involve User Interaction with the DOM.</p>
<h3 id="-gt-code">&gt; code</h3>
<p>Supported files related to this and any subsequent posts on this topic will be available at:<br><a href="https://github.com/bustardcelly/cucumberjs-examples"><a href="https://github.com/bustardcelly/cucumberjs-examples">https://github.com/bustardcelly/cucumberjs-examples</a></a></p>
<h2 id="cucumberjs-browser">cucumberjs-browser</h2>
<p>The <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> CLI tool was created to provide a means in which to write my <strong>Features</strong>, <strong>Step Definitions</strong> and support files as I normally would for a project, and bundle them to be run in a browser and provide custom reporting.</p>
<p>First order of business for incorporating the <strong>cucumberjs-browser</strong> tool into the Grocery List applicaiton project we have been working through in this series is to install the tool:</p>
<pre><code><span class="hljs-variable">$npm</span> install <span class="hljs-attribute">-g</span> cucumberjs<span class="hljs-attribute">-browser</span>
</code></pre><p>(you may need to <code>sudo</code>) </p>
<p>That should install the tool and now be accessible from the command line. The <a href="https://github.com/bustardcelly/cucumberjs-browser/blob/master/README.md">README</a> is the best place to find the most up-to-date infromation about the tool, but the general usage is as follows:</p>
<pre><code>$ <span class="hljs-tag">cucumberjs-browser</span> <span class="hljs-attr_selector">[-o outdir]</span> <span class="hljs-attr_selector">[-f format]</span> <span class="hljs-attr_selector">[--tmpl template]</span> <span class="hljs-attr_selector">[--features features]</span>
</code></pre><p>We&#39;ll get into how we will use it with our project and the options in a bit, but before then...</p>
<h2 id="fail-first">Fail first</h2>
<p>In a pervious article in this series, we added an <code>add-item</code> feature that detailed the scenarios of adding and accessible an item from a collection of the Grocery List application. This is still a valid logical feature that normally I would not modify to incorporate User Interaction when incorporating <strong>Features</strong> related to the application being browser-based. Instead, I would create a new <strong>Feature</strong> that details how a User can add and view new item in a browser environment.</p>
<p>Let&#39;s define our spec:</p>
<p><em>/features/add-item-view.feature</em></p>
<pre><code>Feature: Shopper can add <span class="hljs-keyword">and</span> view new <span class="hljs-property">item</span> <span class="hljs-keyword">in</span> Grocery List
  As a shopper using <span class="hljs-keyword">the</span> browser-based app
  I want <span class="hljs-keyword">to</span> add an <span class="hljs-property">item</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">my</span> grocery <span class="hljs-type">list</span> view
  So <span class="hljs-keyword">that</span> I can remember <span class="hljs-keyword">to</span> buy <span class="hljs-keyword">that</span> <span class="hljs-property">item</span> <span class="hljs-keyword">at</span> <span class="hljs-keyword">the</span> grocery store

  Background: Grocery List Application <span class="hljs-keyword">is</span> Open
    Given I have opened <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> <span class="hljs-type">application</span>

  Scenario: Submit <span class="hljs-keyword">of</span> valid <span class="hljs-property">item</span> adds <span class="hljs-property">item</span> <span class="hljs-keyword">to</span> <span class="hljs-type">list</span>
    Given I have an empty grocery <span class="hljs-type">list</span> view
    When I provide a valid grocery <span class="hljs-type">list</span> <span class="hljs-property">item</span> <span class="hljs-property">name</span>
    And I select <span class="hljs-keyword">to</span> add an <span class="hljs-property">item</span>
    Then The <span class="hljs-property">item</span> <span class="hljs-keyword">is</span> added <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> view

  Scenario: Submit <span class="hljs-keyword">of</span> valid <span class="hljs-property">item</span> adds <span class="hljs-property">item</span> <span class="hljs-keyword">to</span> collection
    Given I have an empty grocery <span class="hljs-type">list</span> view
    When I provide a valid grocery <span class="hljs-type">list</span> <span class="hljs-property">item</span> <span class="hljs-property">name</span>
    And I select <span class="hljs-keyword">to</span> add an <span class="hljs-property">item</span>
    Then The <span class="hljs-property">item</span> <span class="hljs-keyword">is</span> accessible <span class="hljs-keyword">from</span> <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> collection
</code></pre><p>We have declared two <strong>Scenarios</strong> that define the <strong>Feature</strong> criteria in which a User interacts with DOM elements to add and view a new item to the Grocery List application.</p>
<p>Running that produces the expected <code>undefined</code> steps notification:</p>
<pre><code>$ npm run test
<span class="hljs-preprocessor">.UUU</span><span class="hljs-preprocessor">.UUUU</span><span class="hljs-preprocessor">.UUUU</span>........

<span class="hljs-number">4</span> scenarios (<span class="hljs-number">2</span> undefined, <span class="hljs-number">2</span> passed)
<span class="hljs-number">21</span> steps (<span class="hljs-number">10</span> undefined, <span class="hljs-number">11</span> passed)
</code></pre><h3 id="given-i-have-an-empty-grocery-list-view">Given I have an empty grocery list view</h3>
<p>We have a few things we need to address, but before we get into the nitty-gritty, let&#39;s turn this <span style="color:red;">red</span> in true TDD fashion while filling out our API expectation of the <em>Given</em> in each of the <strong>Scenarios</strong></p>
<p><em>/features/step_definitions/add-item-view.steps.js</em></p>
<pre><code><span class="hljs-keyword">var</span> assert = <span class="hljs-built_in">require</span>(<span class="hljs-string">'assert'</span>);

module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
<span class="hljs-pi">  'use strict'</span>;

  <span class="hljs-keyword">this</span>.World = <span class="hljs-built_in">require</span>(<span class="hljs-string">'../support/world'</span>).World;

  <span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have an empty grocery list view$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    <span class="hljs-keyword">this</span>.emptyGroceryListView();
    assert.equal(<span class="hljs-keyword">this</span>.getGroceryListView().childNodes.length, <span class="hljs-number">0</span>);
    callback();
  });

});
</code></pre><pre><code>$ npm run test
.F.F.F........

(::) failed steps (::)
<span class="hljs-keyword">...</span>
Failing scenarios:
/Users/toddanderson/Documents/workspace/custardbelly/cucumberjs-example/features/add-item-view.feature:<span class="hljs-number">9</span> <span class="hljs-comment"># Scenario: Select of Add Item opens input</span>
/Users/toddanderson/Documents/workspace/custardbelly/cucumberjs-example/features/add-item-view.feature:<span class="hljs-number">14</span> <span class="hljs-comment"># Scenario: Submit of valid item adds item to list</span>
/Users/toddanderson/Documents/workspace/custardbelly/cucumberjs-example/features/add-item-view.feature:<span class="hljs-number">20</span> <span class="hljs-comment"># Scenario: Submit of valid item adds item to collection</span>

<span class="hljs-number">5</span> scenarios (<span class="hljs-number">3</span> failed, <span class="hljs-number">2</span> passed)
<span class="hljs-number">22</span> steps (<span class="hljs-number">3</span> failed, <span class="hljs-number">8</span> skipped, <span class="hljs-number">11</span> passed)
</code></pre><p>Huge explosion. Red everywhere. Dogs and cats, living together. Mass hysteria.</p>
<p>That&#39;s good, we expect the world to crash with nothing to support our claims of an &quot;empty grocery list view&quot;. What does that even mean in the current context? We haven&#39;t even a web page to view our Grocery List. These all are issues we need to address in resolving just this single <strong>Step Definition</strong>.</p>
<h2 id="client-side-script">Client-Side Script</h2>
<p>This is a good point to discuss the client-side script that will act as our main entry point for the browser-based Grocery List Application. </p>
<p>If you have been following along with the examples in this series, we have been slowly building up specs for our Grocery List Application, yet it has been done so while testing under the <a href="http://nodejs.org">Node</a>-based <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> CLI tool. Nothing wrong with that, and in fact we have a good starting point in which we can ensure that a proper collection model is maintained with regards to adding and accessing items.</p>
<p>However, now we are moving to a browser environment and need to address how we will load and interact with our application within the browser context. Because we have been developing node modules (to be tested under CucumberJS specs) which utilize the <a href="http://wiki.commonjs.org/wiki/Modules/1.1">CommonJS module format</a> we can easily bundle our scripts for the browser using the wonderful <a href="http://browserify.org/">browserify</a> tool.</p>
<p><em>Disclaimer: Hats off to <a href="http://benclinkinbeard.com/">Ben Clinkenbeard</a> for finally persuading me to look into <a href="http://browserify.org/">browserify</a> over my years-long obsession with <a href="http://requirejs.org/">RequireJS</a>.</em></p>
<h3 id="browserify">Browserify</h3>
<p>It is too much for this article to address <a href="http://browserify.org/">browserify</a> and its history and attributes. There are several articles that are google-able that explain what <strong>browserify</strong> is, how to use it, and its virtues and disadvantages over AMD. I implore you to check them out and make a sound judgement as it relates to your team and project requirements.</p>
<p>That said, I have found <a href="http://browserify.org/">browserify</a> extremely beneficial and am going to use it for the examples in this series in delivering the client-side scripts.</p>
<p>First order of business is to install <strong>browserify</strong> as you would any project-local node module:</p>
<pre><code><span class="hljs-variable">$ </span>npm install browserify
</code></pre><p>Now we need to define how we want our module to be bundled for the browser. If we are talking a single entry point - which most main files are - I prefer to define a global name to assign our module so it is easily accessible on the DOM. Keeping in mind that we are primarily bundling our code so we can do TDD, we define an proper output directory that won&#39;t get mixed up with our distribution:</p>
<pre><code>$ mkdir test/script &amp;&amp; \
  node node_modules/<span class="hljs-preprocessor">.bin</span>/browserify script/app<span class="hljs-preprocessor">.js</span> -o test/script/app<span class="hljs-preprocessor">.js</span> -s grocerylist
</code></pre><p>With that command, we created the output directory for our main file - <code>app.js</code> - and bundled the <em>script/app.js</em> file with any dependencies (which currently were only <em>script/model/grocery-list.js</em>). As well, our module is accessible on the <code>window</code> object as <code>grocerylist</code>.</p>
<h2 id="index-file">Index File</h2>
<p>So we have our bundled scripts and an exposed entry to our application through <code>window.grocerylist</code>, and now we need a way to access and view the application - an html file.</p>
<p>Because we will be using the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> tool to bundle our features and specs to be run under a browser environment, we will copy and modify the default template shipped with that tool to suit our needs for our application.</p>
<p>At this stage, we are simply going to add a <code>script</code> tag for our application bundle we created in the previous section:</p>
<p><em>template/testrunner.html</em></p>
<pre><code><span class="hljs-doctype">&lt;!doctype html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">http-equiv</span>=<span class="hljs-value">"Content-Type"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"text/html;charset=utf-8"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"lib/cucumber.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"features.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="vbscript">&lt;% _.<span class="hljs-keyword">each</span>(modules, <span class="hljs-keyword">function</span>(module) { %&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"&lt;%= module.filepath %&gt;"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="vbscript">&lt;% }); %&gt;</span>
    <span class="vbscript">&lt;% <span class="hljs-keyword">if</span>(listener.exists) { %&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"script/&lt;%= listener.filename %&gt;"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="vbscript">&lt;% }; %&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">
      (<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(window)</span> {</span>

        <span class="hljs-comment">// Need to concat all *.features &gt; browserify.standalone = cukefeatures</span>
        <span class="hljs-keyword">var</span> features = window.cukefeatures.split(<span class="hljs-string">'&amp;crarr'</span>).join(<span class="hljs-string">'\n'</span>);

        <span class="hljs-comment">// Need to concat all support + step_definitions, and export as a function</span>
        <span class="hljs-keyword">var</span> support = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
          <span class="hljs-keyword">this</span>.Given = <span class="hljs-keyword">this</span>.When = <span class="hljs-keyword">this</span>.Then = <span class="hljs-keyword">this</span>.defineStep;
          <span class="hljs-comment">// Would be put on window if /support/world found.</span>
          <span class="hljs-keyword">if</span>(<span class="hljs-string">'world'</span> <span class="hljs-keyword">in</span> window) {
            <span class="hljs-keyword">this</span>.World = window[<span class="hljs-string">'world'</span>].World;
          }
          &lt;% _.each(steps, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(step)</span> {</span> %&gt;
          window[<span class="hljs-string">'&lt;%= step.name %&gt;'</span>].call(<span class="hljs-keyword">this</span>);
          <span class="xml"><span class="vbscript">&lt;% }); %&gt;</span>
        };

        var runtime = Cucumber(features, support);
        <span class="vbscript">&lt;% <span class="hljs-keyword">if</span>(listener.exists) { %&gt;</span>
        runtime.attachListener(window.cukelistener.instance());
        <span class="vbscript">&lt;% }; %&gt;</span>
        runtime.start(function(){
          <span class="vbscript">&lt;% <span class="hljs-keyword">if</span>(listener.exists) { %&gt;</span>
          window.cukelistener.instance().complete();
          <span class="vbscript">&lt;% } <span class="hljs-keyword">else</span> { %&gt;</span>
          console.log(Array.prototype.slice.call(arguments));
          <span class="vbscript">&lt;% }; %&gt;</span>
        });
      }(window));
    </span></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"./script/app.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>
</code></pre><p>Most of what is in this page template is copied from the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> project. The only addition - at this point - is the script appended within the <code>body</code> that will load our app bundle.</p>
<p>If we were to run the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> tool and generate our bundled app, specs and template:</p>
<pre><code>$ cucumberjs<span class="hljs-attribute">-browser</span> <span class="hljs-attribute">-o</span> test <span class="hljs-subst">--</span>tmpl template/testrunner<span class="hljs-built_in">.</span>html <span class="hljs-attribute">-f</span> tap
</code></pre><p>That will generate the JavaScript bundle files for the <strong>Features</strong>, <strong>Step Definitions</strong> and support files we have been creating and curating in this series, along with the templated HTML file with our resources defined and place them in a <em>/test</em> directory.</p>
<p>If we were to open that HTML file - <em>/test/cucumberjs-testrunner.html</em> - and opened the Console of our developer tools, we would see a <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol">TAP</a> report of our test... <span style="color: red;">failing</span> :)</p>
<p>If we were to change the format option:</p>
<pre><code>$ cucumberjs<span class="hljs-attribute">-browser</span> <span class="hljs-attribute">-o</span> test <span class="hljs-subst">--</span>tmpl template/testrunner<span class="hljs-built_in">.</span>html <span class="hljs-attribute">-f</span> ui
</code></pre><p>We would see those same <span style="color:red;">failing</span> tests, but this time on the DOM.</p>
<div style="width: 100%; overflow-x: scroll; background-color:#fff; text-align: center;">
  <img src="http://custardbelly.com/blog/images/cucumberjs-browser-2.png" alt="cucumberjs in the browser, failing">
</div>

<p>We have gone from failing on the command line to failing in the browser... isn&#39;t it glorious :)</p>
<h2 id="automate-all-the-things">Automate all the things</h2>
<p>We had <a href="http://custardbelly.com/blog/blog-posts/2014/01/29/cucumberjs-build/index.html">previously automated our testing</a> under the node-based environment; it was a simple as setting up a file watcher and issuing a command to run the <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> CLI tool on change.</p>
<p>Our process has now become a little more involved, but not anything too complex (<em>thanks to the wonderful <a href="https://www.npmjs.org/">npm</a> community!</em>) that an automated build and test procedure couldn&#39;t be implemented. The only difference is that feedback will now reside in the DOM and/or Console of a browser - so instead of coding in an editor and watching it fail on the command line, we are now going to need to focus on failures reported in the browser as we TDD.</p>
<h3 id="watch-script">watch script</h3>
<p>Just as we had done in a <a href="http://custardbelly.com/blog/blog-posts/2014/01/29/cucumberjs-build/index.html">previous article</a>, we are going to create a new script that will essentially do the following:</p>
<ol>
<li>start a livereload server</li>
<li>start a local server to serve the testrunner</li>
<li>launch the testrunner in a browser</li>
<li>bundle the app and run the cucumberjs-browser tool</li>
<li>watch and reload the testrunner in the browser on change to source files</li>
</ol>
<p>To accomplish this task, we are going to use a couple more npm modules; in particular:</p>
<ol>
<li><a href="https://github.com/mklabs/tiny-lr">tiny-lr</a></li>
<li><a href="https://github.com/senchalabs/connect">connect</a></li>
<li><a href="https://github.com/jjrdn/node-open">open</a></li>
</ol>
<p>I invite you to go check each of those projects out as I won&#39;t go into much detail about each of them in this article. It should be noted, however, that you will need to install the <a href="http://livereload.com/">LiveReload</a> <a href="http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-">browser extension(s)</a> in order to properly use the <code>watch</code> script:</p>
<p><em>cuke-browser-watcher.js</em></p>
<pre><code>#!<span class="hljs-regexp">/usr/</span>bin/env node
<span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);
<span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);
<span class="hljs-keyword">var</span> watch = <span class="hljs-built_in">require</span>(<span class="hljs-string">'node-watch'</span>);
<span class="hljs-keyword">var</span> child_process = <span class="hljs-built_in">require</span>(<span class="hljs-string">'child_process'</span>);
<span class="hljs-keyword">var</span> mkdirp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'mkdirp'</span>);
<span class="hljs-keyword">var</span> browserify = <span class="hljs-built_in">require</span>(<span class="hljs-string">'browserify'</span>);

<span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>);
<span class="hljs-keyword">var</span> tinylr = <span class="hljs-built_in">require</span>(<span class="hljs-string">'tiny-lr'</span>);
<span class="hljs-keyword">var</span> connect = <span class="hljs-built_in">require</span>(<span class="hljs-string">'connect'</span>);
<span class="hljs-keyword">var</span> open = <span class="hljs-built_in">require</span>(<span class="hljs-string">'open'</span>);
<span class="hljs-keyword">var</span> S = <span class="hljs-built_in">require</span>(<span class="hljs-string">'string'</span>);

<span class="hljs-keyword">var</span> outdir = <span class="hljs-string">'test'</span>;
<span class="hljs-keyword">var</span> browserCukes;

<span class="hljs-keyword">var</span> livereloadPort = <span class="hljs-number">35729</span>;
<span class="hljs-keyword">var</span> connectPort = <span class="hljs-number">8080</span>;
<span class="hljs-keyword">var</span> JS_EXT = <span class="hljs-regexp">/^.*\.js/i</span>;
<span class="hljs-keyword">var</span> options = [<span class="hljs-string">'-f'</span>, <span class="hljs-string">'ui'</span>,
               <span class="hljs-string">'-o'</span>, outdir,
               <span class="hljs-string">'--tmpl'</span>, <span class="hljs-string">'template/testrunner.html'</span>];

<span class="hljs-comment">// [TASKS]</span>
<span class="hljs-comment">// a. re-bundle the app.</span>
<span class="hljs-keyword">var</span> bundleApplication = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(f, callback)</span> {</span>
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    browserify(__dirname + <span class="hljs-string">'/script/app.js'</span>)
      .bundle({
        standalone: <span class="hljs-string">'app'</span>
      })
      .pipe(fs.createWriteStream(path.resolve(outdir + <span class="hljs-string">'/script/app.js'</span>)))
      .on(<span class="hljs-string">'close'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
        console.log(<span class="hljs-string">'changed app.js...'</span>);
        <span class="hljs-keyword">if</span>(callback) {
          callback();
        }
      });
  };
};
<span class="hljs-comment">// b. rerun cucumberjs-browser tool.</span>
<span class="hljs-keyword">var</span> cuke = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(f, callback)</span> {</span>
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">var</span> filename = S(path.basename(f, <span class="hljs-string">'.js'</span>).split(<span class="hljs-string">'.'</span>).join(<span class="hljs-string">'-'</span>)).camelize().s;
    browserCukes = child_process.spawn(<span class="hljs-string">'cucumberjs-browser'</span>, options)
      .on(<span class="hljs-string">'exit'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
        console.log(<span class="hljs-string">'changed '</span> + filename + <span class="hljs-string">'...'</span>);
        <span class="hljs-keyword">if</span>(callback) {
          callback();
        }
      });
  };
};

<span class="hljs-comment">// 1. Recursive mkdir /test/script if not exist.</span>
mkdirp.sync(outdir + <span class="hljs-string">'/script'</span>);

<span class="hljs-comment">// 2. Create tiny-livereload server.</span>
<span class="hljs-keyword">var</span> lr = tinylr();
lr.listen(livereloadPort, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  console.log(<span class="hljs-string">'livereload listening on '</span> + livereloadPort + <span class="hljs-string">'...'</span>);
});

<span class="hljs-comment">// 3. Start server on localhost.</span>
<span class="hljs-keyword">var</span> app = connect().use(connect.static(__dirname + <span class="hljs-string">'/test'</span>));
<span class="hljs-keyword">var</span> server = http.createServer(app).listen(connectPort, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  console.log(<span class="hljs-string">'local server started on '</span> + connectPort + <span class="hljs-string">'...'</span>);
  console.log(<span class="hljs-string">'Note: Remember to start the livereload browser extension!'</span>);
  console.log(<span class="hljs-string">'http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-'</span>);
  cuke(<span class="hljs-string">'./features/support/world'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    bundleApplication(<span class="hljs-string">'./script/app.js'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
      open(<span class="hljs-string">'http://localhost:'</span> + connectPort + <span class="hljs-string">'/cucumber-testrunner.html'</span>);  
    })();
  })();
});

<span class="hljs-comment">// 4. Watch source and generate bundles.</span>
watch([<span class="hljs-string">'./features'</span>, <span class="hljs-string">'./script'</span>], {recursive:<span class="hljs-literal">true</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(filename)</span> {</span>
  <span class="hljs-comment">// Used to resolve when running operation(s) are complete.</span>
  <span class="hljs-keyword">var</span> resolver;
  <span class="hljs-keyword">var</span> running = <span class="hljs-literal">false</span>;
  <span class="hljs-keyword">var</span> resolveWatch = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(limit)</span> {</span>
    <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;
    running = <span class="hljs-literal">true</span>;
    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
      <span class="hljs-keyword">if</span>(++count === limit) {
        count = <span class="hljs-number">0</span>;
        running = <span class="hljs-literal">false</span>;
      }
      <span class="hljs-keyword">else</span> {
        running = <span class="hljs-literal">true</span>;
      }
    };
  };

  <span class="hljs-keyword">if</span>(!running &amp;&amp; filename.match(JS_EXT)) {
    <span class="hljs-keyword">var</span> bundleAppInvoke = bundleApplication(filename, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
      lr.changed({
        body: {
          files: [<span class="hljs-string">'script/app'</span>]
        }
      });
      resolver();
    });
    <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/^script?/i</span>.test(filename)) {
      resolver = resolveWatch(<span class="hljs-number">1</span>);
      bundleAppInvoke();
    }
    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/^features?/i</span>.test(filename)) {
      resolver = resolveWatch(<span class="hljs-number">2</span>);
      cuke(filename, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
        lr.changed({
          body: {
            files: [filename]
          }
        });
        resolver();
        bundleAppInvoke();
      })();
    }
  }

});
</code></pre><p>This <code>watch</code> script is very similar to the one we created previously. Aside from moving the bundler tasks outside of the <code>watch()</code>, the main difference is that we now start a <code>tiny-livereload</code> server and <code>http</code> server running on port 8080 before starting the <code>watch</code> task.</p>
<p>Running this will also automatically launch the testrunner in your default browser. It is important to note that, in order for the reload on file change to work, you must enable the <a href="http://livereload.com/">LiveReload</a> <a href="http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-">browser extension for that browser</a>.</p>
<p>As we have done before, we can add this to our package <code>scripts</code>:</p>
<p><em>package.json</em></p>
<pre><code>{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"cucumberjs-examples"</span>,
<span class="hljs-keyword">...</span>
  <span class="hljs-string">"scripts"</span>: {
    <span class="hljs-string">"test"</span>: <span class="hljs-string">"node node_modules/.bin/cucumber-js"</span>,
    <span class="hljs-string">"watch"</span>: <span class="hljs-string">"node cuke-watcher.js"</span>,
    <span class="hljs-string">"watch-browser"</span>: <span class="hljs-string">"node cuke-browser-watcher"</span>
  }
<span class="hljs-keyword">...</span>
}
</code></pre><p>Open up the terminal and enter the following command:</p>
<pre><code><span class="hljs-variable">$ </span>npm run watch-browser
</code></pre><p>... and we are all set to keep TDD&#39;ing with an automated <code>watch</code> script that will reload the browser on change to our step definitions and application source files!</p>
<h2 id="back-to-passing">Back to Passing</h2>
<p>We side-stepped our development to address a few key issues: bundling scripts for the browser and automating tests against <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a>. With our <code>watch</code> script up and running, we can see we are in the <span style="color:red;">red</span> still - let&#39;s start turning steps <span style="color:green">green</span> :)</p>
<p>First order of business is that our first <strong>Given</strong> step for the Add Item View <strong>Feature</strong> is interfacing with a currently non-existant API on the <strong>World</strong>. We eschewed the need for an additional Web Driver library which would provide a conventient API through a browser facade. At this stage, I think we can reasonably have our <strong>World</strong> provide that API and not need to include more external libraries. </p>
<p><em>It might even be a reasonable discussion that such Web Drivers are not needed at all in such circumstances, but I won&#39;t go there for the moment as that gets into a discussion about integration testing vs unit testing and BDD practice - ie, a can of worms ;)</em></p>
<h3 id="modifying-our-world">Modifying Our World</h3>
<p>Now that we know we are running our tests in the browser, we have access to the global <code>window</code> and can reference the DOM without restriction to running <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> under <a href="http://nodejs.org">node</a>.</p>
<p>Let&#39;s modify our <strong>World</strong> to expose the API we are invoking from our <strong>Given</strong> in the Add Item View __Feature:</p>
<p><em>/features/support/world.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> World = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">World</span><span class="hljs-params">(callback)</span> {</span>

  <span class="hljs-keyword">this</span>.window = window;
  <span class="hljs-keyword">this</span>.app = window.app;
  <span class="hljs-keyword">this</span>.groceryListApplication = <span class="hljs-literal">undefined</span>;

  <span class="hljs-keyword">this</span>.openGroceryList = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.app.newSession();
  };
  <span class="hljs-keyword">this</span>.createGroceryItem = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-string">'apple'</span>;
  };

  <span class="hljs-keyword">this</span>.emptyGroceryListView = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">this</span>.app.empty();
  };

  callback();

};

module.exports.World = World;
</code></pre><p>There is actually a quite bit changed from our previous <strong>World</strong>:</p>
<ol>
<li>Removed <code>require()</code> of app module</li>
<li>Added access to <code>app</code> reference on <code>window</code> from our browserified bundle</li>
<li>Changed reference to <code>app</code> that creates a new session</li>
<li>Added <code>emptyGroceryListView</code> method to World</li>
</ol>
<p>So we took the <strong>World</strong> into a browser environment with its referencing the app, but we are still (as expected) failing - this time alerting us to:</p>
<p><span style="color:red;">- Cannot call method &#39;newSession&#39; of undefined at World.openGroceryList</span></p>

<p>which is stemming from our previously defined <strong>Background</strong> step definition:</p>
<pre><code><span class="hljs-keyword">Background</span>: Grocery <span class="hljs-keyword">List</span> Application is <span class="hljs-keyword">Open</span>
  Given <span class="hljs-keyword">I</span> have opened the grocery list application
</code></pre><p>This actually stems from a much larger problem: accessing the the application module on the <code>window</code> before it has finished being loaded by the browser. As such, we will need to modify this step definition to ensure that the DOM has completed load before we can move forward in interactinf with the <strong>World</strong> API that now exposes communication to the DOM.</p>
<p><em>/features/step_definitions/background-open-application.step.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;
<span class="hljs-keyword">var</span> assert = <span class="hljs-built_in">require</span>(<span class="hljs-string">'assert'</span>);

module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  <span class="hljs-keyword">this</span>.World = <span class="hljs-built_in">require</span>(<span class="hljs-string">'../support/world'</span>).World;

  <span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have opened the grocery list application$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    (<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(world)</span> {</span>
      world.domload(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
        world.groceryListApplication = world.openGroceryList();
        assert(world.groceryListApplication, <span class="hljs-string">'Grocery List Application is required to be open for editability.'</span>);
        callback();
      });
    }(<span class="hljs-keyword">this</span>));
  });

};
</code></pre><p>Now we are offloading our assertion and callback to the complete of DOM load through the <strong>World</strong> to ensure that we have successfully loaded the application.</p>
<p>This will now fail on <span style="color: red;">- Object #&lt;World&gt; has no method &#39;domload&#39;</span>, so let&#39;s get that fixed up:</p>
<p><em>/features/support/world.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> World = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">World</span><span class="hljs-params">(callback)</span> {</span>

  <span class="hljs-keyword">this</span>.window = process.browser ? window : {};
  <span class="hljs-keyword">this</span>.app = <span class="hljs-literal">undefined</span>;
  <span class="hljs-keyword">this</span>.groceryListApplication = <span class="hljs-literal">undefined</span>;

  <span class="hljs-keyword">var</span> defineGlobals = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(w, doc)</span> {</span>
    <span class="hljs-keyword">this</span>.app = w.app;
  };

  <span class="hljs-keyword">this</span>.domload = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    (<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(world)</span> {</span>
      <span class="hljs-keyword">if</span>(document.readyState === <span class="hljs-string">'complete'</span>) {
        defineGlobals.call(world, window, document);
        callback();  
      }
      <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">var</span> delegate = document.addEventListener ? <span class="hljs-string">'addEventListener'</span> : <span class="hljs-string">'attachEvent'</span>;
        <span class="hljs-keyword">var</span> eventType = document.addEventListener ? <span class="hljs-string">'load'</span> : <span class="hljs-string">'onload'</span>;
        window[delegate](eventType, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
          defineGlobals.call(world, window, document);
          callback();
        });
      }
    }(<span class="hljs-keyword">this</span>));
  };

  <span class="hljs-keyword">this</span>.openGroceryList = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.app.newSession();
  };
  <span class="hljs-keyword">this</span>.createGroceryItem = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-string">'apple'</span>;
  };

  callback();

};

module.exports.World = World;
</code></pre><p>Woohoo! Now we are back with the exception <span style="color: red;">Object #&lt;World&gt; has no method &#39;emptyGroceryListView&#39;</span> that got us in this mess... <em>BUT</em> the previous tests we had <span style="color: green;">passing</span> are now passing again :)</p>
<p>For the sake of getting too &quot;noisy&quot; with code and explanations, for the following edits - unless an explanation is deemed worthy - I will just roll along with modifications to the test and source and show the series of <span style="color: red;">failures</span>.</p>
<p><em>/features/support/world.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> World = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">World</span><span class="hljs-params">(callback)</span> {</span>

  <span class="hljs-keyword">this</span>.window = process.browser ? window : {};
  <span class="hljs-keyword">this</span>.app = <span class="hljs-literal">undefined</span>;
  <span class="hljs-keyword">this</span>.groceryListApplication = <span class="hljs-literal">undefined</span>;

...

  <span class="hljs-keyword">this</span>.emptyGroceryListView = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">this</span>.groceryListApplication.empty();
  };

  callback();

};

module.exports.World = World;
</code></pre><p><span style="color: red;">- Object #&lt;World&gt; has no method &#39;empty&#39; at World.emptyGroceryListView</span></p>

<p><em>/script/app.js</em></p>
<pre><code><span class="hljs-keyword">...</span>

var application = {
  init: <span class="hljs-keyword">function</span>(list) {
    this.list = list;
    <span class="hljs-keyword">return</span> this;
  },
  empty: <span class="hljs-keyword">function</span>() {
    this.list.empty();
  }
};

<span class="hljs-keyword">...</span>
</code></pre><p><span style="color: red;">- Object #&lt;World&gt; has no method &#39;getGroceryListView&#39; at World</span></p>

<p><em>/features/support/world.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> World = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">World</span><span class="hljs-params">(callback)</span> {</span>

  <span class="hljs-keyword">this</span>.window = process.browser ? window : {};
  <span class="hljs-keyword">this</span>.app = <span class="hljs-literal">undefined</span>;
  <span class="hljs-keyword">this</span>.groceryListApplication = <span class="hljs-literal">undefined</span>;

...

  <span class="hljs-keyword">this</span>.getGroceryListView = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">this</span>.groceryListApplication.$listview;
  };

  callback();

};

module.exports.World = World;
</code></pre><p><span style="color: red;">- Cannot read property &#39;childNodes&#39; of undefined at World</span></p>

<p><em>/script/app.js</em></p>
<pre><code><span class="hljs-keyword">...</span>

var application = {
  init: <span class="hljs-keyword">function</span>(list) {
    this.list = list;
    this.$listview = document.querySelector(<span class="hljs-string">'#grocery-list'</span>);
    <span class="hljs-keyword">return</span> this;
  },
  empty: <span class="hljs-keyword">function</span>() {
    var gl = this.$listview;
    <span class="hljs-keyword">while</span> (gl.hasChildNodes()) {
      gl.removeChild(gl.lastChild);
    }
    this.list.empty();
  }
};

<span class="hljs-keyword">...</span>
</code></pre><p><span style="color: red;">- Cannot read property &#39;childNodes&#39; of null at World</span></p>

<p><em>/template/testrunner.html</em></p>
<pre><code><span class="hljs-doctype">&lt;!doctype html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
    ...
    <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"grocery-list"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"./script/app.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>
</code></pre><p>And we are back to <span style="color: green;">green</span>!... and <span style="color: rgb(117, 117, 37);">pending</span>. Let&#39;s move on to our next step definition:</p>
<h3 id="when-i-provide-a-valid-grocery-list-item-name">When I provide a valid grocery list item name</h3>
<p><em>/features/step_definitions/add-item-view.steps.js</em></p>
<pre><code><span class="hljs-keyword">...</span>

var enteredItem;

this.Given(/^I have an empty grocery list view$/, <span class="hljs-keyword">function</span>(callback) {
  this.emptyGroceryListView();
  assert.equal(this.getGroceryListView().childNodes.length, <span class="hljs-number">0</span>);
  callback();
});

this.When(/^I provide a valid grocery list item name$/, <span class="hljs-keyword">function</span>(callback) {
  enteredItem = this.createGroceryItem();
  this.enterNewGorceryListItem(enteredItem);
  callback();
});

<span class="hljs-keyword">...</span>
</code></pre><p>Back in the <span style="color: red;">red</span>!  </p>
<p><span style="color: red;">- Object #&lt;World&gt; has no method &#39;enterNewGorceryListItem&#39; at World</span></p>

<p><em>/features/support/world.js</em></p>
<pre><code><span class="hljs-keyword">var</span> World = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">World</span><span class="hljs-params">(callback)</span> {</span>

  <span class="hljs-keyword">this</span>.window = process.browser ? window : {};
  <span class="hljs-keyword">this</span>.app = <span class="hljs-literal">undefined</span>;
  <span class="hljs-keyword">this</span>.groceryListApplication = <span class="hljs-literal">undefined</span>;

  <span class="hljs-keyword">var</span> defineGlobals = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(w, doc)</span> {</span>
    <span class="hljs-keyword">this</span>.app = w.app;
  };

...

  <span class="hljs-keyword">this</span>.enterNewGorceryListItem = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>
    <span class="hljs-keyword">this</span>.groceryListApplication.enterNewItem(item);
  };

  callback();

};

module.exports.World = World;
</code></pre><p><span style="color: red;">- Object #&lt;Object&gt; has no method &#39;enterNewItem&#39; at World.enterNewGorceryListItem</span></p>

<p><em>/script/app.js</em></p>
<pre><code><span class="hljs-keyword">...</span>

var application = {
  init: <span class="hljs-keyword">function</span>(list) {
    this.list = list;
    this.$listview = document.querySelector(<span class="hljs-string">'#grocery-list'</span>);
    this.$itemInputView = document.querySelector(<span class="hljs-string">'#item-input'</span>);
    <span class="hljs-keyword">return</span> this;
  },
  empty: <span class="hljs-keyword">function</span>() {
    var gl = this.$listview;
    <span class="hljs-keyword">while</span> (gl.hasChildNodes()) {
      gl.removeChild(gl.lastChild);
    }
    this.list.empty();
  },
  enterNewItem: <span class="hljs-keyword">function</span>(item) {
    this.$itemInputView.value = item;
  }
};

<span class="hljs-keyword">...</span>
</code></pre><p><span style="color: red;">- Cannot set property &#39;value&#39; of null at Object.application.enterNewItem</span></p>

<p><em>/template/testrunner.html</em></p>
<pre><code><span class="hljs-doctype">&lt;!doctype html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
    ...
    <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"grocery-list"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">form</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"itemInput"</span>&gt;</span>Item name:<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"item-input"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"itemInput"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">item</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"./script/app.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>
</code></pre><p>Back to <span style="color: rgb(117, 117, 37);">pending</span>! Next step:</p>
<h3 id="and-i-select-to-add-an-item">And I select to add an item</h3>
<p><em>/features/step_definitions/add-item-view.steps.js</em></p>
<pre><code><span class="hljs-keyword">...</span>

this.When(/^I select to add an item$/, <span class="hljs-keyword">function</span>(callback) {
  this.clickAddGroceryListItem();
  callback();
});

<span class="hljs-keyword">...</span>
</code></pre><p><span style="color: red;">- Object #&lt;World&gt; has no method &#39;clickAddGroceryListItem&#39; at World.</span></p>

<p><em>/features/support/world.js</em></p>
<pre><code><span class="hljs-keyword">var</span> World = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">World</span><span class="hljs-params">(callback)</span> {</span>

  <span class="hljs-keyword">this</span>.window = process.browser ? window : {};
  <span class="hljs-keyword">this</span>.app = <span class="hljs-literal">undefined</span>;
  <span class="hljs-keyword">this</span>.groceryListApplication = <span class="hljs-literal">undefined</span>;

  <span class="hljs-keyword">var</span> defineGlobals = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(w, doc)</span> {</span>
    <span class="hljs-keyword">this</span>.app = w.app;
  };

...

  <span class="hljs-keyword">this</span>.createClickEvent = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">var</span> event = document.createEvent(<span class="hljs-string">'MouseEvents'</span>);
    event.initEvent(<span class="hljs-string">'click'</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);
    <span class="hljs-keyword">return</span> event;
  };

  <span class="hljs-keyword">this</span>.clickAddGroceryListItem = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">var</span> clickevent = <span class="hljs-keyword">this</span>.createClickEvent();
    <span class="hljs-keyword">this</span>.groceryListApplication.$addbutton.dispatchEvent(clickevent);
  };

...

  callback();

};

module.exports.World = World;
</code></pre><p><span style="color: red;">- Cannot call method &#39;dispatchEvent&#39; of undefined at World.clickAddGroceryListItem</span></p>

<p><em>/script/app.js</em></p>
<pre><code><span class="hljs-keyword">var</span> application = {
  init: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(list)</span> {</span>
    this.<span class="hljs-keyword">list</span> = <span class="hljs-keyword">list</span>;
    this.<span class="hljs-variable">$listview</span> = document.querySelector(<span class="hljs-string">'#grocery-list'</span>);
    this.<span class="hljs-variable">$itemInputView</span> = document.querySelector(<span class="hljs-string">'#item-input'</span>);
    this.<span class="hljs-variable">$addbutton</span> = document.querySelector(<span class="hljs-string">'#add-button'</span>);
    <span class="hljs-keyword">return</span> this;
  },
  <span class="hljs-keyword">empty</span>: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">var</span> gl = this.<span class="hljs-variable">$listview</span>;
    <span class="hljs-keyword">while</span> (gl.hasChildNodes()) {
      gl.removeChild(gl.lastChild);
    }
    this.<span class="hljs-keyword">list</span>.<span class="hljs-keyword">empty</span>();
  },
  enterNewItem: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>
    this.<span class="hljs-variable">$itemInputView</span>.value = item;
  }
};
</code></pre><p><span style="color: red;">- Cannot call method &#39;dispatchEvent&#39; of null at World.clickAddGroceryListItem</span></p>

<p><em>/template/testrunner.html</em></p>
<pre><code><span class="hljs-doctype">&lt;!doctype html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
    ...
    <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"grocery-list"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">form</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"itemInput"</span>&gt;</span>Item name:<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"item-input"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"itemInput"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">item</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"add-button"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"./script/app.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>
</code></pre><p>Back to <span style="color: rgb(117, 117, 37);">pending</span>! We&#39;re getting into assertion territory :) Next step:</p>
<h3 id="then-the-item-is-added-to-the-grocery-list-view">Then The item is added to the grocery list view</h3>
<p><em>/features/step_definitions/add-item-view.steps.js</em></p>
<pre><code><span class="hljs-keyword">...</span>

this.Then(/^The item is added to the grocery list view$/, <span class="hljs-keyword">function</span>(callback) {
  assert.equal(this.getGroceryListViewItemAtIndex(<span class="hljs-number">0</span>), enteredItem, <span class="hljs-string">'Entered item should be first in empty list.'</span>);
  callback();
});

<span class="hljs-keyword">...</span>
</code></pre><p><span style="color: red;">- Object #&lt;World&gt; has no method &#39;getGroceryListViewItemAtIndex&#39; at World</span></p>

<p><em>/features/support/world.js</em></p>
<pre><code>var World = <span class="hljs-keyword">function</span> World(callback) {

  this.window = process.browser ? window : {};
  this.app = undefined;
  this.groceryListApplication = undefined;

  var defineGlobals = <span class="hljs-keyword">function</span>(w, doc) {
    this.app = w.app;
  };

<span class="hljs-keyword">...</span>

  this.getGroceryListViewItemAtIndex = <span class="hljs-keyword">function</span>(index) {
    <span class="hljs-keyword">return</span> this.groceryListApplication.$listview.childNodes[index].textContent;
  }

<span class="hljs-keyword">...</span>

  callback();

};

module.exports.World = World;
</code></pre><p><span style="color: red;">- Cannot read property &#39;textContent&#39; of undefined at World.getGroceryListViewItemAtIndex</span></p>

<p><em>/script/app.js</em></p>
<pre><code>...

<span class="hljs-keyword">var</span> application = {
  init: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(list)</span> {</span>
    this.<span class="hljs-keyword">list</span> = <span class="hljs-keyword">list</span>;
    this.<span class="hljs-variable">$listview</span> = document.querySelector(<span class="hljs-string">'#grocery-list'</span>);
    this.<span class="hljs-variable">$itemInputView</span> = document.querySelector(<span class="hljs-string">'#item-input'</span>);
    this.<span class="hljs-variable">$addbutton</span> = document.querySelector(<span class="hljs-string">'#add-button'</span>);
    (<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(app)</span> {</span>
      app.<span class="hljs-variable">$addbutton</span>.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(event)</span> {</span>
        <span class="hljs-keyword">var</span> item = app.<span class="hljs-variable">$itemInputView</span>.value;
        app.addItemToView(item);
      });
    }(this));
    <span class="hljs-keyword">return</span> this;
  },
  <span class="hljs-keyword">empty</span>: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">var</span> gl = this.<span class="hljs-variable">$listview</span>;
    <span class="hljs-keyword">while</span> (gl.hasChildNodes()) {
      gl.removeChild(gl.lastChild);
    }
    this.<span class="hljs-keyword">list</span>.<span class="hljs-keyword">empty</span>();
  },
  enterNewItem: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>
    this.<span class="hljs-variable">$itemInputView</span>.value = item;
  },
  addItemToView: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>
    <span class="hljs-keyword">var</span> li = document.createElement(<span class="hljs-string">'li'</span>);
    <span class="hljs-keyword">var</span> text = document.createTextNode(item);
    li.appendChild(text);
    this.<span class="hljs-variable">$listview</span>.appendChild(li);
  }
};

...
</code></pre><p>By adding a <code>click</code> handler to the <code>button</code>, we are updating the view by adding a <code>li</code> element to the list view.</p>
<p>And we&#39;re back to <span style="color: rgb(117, 117, 37);">pending</span>! One last step:</p>
<h3 id="then-the-item-is-accessible-from-the-grocery-list-collection">Then The item is accessible from the grocery list collection</h3>
<p><em>/features/step_definitions/add-item-view.steps.js</em></p>
<pre><code><span class="hljs-keyword">...</span>

this.Then(/^The item is accessible from the grocery list collection$/, <span class="hljs-keyword">function</span>(callback) {
  assert.equal(this.groceryListApplication.list.getItemIndex(enteredItem), <span class="hljs-number">0</span>, <span class="hljs-string">'Added item should be found at first index.'</span>);
  callback();
});

<span class="hljs-keyword">...</span>
</code></pre><p>Utilizing the <code>getItemIndex()</code> method we created in passing the collection features from a previous article, we get back to failing.</p>
<p><span style="color: red;">- Added item should be found at first index. at World</span></p>
<p><em>/script/app.js</em></p>
<pre><code><span class="hljs-keyword">...</span>

var application = {
  init: <span class="hljs-keyword">function</span>(list) {
    this.list = list;
    this.$listview = document.querySelector(<span class="hljs-string">'#grocery-list'</span>);
    this.$itemInputView = document.querySelector(<span class="hljs-string">'#item-input'</span>);
    this.$addbutton = document.querySelector(<span class="hljs-string">'#add-button'</span>);
    (<span class="hljs-keyword">function</span>(app) {
      app.$addbutton.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-keyword">function</span>(event) {
        var item = app.$itemInputView.value;
        app.addItemToView(item);
        app.list.add(item);
      });
    }(this));
    <span class="hljs-keyword">return</span> this;
  },
  <span class="hljs-keyword">...</span>
};

<span class="hljs-keyword">...</span>
</code></pre><p>In adding a call to <code>list.add()</code> in the button handler within we just defined an update to the view, we bring ourselves to full <span style="color: green;">green</span>!</p>
<div style="width: 100%; overflow-x: scroll; background-color:#fff; text-align: center;">
  <img src="http://custardbelly.com/blog/images/cucumberjs-browser-3.png" alt="cucumberjs in the browser, passing">
</div>

<h2 id="considerations">Considerations</h2>
<p>If you have following along in getting these new browser-based <strong>Features</strong> to pass in that environment, I have taken some liberties with regards to architecture and process with the hopes to not add noise to the task at hand.</p>
<p>In reality, we should consider the next phase as a <em>Refactor</em>. The particular areas in which I see issues that I would address and.or discuss with my team are:</p>
<ul>
<li>Implementing view update based on collection events</li>
<li>Templatize-ing the main view to be wrapped in production and injecting as a partial to the testrunner template</li>
<li>Building the application to be deployed as a web-based application and User Tested</li>
</ul>
<p>I am sure there are more, and that you have a few ideas as well, but these are at least three aspects of the architecture of the project and product that can be tackled with assurance now that we have a test harness for the features criteria :)</p>
<h2 id="conclusion">Conclusion</h2>
<p>If you made it down this far, I do appreciate you taking the time to follow along - I know this was a bit of a long one.</p>
<p>I hoped to have demonstrated the process of going from <strong>Features</strong> to <strong>Step Definitions</strong> to implementation code to pass criteria all while living in a real browser environment using the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> and test automation. On the surface, it may seem like quite a process, but my personal experience is that BDD forces you into thinking about minimilistic design while putting your code under a test harness from which you can maintain and add new features with assurance.</p>
<p>Source for examples related to this post can be found in the <a href="https://github.com/bustardcelly/cucumberjs-examples/tree/0.5.0.post">0.5.0.post tag on my Github account</a>.</p>
<h2 id="to-come">To Come</h2>
<p>There are a few extra productivity tidbits I have picked up while working with the wondeful <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> tool in developing several applications for both the web and server.</p>
<p>Who knows... I have had a blast going through the articles in this series demonstrating TDD using the BDD tool, <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>. I might just continue to evolve the example to a fully-functional application just as I had done in the <a href="http://custardbelly.com/blog/blog-pages/category/grocery-ls.html">Making of a Test-Driven Grocery List Application</a> series which focused on the <a href="http://jasmine.github.io/2.0/introduction.html">Jasmine</a> library.</p>
<p>Additionally, I am invested in the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> I created during (and as a result) of this series and hope to write some more articles on its structure, usage and any additions/fixes that are made and I welcome you to help me in making <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> a great tool in being able run your specs in a real browser environment without having to change your current workflow in defining <strong>Features</strong>, <strong>Step Definitions</strong> and support files.</p>
<p>Cheers!</p>
]]></description><link>http://custardbelly.com/blog/blog-posts/2014/02/12/cucumberjs-browser-update/index.html</link><guid isPermaLink="true">http://custardbelly.com/blog/blog-posts/2014/02/12/cucumberjs-browser-update/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[BDD in JavaScript IV: CucumberJS and The Browser]]></title><description><![CDATA[<p>In my <a href="http://custardbelly.com/blog/blog-posts/2014/01/29/cucumberjs-build/index.html">previous post</a> in this series detailing how I use <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>, I addressed a few common build tools in JavaScript to automate the watching and running of tests. While beneficial to a proper agile workflow, I did not introduce any new concepts or development information directly associated with using CucumberJS, itself.</p>
<p>In this article, I intend to take on a pretty meaty subject - running your cukes in the browser. It is a subject I have grappled with for some time and have tried different solutions, eventually <a href="https://github.com/bustardcelly/cucumberjs-browser">creating my own</a>. </p>
<h3 id="-gt-code">&gt; code</h3>
<p>Supported files related to this and any subsequent posts on this topic will be available at:<br><a href="https://github.com/bustardcelly/cucumberjs-examples"><a href="https://github.com/bustardcelly/cucumberjs-examples">https://github.com/bustardcelly/cucumberjs-examples</a></a></p>
<p><em>Disclaimer: I did not start out this series to promote the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> tool. In fact, it came to life as a result of this series :)</em></p>
<h2 id="why-the-browser">Why The Browser</h2>
<p><a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> is built on <a href="http://nodejs.org">Node</a>. As such, the CLI tool that we have been running to verify our tests in previous articles is living in that environment. </p>
<p>This is well and good if we were creating an application that was intended to live within Node. However, what if we are building an application that is to live inside the browser, which is often the case for me as a, primarily, Front End Developer? How do we go from <strong>Features</strong> detailing DOM interaction to passing <strong>Step Definitions</strong> that require a browser environment using <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>?</p>
<h2 id="options">Options</h2>
<p>The following options are those I have found or been alerted to by the community. I have used a few of them to much benefit, but felt there was always one or two things that kept me from truly embracing them as a good solution. I hope to showcase their strengths and weaknesses to allow you to make a more informed decision on what may be the best for your team.</p>
<h3 id="writing-specs-in-the-dom">Writing Specs in the DOM</h3>
<p>Example: <a href="https://github.com/cucumber/cucumber-js/blob/master/example/index.html"><a href="https://github.com/cucumber/cucumber-js/blob/master/example/index.html">https://github.com/cucumber/cucumber-js/blob/master/example/index.html</a></a>.</p>
<p>This is an example from the <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> team that demonstrates how to define <strong>Features</strong> and <strong>Step Definitions</strong> in <code>textarea</code> elements. These are read and evaluated at runtime by the bundled browser-based CucumberJS library, with the assertions being printed to the DOM as well.</p>
<p>A reasonable approach, and much of its implementation was an inspiration for my <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> tool (addressed later). My main issue with incorporating this into my development and testing workflow is the break in having my <strong>Features</strong>, <strong>Step Definitions</strong> and test support as entities residing in separate files as we have done in the examples of previous articles in this series. Instead of curating <strong>Features</strong> in a much more organized way involving the file system, I would need to maintain them in the textual values defined for <code>textarea</code>s in a web page. My workflow just seemed interrupted in doing so; I could not directly relate a Ticket in our Issue Tracker with a <strong>Feature</strong> file and its associated <strong>Step</strong> file(s).</p>
<h3 id="zombiejs">ZombieJS</h3>
<p>There are small examples on the landing page for <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> repo that are fairly easy to follow and there is a great example <a href="http://www.antonydenyer.co.uk/">Antony Denyer</a> as well: <a href="https://github.com/antonydenyer/zombiejsplayground"><a href="https://github.com/antonydenyer/zombiejsplayground">https://github.com/antonydenyer/zombiejsplayground</a></a>.</p>
<p>The <a href="http://zombie.labnotes.org/">ZombieJS</a> API is actually quite easy to understand and use and have incorporated using Zombie in a couple of my projects. The main issue I have in using Zombie in all my projects is &quot;trust&quot;. Not trust in Zombie as a good tool, trust in that the assertions are cross-browser; under the covers, it is a mixture of the DOM library <a href="http://jsdom.org/">JSDom</a>, <a href="https://github.com/brianmcd/contextify">Contextify</a> for V8 execution and various other - very excellent, I should say - libraries that are used to &#39;emulate&#39; a browser in a headless manner.</p>
<p>Again, I don&#39;t want that explanation to take away from the excellent tool that <a href="http://zombie.labnotes.org/">ZombieJS</a> is and its usefulness and benefits it has provided me in previous (and future) projects. Infact, while I was <a href="https://twitter.com/_toddanderson_/status/414210165001699328">extolling its virtues over twitter</a>, <a href="https://twitter.com/s9tpepper">Omar Gonzalez</a> reminded me that it is best to run tests in browsers and tipped me to his project <a href="https://github.com/s9tpepper/karma-cucumberjs">karma-cucumberjs</a>.</p>
<p>Omar was right. While it has a nice API and is quick and easy to get working, it is not a real browser. In the end, I may have false positives and if I was to go to production with my application that requires cross-browser support, issues may arise that the tests did not catch under Zombie.</p>
<h3 id="karma-cucumberjs">karma-cucumberjs</h3>
<p>As mentioned in the previous section, respected TDD&#39;er <a href="https://twitter.com/s9tpepper">Omar Gonzalez</a> has a project - <a href="https://github.com/s9tpepper/karma-cucumberjs">karma-cucumberjs</a> - that allows you to define Cucumber specs for the browser and provides an adapter for the <a href="http://karma-runner.github.io/0.10/index.html">Karma</a> testrunner.</p>
<p>Now, I have not personally tried it (apologies, Omar!), nor do I use <a href="http://karma-runner.github.io/0.10/index.html">Karma</a>. Both are filed under <code>Things to Look Into</code>. I will say, what kept me from jumping in and testing the waters was similar to the reason for not using the <a href="https://github.com/cucumber/cucumber-js/blob/master/example/index.html">DOM example</a> provided by the <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> team: I had to write my <strong>Step Definitions</strong> differently than I normally would - specifically, I would have to wrap them in a <code>addStepDefinitions</code> function.</p>
<p>Again, a viable solution from a venerable developer whom I trust, but I have not personally used because I wanted to keep my workflow relatively the same as I would in defining <strong>Features</strong> and <strong>Step Definitions</strong> for specs don&#39;t need to know about or run under a browser environment.</p>
<h3 id="cucumberjs-browser">cucumberjs-browser</h3>
<p>Not finding a solution that afforded me to simply deploy my <strong>Features</strong>, <strong>Steps Definitions</strong> and subsequent support files to be run in the browser, I decided to make one that would allow me to; and so <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> was born.</p>
<p>In basic terms, what <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> does is bundle the <strong>Features</strong>, <strong>Step Definitions</strong> and any support files into standalone modules (using <a href="http://browserify.org/">browserify</a>) and defines them for a page using a <a href="http://lodash.com/docs">lodash</a> template. Included, as well, is the bundled library from <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>. </p>
<p>When the page is loaded in any browser, the specs are run just as they normally would be from the command line. Through the CLI options, you have the ability to define a listener that will handle the passing and failing of steps. <em>Current support for <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol">TAP</a> in console and basic UI. More to come...</em></p>
<p>The <a href="https://github.com/bustardcelly/cucumberjs-browser/blob/master/README.md">README</a> is probably the best place to start as it will be kept more up to date than this post in the future, but here is a quick rundown:</p>
<h4 id="installation">Installation</h4>
<p>You install <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> globally through npm:</p>
<pre><code>$ npm install <span class="hljs-attribute">-g</span> cucumberjs<span class="hljs-attribute">-browser</span>
</code></pre><h4 id="usage">Usage</h4>
<p>To run the tool, you can use the following options:</p>
<pre><code>$ <span class="hljs-tag">cucumberjs-browser</span> <span class="hljs-attr_selector">[-o outdir]</span> <span class="hljs-attr_selector">[-f format]</span> <span class="hljs-attr_selector">[--tmpl template]</span> <span class="hljs-attr_selector">[--features features]</span>
</code></pre><p>There are defaults for each of these options and you most likely will only really need to provide a custom template to be used based on the requirements of your project. The basic one that ships with the tool does nothing but load and run your specs: <a href="https://github.com/bustardcelly/cucumberjs-browser/blob/master/template/cucumber-testrunner.template">cucumber-testrunner.template</a>. This should be a jumping off point in which you add your css and scripts and anything else required to get your tests passing. Again, it uses <a href="http://lodash.com/docs">lodash</a> to generate the page, so bear that in mind.</p>
<h4 id="output">Output</h4>
<p>If we were to run <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> against the current work we have been doing in this series and then open any browser, we would be presented with something like the following:</p>
<div style="width: 100%; overflow-x: scroll; background-color:#fff; text-align: center;">
  <img src="http://custardbelly.com/blog/images/cucumberjs-browser-1.png" alt="cucumberjs in the browser">
</div>

<h2 id="conclusion">Conclusion</h2>
<p>For this post, I had originally started updating the example we have been working through in this series to incoprate User Interaction with the application in a browser with <span style="color: red;">failing</span> tests everywhere... it made me smile :) But, I felt it was extending the length of this post to a point in which it was becoming information overload.</p>
<p>As such, I am in the middle of a follow up post in how to utilize <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> for our current Grocery List Application example in delivering a test-driven browser-based application supported by <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> specs.</p>
<p>At the very least, I hope this post highlighted some possible solutions for testing in the browser and will draw you back to the following post where i go more in depth about working with <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a>. &#39;Til then...</p>
]]></description><link>http://custardbelly.com/blog/blog-posts/2014/02/10/cucumberjs-tests-browser/index.html</link><guid isPermaLink="true">http://custardbelly.com/blog/blog-posts/2014/02/10/cucumberjs-tests-browser/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[BDD in JavaScript III: CucumberJS and Test Automation]]></title><description><![CDATA[<p>In my <a href="http://custardbelly.com/blog/blog-posts/2014/01/22/cucumberjs-world/index.html">previous post</a> I addressed the concepts of the <strong>World</strong> context and <strong>Background</strong> scenario. I am going to pause in actually working with <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> in delivering code in a BDD manner for this article and address another vital part of the development process: <strong>Automation</strong>.</p>
<h3 id="-gt-code">&gt; code</h3>
<p>Supported files related to this and any subsequent posts on this topic will be available at:<br><a href="https://github.com/bustardcelly/cucumberjs-examples"><a href="https://github.com/bustardcelly/cucumberjs-examples">https://github.com/bustardcelly/cucumberjs-examples</a></a></p>
<h2 id="why-automate-">Why Automate?</h2>
<p>The benefit of automation is in time saved. If we can pinpoint tasks that we do repetitively during development and automate them, we can save large amounts of time that could be put back into doing more coding, thinking, learning, laughing, beering - the list goes on.</p>
<p>While going through the basics of <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> in the previous articles, I was demonstrating how I use the tool to TDD from the outside-in and constantly hopping back and forth from my code editor to the terminal to run this simple command over and over:</p>
<pre><code><span class="hljs-variable">$ </span>node node_modules/.bin/cucumber-js
</code></pre><p>Now, I am pretty good at <code>CMD+TAB</code> - not to brag - but I would much prefer to get feedback on my tests instantly as I describe my asserts and modify my code. If we automate the running of <strong>Cucumber</strong> on file change, we can start seeing results quicker and we can take that time removed from manually switching between editor and terminal and running commands and put that time back into thinking how to design our code more cleanly :)</p>
<p>This automation and instant feedback really shows its worth in the <strong>Refactor</strong> phase in which you have previously implemented code to pass the criteria in a <strong>Feature</strong>.</p>
<h2 id="task-automation-and-javascript">Task Automation and JavaScript</h2>
<p>When talking about build tools and task automation for JavaScript projects, there are roughly 3 types of task runners that are brought up:</p>
<ol>
<li><a href="http://gruntjs.com/">Grunt</a></li>
<li><a href="http://gulpjs.com/">Gulp</a></li>
<li><a href="http://substack.net/task_automation_with_npm_run">npm run</a></li>
</ol>
<p>There are additional tools that have been around for some time - particularly, in the past I have used <a href="http://ant.apache.org/">Ant</a> and <a href="http://www.gnu.org/software/make/">Make</a> for my build process - but, generally speaking, these are the prevelant tools of the trade in JavaScript as it stands today. </p>
<p>Some people think that each oppose each other, but I lean toward utilizing one or the others based on its merits and the requirements of a project. I have several on-going projects, both professional and personal, and each project actually incorporates one of each of these. I will discuss my thoughts on the value of each tool within each section in which I set up automation for our <a href="https://github.com/cucumber/cucumber-js">Cucumber</a> tests.</p>
<h2 id="npm-run">Npm run</h2>
<p>I&#39;ll start off with the basics. By basics, I mean that there is no additonal tool required to install and get up and running with our test automation; we have everything already installed that we need: node &amp; npm.</p>
<h3 id="benifits">Benifits</h3>
<p><a href="https://twitter.com/substack">James Halliday</a> had previously written a <a href="http://substack.net/task_automation_with_npm_run">great post</a> addressing the use of <code>npm run</code> in task automation, and I agree in so far as keeping things simple. The benefits of defining tasks in the <code>scripts</code> tag of your <code>package.json</code> file are <strong>a) simplicity</strong> and <strong>b) no additional tooling</strong>. I do have the reservations that the &quot;simplicity&quot; vanishes if you have to eventually maintain dozens of tasks - some that may be similar with different arguments - and continually want to run series and parallels. </p>
<p>When your build process becomes more complex, <a href="https://twitter.com/substack">James Halliday</a> does mention moving it to a bash file, but I would argue to perhaps look at a more robust solution with the tools described previously (and in more detail later in this article).</p>
<h3 id="usage">Usage</h3>
<p>If we were to simply take the process of running our tests as we have in previous articles, we can modify our <code>package.json</code> file by adding the following <code>scripts</code> tag and task:</p>
<p><em>package.json</em></p>
<pre><code>{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"cucumberjs-examples"</span>,
  <span class="hljs-keyword">...</span>
  <span class="hljs-string">"scripts"</span>: {
      <span class="hljs-string">"test"</span>: <span class="hljs-string">"node node_modules/.bin/cucumber-js"</span>
  }
  <span class="hljs-keyword">...</span>
}
</code></pre><p>Plain and simple. To run it, we&#39;d hop over to our terminal:</p>
<pre><code>$ npm run test

<span class="hljs-subst">&gt;</span> cucumberjs<span class="hljs-attribute">-examples</span>@<span class="hljs-number">0.1</span><span class="hljs-number">.0</span> test /Users/toddanderson/Documents/workspace/custardbelly/cucumberjs<span class="hljs-attribute">-example</span>
<span class="hljs-subst">&gt;</span> node node_modules<span class="hljs-subst">/</span><span class="hljs-built_in">.</span>bin/cucumber<span class="hljs-attribute">-js</span>
<span class="hljs-attribute">...</span><span class="hljs-attribute">...</span><span class="hljs-built_in">..</span>

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> passed)
<span class="hljs-number">8</span> steps (<span class="hljs-number">8</span> passed)
</code></pre><p>Same result. We get to type less now, so that&#39;s good. However, we are not really automating the process for running our tests. As mentioned previously, we are looking for the benefit of automating the running of our tests on change to <strong>Step Definitions</strong> and code.</p>
<p>As such, we create a simple node script that will watch our <code>script</code> and <code>feature/step_definitions</code> and run the <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> CLI tool on each change:</p>
<p><strong>cuke-watcher.js</strong></p>
<pre><code>#!<span class="hljs-regexp">/usr/</span>bin/env node
<span class="hljs-keyword">var</span> watch = <span class="hljs-built_in">require</span>(<span class="hljs-string">'node-watch'</span>);
<span class="hljs-keyword">var</span> child_process = <span class="hljs-built_in">require</span>(<span class="hljs-string">'child_process'</span>);
<span class="hljs-keyword">var</span> running = <span class="hljs-literal">false</span>;
<span class="hljs-keyword">var</span> cucumber;

<span class="hljs-keyword">var</span> JS_EXT = <span class="hljs-regexp">/^.*\.js/i</span>;
<span class="hljs-keyword">var</span> options = [<span class="hljs-string">'node_modules/.bin/cucumber-js'</span>, 
               <span class="hljs-string">'features'</span>, 
               <span class="hljs-string">'-r'</span>, <span class="hljs-string">'features/step_definitions'</span>,
               <span class="hljs-string">'-f'</span>, <span class="hljs-string">'pretty'</span>];

watch([<span class="hljs-string">'./features/step_definitions'</span>, <span class="hljs-string">'script'</span>], {recursive:<span class="hljs-literal">true</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(filename)</span> {</span>

  <span class="hljs-keyword">if</span>(!running &amp;&amp; filename.match(JS_EXT)) {

    running = <span class="hljs-literal">true</span>;

    cucumber = child_process.spawn(<span class="hljs-string">'node'</span>, options)
                    .on(<span class="hljs-string">'exit'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
                      running = <span class="hljs-literal">false</span>;
                    });

    cucumber.stdout.on(<span class="hljs-string">'data'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(d)</span> {</span>
      console.log(<span class="hljs-built_in">String</span>(d));
    });

    cucumber.stderr.on(<span class="hljs-string">'data'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(d)</span> {</span>
      console.error(<span class="hljs-built_in">String</span>(d));
    });

  }

});
</code></pre><p>We are using the wonderful <a href="https://npmjs.org/package/node-watch">node-watch</a> module that is a convenient wrapper to <code>fs.watch</code>, and upon change, we spawn the <strong>Cucumber</strong> tool as a child process. Running <strong>Cucumber</strong> as a child process allows it to exit its own process without having to exit the <code>watch</code> process, which would kill all automation.</p>
<p>Modify our <code>package.json</code> to invoke this script:</p>
<p><em>package.json</em></p>
<pre><code>{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"cucumberjs-examples"</span>,
  <span class="hljs-keyword">...</span>
  <span class="hljs-string">"scripts"</span>: {
      <span class="hljs-string">"test"</span>: <span class="hljs-string">"node node_modules/.bin/cucumber-js"</span>,
      <span class="hljs-string">"watch"</span>: <span class="hljs-string">"node cuke-watcher.js"</span>
  }
  <span class="hljs-keyword">...</span>
}
</code></pre><p>And run it in the terminal:</p>
<pre><code><span class="hljs-variable">$ </span>npm run watch
</code></pre><p>And you will see the cursor flash with the <code>watch</code> process running. If you were to modify any of the <strong>Step Definition</strong> or source files of our current <a href="https://github.com/bustardcelly/cucumberjs-examples">Grocery List</a> example project, you would see <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> run and produce the same results as before - the only difference is that it is now waiting for you to modify them again so it can run again.</p>
<p>It will continue to <code>watch</code> and run tests until you exit the process, most commonly done by focusing on the terminal and hitting <code>CTRL+C</code>.</p>
<h2 id="grunt">Grunt</h2>
<p>Up until a few years ago, I  stuck with what I knew best and preferred to maintain builds for my JavaScript projects using <a href="http://www.gnu.org/software/make/">Make</a>. After having the fortunate opportunity to hear <a href="http://benalman.com/">Ben Alman</a> speak and demonstrate <a href="http://gruntjs.com/">Grunt</a> at <a href="http://2013.texasjavascript.com/">TXJS</a> in 2012, I decided to give <strong>Grunt</strong> a real try - and I have, for the most part, not looked back.</p>
<p><a href="http://gruntjs.com/">Grunt</a> is my go-to task automation tool for large projects that involve various complex tasks for developing, testing and deployment. For the most part, if my tasks are not solely based on files, I will incorporate <strong>Grunt</strong> into my project. </p>
<p>Along with a solid history and great documentation, there is also a very active community that creates task plugins for <strong>Grunt</strong>: <a href="http://gruntjs.com/plugins"><a href="http://gruntjs.com/plugins">http://gruntjs.com/plugins</a></a>. You can find virtually anything you need, and if for some odd reason you can&#39;t, you can create one: <a href="http://gruntjs.com/creating-plugins">Creating Grunt Plugins Docs</a>.</p>
<p><em>It is too much for this article to get into a discussion about <strong>Grunt</strong> and its concepts, so please read the <a href="http://gruntjs.com/getting-started">documentation</a> on their site for clarity. In this section I intend to address how to use <strong>Grunt</strong> to automate the tests we have been developing in this series.</em></p>
<h3 id="usage">Usage</h3>
<p>Just as we setup a watcher for our <strong>Step Definitions</strong> and scripts for our <code>npm run</code> example, we will be using 2 <a href="http://gruntjs.com/">Grunt</a> plugin tasks provided by the wonderful development community:</p>
<ul>
<li><a href="https://github.com/gruntjs/grunt-contrib-watch">grunt-contrib-watch</a> - maintained by the contributors for gruntjs</li>
<li><a href="https://github.com/s9tpepper/grunt-cucumber-js">grunt-cucumber</a> - maintained by venerable developer <a href="https://twitter.com/s9tpepper">Omar Gonzalez</a></li>
</ul>
<p>I will assume you have <a href="http://gruntjs.com/getting-started">Grunt installed properly</a> and start with the <code>Gruntfile</code>:</p>
<p><em>Gruntfile.js</em></p>
<pre><code>module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(grunt)</span> {</span>
<span class="hljs-pi">  'use strict'</span>;

  grunt.initConfig({
    pkg: grunt.file.readJSON(<span class="hljs-string">'package.json'</span>),
    watch: {
      cucumber: {
        files: [<span class="hljs-string">'features/**/*.js'</span>, <span class="hljs-string">'script/**/*.js'</span>],
        tasks: [<span class="hljs-string">'cucumberjs'</span>]
      }
    },
    cucumberjs: {
      src: <span class="hljs-string">'features'</span>,
      options: {
        steps: <span class="hljs-string">'features/step_definitions'</span>,
        format: <span class="hljs-string">'pretty'</span>
      }
    }
  });

  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-watch'</span>);
  grunt.loadNpmTasks(<span class="hljs-string">'grunt-cucumber'</span>);

  grunt.registerTask(<span class="hljs-string">'watch-tests'</span>, <span class="hljs-string">'Starts a watch for test automation.'</span>, [<span class="hljs-string">'watch:cucumber'</span>]);

};
</code></pre><p>Within the <code>Gruntfile</code> we have configured <code>cucumberjs</code> task with the same arguments we have been using in previous examples and configured a <code>watch</code> task to listen for changes to JavaScript files in the <em>features</em> and <em>script</em> directories.</p>
<p>Additionally, we have defined a <code>watch-tests</code> task which we can invoke using <strong>Grunt</strong> from the command line:</p>
<pre><code><span class="hljs-variable">$ </span>grunt watch-tests
</code></pre><p>Running that will do, essentially, what we have done using <code>npm run</code> in the previous section: the <code>watch</code> process will be active and execute the <strong>Cucumber</strong> specs upon a change to JavaScript files in the target directories. To stop the task from running, focus on the terminal and <code>CTRL+C</code> to exit the process.</p>
<h2 id="gulp">Gulp</h2>
<p><a href="http://gulpjs.com/">Gulp</a> is a (relatively) new-comer to the JavaScript-based task runner ecosystem. Like <a href="http://gruntjs.com/">Grunt</a>, it is a task-based build tool that has <a href="https://github.com/gulpjs/gulp/blob/master/README.md">good documentation</a> and a lively community <a href="http://gratimax.github.io/search-gulp-plugins/">contributing plugins</a>. All good things.</p>
<p><a href="http://gulpjs.com/">Gulp</a>&#39;s build system uses <a href="http://nodejs.org/api/stream.html">streams</a> which allows you to pipe multiple tasks together. As well, the tasks defined in the <code>gulpfile</code> are the code itself - as opposed to <strong>Grunt</strong> in which you provide a configuration for your tasks that are consumed by <strong>Grunt</strong> and provided to the targetted plugin through a task registry.</p>
<p>There are <a href="http://blog.ponyfoo.com/2014/01/09/gulp-grunt-whatever">plenty</a> of <a href="http://www.100percentjs.com/just-like-grunt-gulp-browserify-now/">other articles</a> <a href="http://jaysoo.ca/2014/01/27/gruntjs-vs-gulpjs/">contrasting the two</a>, so I won&#39;t rehash them here. I will say that I choose <strong>Gulp</strong> over <strong>Grunt</strong> in projects where the build requirements are strictly focused on files - ie, take these files, do something to them (min, concat) and put them in this directory.</p>
<p><strong>As a side note: I highly recommend <a href="https://twitter.com/substack">James Halliday</a>&#39;s excellent <a href="https://github.com/substack/stream-handbook">stream-handbook</a> to get a better understanding of streams in <a href="http://nodejs.org">node</a>.</strong></p>
<h3 id="usage">Usage</h3>
<p>The <a href="http://gratimax.github.io/search-gulp-plugins/">plugin community</a> for <a href="http://gulpjs.com/">Gulp</a> is fairly active, but as I mentioned previously <strong>Gulp</strong>&#39;s system is really based on streams. As such, I don&#39;t intend to see a plugin for running <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> tests specifically, as we have with <a href="https://github.com/s9tpepper/grunt-cucumber-js">grunt-cucumber</a> - nor do intend to make one or continue to look for one: I don&#39;t think such a plugin is well suited to <strong>Gulp</strong>.</p>
<p>That&#39;s said, we can certainly set up a <code>watch</code> task on our <strong>Step Definitions</strong> and scripts just as we have in the previous examples!</p>
<p><strong>gulpfile.js</strong></p>
<pre><code><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>);
<span class="hljs-keyword">var</span> watch = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-watch'</span>);
<span class="hljs-keyword">var</span> child_process = <span class="hljs-built_in">require</span>(<span class="hljs-string">'child_process'</span>);

<span class="hljs-keyword">var</span> cucumber;
<span class="hljs-keyword">var</span> running = <span class="hljs-literal">false</span>;
<span class="hljs-keyword">var</span> options = [<span class="hljs-string">'node_modules/.bin/cucumber-js'</span>,
               <span class="hljs-string">'features'</span>, 
               <span class="hljs-string">'-r'</span>, <span class="hljs-string">'features/step_definitions'</span>,
               <span class="hljs-string">'-f'</span>, <span class="hljs-string">'pretty'</span>];

gulp.task(<span class="hljs-string">'cucumber'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  <span class="hljs-keyword">if</span>(!running) {
    running = <span class="hljs-literal">true</span>;
    cucumber = child_process.spawn(<span class="hljs-string">'node'</span>, options)
                    .on(<span class="hljs-string">'exit'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
                      running = <span class="hljs-literal">false</span>;
                    });
    cucumber.stdout.on(<span class="hljs-string">'data'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(d)</span> {</span>
      console.log(<span class="hljs-built_in">String</span>(d));
    });

    cucumber.stderr.on(<span class="hljs-string">'data'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(d)</span> {</span>
      console.error(<span class="hljs-built_in">String</span>(d));
    });
  }
});

gulp.task(<span class="hljs-string">'watch-tests'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  gulp.src([<span class="hljs-string">'features/**/*.js'</span>, <span class="hljs-string">'script/**/*.js'</span>])
      .pipe(watch(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
        gulp.run(<span class="hljs-string">'cucumber'</span>);
      }));
});
</code></pre><p>Running that is very similar to how we ran our <strong>Grunt</strong> task:</p>
<pre><code><span class="hljs-variable">$ </span>gulp watch-tests
</code></pre><p>As you may notice, this example fairly similar to the <code>npm run</code> example shown previously. The main difference is that we pipe the streams through the <code>gulp-watch</code> plugin which triggers <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> as a child process upon change to targetted files.</p>
<h2 id="conclusion">Conclusion</h2>
<p>So, which one should you use? Whichever! They each have their merits and it should be discussed with your team in alignment with the requirements for the current project.</p>
<p>It was my intent to showcase how to incoporate automated testing with <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> using the three most popular task runner / build tools so we can devote more time to thinking about design instead of hopping from our code editor to the terminal for each change to our <strong>Step Definitions</strong>.</p>
<p>I didn&#39;t introduce any new concepts related to <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>, itself, but felt it necessary to address automation at this stage within the series as I feel it is a vital part to Test-Driven Development and the Agile process and something that should be addressed in the early stages of a project.</p>
<p>That said, I look forward to the next article where we get to write more tests and which I intend to introduce running tests in a browser environment :)</p>
<p>Source for examples related to this post can be found in the <a href="https://github.com/bustardcelly/cucumberjs-examples/tree/0.3.0.post">0.3.0.post tag on my Github account</a>.</p>
]]></description><link>http://custardbelly.com/blog/blog-posts/2014/01/29/cucumberjs-build/index.html</link><guid isPermaLink="true">http://custardbelly.com/blog/blog-posts/2014/01/29/cucumberjs-build/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[BDD in JavaScript II: CucumberJS, the World and Background]]></title><description><![CDATA[<p>In <a href="http://custardbelly.com/blog/blog-posts/2014/01/08/bdd-in-js-cucumberjs/index.html">my previous post</a>, I demonstrated how I use <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> - the JavaScript port of the <a href="http://cukes.info/">Cucumber</a> BDD testing tool - in developing Test-Driven code. I walked through going from a <span style="color:red;">failing</span> feature with two scenarios to a <span style="color:green;">passing</span> cuke, while taking care to only add enough code that would make the assertions pass and refactoring as I went along under the assurance of a test harness.</p>
<p>There are a few topics that I didn&#39;t address in the previous post that I utilize in my testing process that I wanted to touch on in this post as any further articles I may write on the subject of <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> most likely will reference them. These are:</p>
<ul>
<li>the World<del>, chico, and everything in it.</del></li>
<li>Background</li>
</ul>
<h3 id="-gt-code">&gt; code</h3>
<p>Supported files related to this and any subsequent posts on this topic will be available at:<br><a href="https://github.com/bustardcelly/cucumberjs-examples"><a href="https://github.com/bustardcelly/cucumberjs-examples">https://github.com/bustardcelly/cucumberjs-examples</a></a></p>
<h2 id="world">World</h2>
<p>The <strong>World</strong> brings context to your <strong>Scenarios</strong>.</p>
<p>In the examples from <a href="http://custardbelly.com/blog/blog-posts/2014/01/08/bdd-in-js-cucumberjs/index.html">my previous post</a> variables were declared locally to the module export and available for reference within each <strong>Step</strong>. This may be suitable for some cases, but can cause issues or provide false results if you are not aware that those values last across the life cycle of <em>all</em> the <strong>Steps</strong> declared in that module. In other words, they are not reset for each <strong>Scenario</strong>.</p>
<p>To bring context to each <strong>Scenario</strong>, you can use the <strong>World</strong> constructor within which you can define various properties and methods that may be relevant in setting up the environment under test for each <strong>Scenario</strong>. Additonally, you access the defined <strong>World</strong> within each <strong>Step</strong> using the <code>this</code> keyword - just as you are familiar to in referencing context scope within JavaScript.</p>
<h3 id="example">Example</h3>
<p>If I were to take the complete steps module for the <em>Add Item</em> <strong>Feature</strong> from the <a href="https://github.com/bustardcelly/cucumberjs-examples/blob/0.1.0.post/features/step_definitions/add-item.steps.js">previous example</a> and modify it to incorporate a <strong>World</strong> context, it would look something like the following:</p>
<p><em>/features/step_definitions/add-item.steps.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;
<span class="hljs-keyword">var</span> assert = <span class="hljs-built_in">require</span>(<span class="hljs-string">'assert'</span>);

module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  <span class="hljs-keyword">var</span> listItem;

  <span class="hljs-keyword">this</span>.World = <span class="hljs-built_in">require</span>(process.cwd() + <span class="hljs-string">'/features/support/world'</span>).World;

  <span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have an empty grocery list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    <span class="hljs-keyword">this</span>.myList = <span class="hljs-keyword">this</span>.createNewGroceryList();
    callback();
  });

  <span class="hljs-keyword">this</span>.When(<span class="hljs-regexp">/^I add an item to the list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    listItem = <span class="hljs-keyword">this</span>.createGroceryItem();
    <span class="hljs-keyword">this</span>.myList.add(listItem);
    callback();
  });

  <span class="hljs-keyword">this</span>.Then(<span class="hljs-regexp">/^The grocery list contains a single item$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    assert.equal(<span class="hljs-keyword">this</span>.myList.getAll().length, <span class="hljs-number">1</span>, <span class="hljs-string">'Grocery List should grow by one item.'</span>);
    callback();
  });

  <span class="hljs-keyword">this</span>.Then(<span class="hljs-regexp">/^I can access that item from the grocery list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    assert.notEqual(<span class="hljs-keyword">this</span>.myList.getItemIndex(listItem), -<span class="hljs-number">1</span>, <span class="hljs-string">'Added item should be found at non-negative index.'</span>);
    callback();
  });

};
</code></pre><p>You will notice that in place of the <code>myList</code> variable declaration is a definition of the <strong>World</strong> context that will be the context for each <strong>Step</strong> in a <strong>Scenario</strong>. The <strong>World</strong> constructor is run at the start of each <strong>Scenario</strong>. As such, any properties have a life-cycle within the <strong>Steps</strong> of each <strong>Scenario</strong> that may be defined in this <strong>Feature</strong>. Again, this differs from the previous implementation where <code>myList</code> had a life-cycle through <em>all</em> the <strong>Steps</strong> of the module. </p>
<p><em>Note: The life of <code>this.myList</code> is realistically the same as the function local <code>myList</code> in the previous example, since it was being reassigned a new instance of <code>GroceryList</code> for each <strong>Scenario</strong>.</em></p>
<p>Additionally, you may notice that I have offloaded the creation or declaration of items to factory methods on the <strong>World</strong> - it&#39;s just a habit or best practice of mine and allows me to &quot;hide&quot; such implementation details within a single context so I can focus more closely on the assertion rules.</p>
<p>The <strong>World</strong> that is referenced in this <strong>Steps</strong> module is pulled in from the <em>/features/support</em> directory:</p>
<p><em>/features/support/world.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> GroceryList = <span class="hljs-built_in">require</span>(process.cwd() + <span class="hljs-string">'/script/model/grocery-list'</span>);

<span class="hljs-keyword">var</span> World = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">World</span><span class="hljs-params">(callback)</span> {</span>

  <span class="hljs-keyword">this</span>.myList = <span class="hljs-literal">undefined</span>;
  <span class="hljs-keyword">this</span>.createNewGroceryList = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> GroceryList.create();
  };
  <span class="hljs-keyword">this</span>.createGroceryItem = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-string">'apple'</span>;
  };

  callback();

};

module.exports.World = World;
</code></pre><p>This defines the <strong>World</strong> constructor on the <code>module.exports</code> and, when is invoked by <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>, is provided a <code>callback</code> delegate that you invoke when you are done &quot;prepping&quot; your <strong>World</strong> context. There are other support hooks, such as <em>BeforeEach()</em> and <em>AfterEach()</em> that are available, but I won&#39;t discuss them in this article.</p>
<p>If we were to run our tests now:</p>
<pre><code>$ node_modules<span class="hljs-subst">/</span><span class="hljs-built_in">.</span>bin/cucumber<span class="hljs-attribute">-js</span>

<span class="hljs-attribute">...</span><span class="hljs-attribute">...</span>

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> passed)
<span class="hljs-number">6</span> steps (<span class="hljs-number">6</span> passed)
</code></pre><p>We arrive at the same result as before: <span style="color:green;">passing</span>.</p>
<h4 id="-gt-aside">&gt; aside</h4>
<p>This example may seem a little superfluos in its demonstration of the benefits of a <strong>World</strong> context, but - for the sake of continuity - I wanted to show how I would modify the previous example to incorporate the <strong>World</strong>. As well, we will be building off of this structure when we approach incorporating tests within a browser context.</p>
<h2 id="background">Background</h2>
<p>The <strong>Background</strong> is part of the <a href="http://docs.behat.org/guides/1.gherkin.html">Gherkin DSL</a> that allows you to provide an overarching context for all <strong>Scenarios</strong> defined in a <strong>Feature</strong>. It is defined in your feature spec and details <strong>Steps</strong> to be run prior to each <strong>Scenario</strong> defined within the same spec. <em>It should be noted that if you use the Before Hooks the <strong>Background</strong> steps are run after those hook methods.</em></p>
<p>I use <strong>Background</strong> mainly to provide an environmental context for my <strong>Feature</strong>. With the state of JavaScript today - and sometimes wearing the full-stack developer hat - it is not uncommon that I would be writing a <a href="http://nodejs.org">node</a> module for the server-side along with browser-based modules for the client-side within the same project. Additionally, with the various module libraries and build tools available from the community today, I am sometimes developing libraries that provide a module for both the browser and <a href="http://nodejs.org">node</a>! Crazy mixed up world. But I digress...</p>
<p>The point being: <strong>Background</strong> is useful, in my testing workflow, in setting up a <strong>Feature</strong> with the context of running the Tests under <a href="http://nodejs.org">node</a> or in a browser.</p>
<p>We could modify the existing <strong>Feature</strong> created in the <a href="http://custardbelly.com/blog/blog-posts/2014/01/08/bdd-in-js-cucumberjs/index.html">previous post</a> to include a <strong>Background</strong> used in defining the environment:</p>
<p><em>/features/add-item.feature</em></p>
<pre><code>Feature: Shopper can add an <span class="hljs-property">item</span> <span class="hljs-keyword">to</span> their Grocery List
  As a shopper
  I want <span class="hljs-keyword">to</span> add an <span class="hljs-property">item</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">my</span> grocery <span class="hljs-type">list</span>
  So <span class="hljs-keyword">that</span> I can remember <span class="hljs-keyword">to</span> buy <span class="hljs-keyword">that</span> <span class="hljs-property">item</span> <span class="hljs-keyword">at</span> <span class="hljs-keyword">the</span> grocery store

  Background:
    Given I have opened <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> <span class="hljs-type">application</span>

  Scenario: Item added <span class="hljs-keyword">to</span> grocery <span class="hljs-type">list</span>
    Given I have an empty grocery <span class="hljs-type">list</span>
    When I add an <span class="hljs-property">item</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> <span class="hljs-type">list</span>
    Then The grocery <span class="hljs-type">list</span> <span class="hljs-keyword">contains</span> a single <span class="hljs-property">item</span>

  Scenario: Item accessible <span class="hljs-keyword">from</span> grocery <span class="hljs-type">list</span>
    Given I have an empty grocery <span class="hljs-type">list</span>
    When I add an <span class="hljs-property">item</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> <span class="hljs-type">list</span>
    Then I can access <span class="hljs-keyword">that</span> <span class="hljs-property">item</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span>
</code></pre><p>I have set up my <strong>Background</strong> to explicitly state that I have opened up the application we are building. If you have been following along, we actually had never even created a main application file - we were just testing a collection model. So this brings a little more real-life context to the situation at hand; we are in the process of building an application that people will use and interact with.</p>
<p>Within the <strong>Background</strong> you can add additional steps, such as <em>And</em>, <em>But</em>, <em>When</em> and <em>Then</em>, yet I try to stick to only having a <em>Given</em> followed by one or two <em>And</em>&#39;s or <em>But</em>&#39;s.</p>
<p>If we were to run that now:</p>
<pre><code>$ node_modules/.bin/cucumber-js

U-U-

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> <span class="hljs-literal">undefined</span>)
<span class="hljs-number">8</span> steps (<span class="hljs-number">2</span> <span class="hljs-literal">undefined</span>, <span class="hljs-number">6</span> skipped)

You can implement step definitions <span class="hljs-keyword">for</span> <span class="hljs-literal">undefined</span> steps <span class="hljs-keyword">with</span> these snippets:

<span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have opened the grocery list application$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
  <span class="hljs-comment">// express the regexp above with the code you wish you had</span>
  callback.pending();
});
</code></pre><p>We&#39;d see that neither of the <em>Scenarios</em> are entered and we are alerted to an undefined step definition.</p>
<h3 id="background-step-definition">Background Step Definition</h3>
<p>I have a tendency to separate my background step definitions from my scenario step definitions - in both separate files and file naming convention. In other words, I would not add this step to the <em>/features/step_definitions/add-item.steps.js</em>. The main reason being that I reuse the same background step definitions across many features. As such, I place these steps in a separate file that is prefixed with <strong>background-</strong>:</p>
<p><em>/features/step_definitions/background-open-application.steps.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;
<span class="hljs-keyword">var</span> assert = <span class="hljs-built_in">require</span>(<span class="hljs-string">'assert'</span>);

module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  <span class="hljs-keyword">this</span>.World = <span class="hljs-built_in">require</span>(process.cwd() + <span class="hljs-string">'/features/support/world'</span>).World;

  <span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have opened the grocery list application$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    <span class="hljs-comment">// express the regexp above with the code you wish you had</span>
    callback.pending();
  });

};
</code></pre><p>Similar to how we just modified the Add Item <strong>Feature</strong>, we are defining our world and we now have a pending <strong>Step</strong> to assert as passing. Technically I save the assertions for the <em>Then</em> <strong>Steps</strong>, but when I work with <strong>Background</strong>&#39;s I consider them pretty vital to the <strong>Scenarios</strong> environment. Therefore, most of my <strong>Background</strong>&#39;s have assertions, or in the very least, asynchronous requests which invoke the callback on completion. <em>(A better example of this will be in a following post when I address testing under a browser)</em>.</p>
<p>Let&#39;s define how we expect the application to be started in the <strong>World</strong> and what sort of validation we expect to assert that, in fact, we have opened the grocery list application so that we can edit its collection:</p>
<p><em>/features/step_definitions/background-open-application.steps.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;
<span class="hljs-keyword">var</span> assert = <span class="hljs-built_in">require</span>(<span class="hljs-string">'assert'</span>);

module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  <span class="hljs-keyword">this</span>.World = <span class="hljs-built_in">require</span>(process.cwd() + <span class="hljs-string">'/features/support/world'</span>).World;

  <span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have opened the grocery list application$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    <span class="hljs-keyword">this</span>.groceryListApplication = <span class="hljs-keyword">this</span>.openGroceryList();
    assert(<span class="hljs-keyword">this</span>.groceryListApplication, <span class="hljs-string">'Grocery List Application is required to be open for editability.'</span>);
    callback();
  });

};
</code></pre><p>Running that will <span style="color:red;">fail</span> both or our scenarios due to exceptions on the <strong>World</strong>:</p>
<pre><code>$ node_modules/.bin/cucumber-js

F-F-

(::) failed steps (::)

TypeError: Object #&lt;World&gt; <span class="hljs-keyword">has</span> no <span class="hljs-function"><span class="hljs-keyword">method</span> '<span class="hljs-title">openGroceryList</span>'

<span class="hljs-title">Failing</span> <span class="hljs-title">scenarios</span>:</span>
/Users/toddanderson/Documents/workspace/custardbelly/cucumberjs-example/features/<span class="hljs-keyword">add</span>-item.feature:<span class="hljs-number">9</span> # Scenario: Item added <span class="hljs-keyword">to</span> grocery list
/Users/toddanderson/Documents/workspace/custardbelly/cucumberjs-example/features/<span class="hljs-keyword">add</span>-item.feature:<span class="hljs-number">14</span> # Scenario: Item accessible <span class="hljs-keyword">from</span> grocery list

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> failed)
<span class="hljs-number">8</span> steps (<span class="hljs-number">2</span> failed, <span class="hljs-number">6</span> skipped)
</code></pre><p>We&#39;ll modify our <strong>World</strong> to handle such properties and perform operations with regards to how we design the act of &quot;opening&quot; a new grocery list application. </p>
<p><em>Note: As mentioned previously in this and past articles, such details are really meant for a team discussion in architecture of the application. As such, I am taking liberties here in how I would go about providing as little code as possible to make the tests pass while adhering to my current design principles.</em></p>
<p><em>/features/support/world.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> application = <span class="hljs-built_in">require</span>(process.cwd() + <span class="hljs-string">'/script/app'</span>);
<span class="hljs-keyword">var</span> GroceryList = <span class="hljs-built_in">require</span>(process.cwd() + <span class="hljs-string">'/script/model/grocery-list'</span>);

<span class="hljs-keyword">var</span> World = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">World</span><span class="hljs-params">(callback)</span> {</span>

  <span class="hljs-keyword">this</span>.groceryListApplication = <span class="hljs-literal">undefined</span>;
  <span class="hljs-keyword">this</span>.myList = <span class="hljs-literal">undefined</span>;

  <span class="hljs-keyword">this</span>.openGroceryList = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> application.newSession();
  };
  <span class="hljs-keyword">this</span>.createNewGroceryList = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> GroceryList.create();
  };
  <span class="hljs-keyword">this</span>.createGroceryItem = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-string">'apple'</span>;
  };

  callback();

};

module.exports.World = World;
</code></pre><p>The <strong>World</strong> has been modified with the previously expected properties from our <strong>Background</strong> step and defines the creation of a new application through the <code>newSession</code> method on the <code>application</code> module. However, that module does not exist:</p>
<pre><code><span class="hljs-variable">$ </span>node_modules/.bin/cucumber-js

<span class="hljs-class"><span class="hljs-keyword">module</span>.<span class="hljs-title">js</span>:340</span>
    throw err;
          ^
<span class="hljs-constant">Error</span><span class="hljs-symbol">:</span> <span class="hljs-constant">Cannot</span> find <span class="hljs-class"><span class="hljs-keyword">module</span> '/<span class="hljs-title">Users</span>/<span class="hljs-title">toddanderson</span>/<span class="hljs-title">Documents</span>/<span class="hljs-title">workspace</span>/<span class="hljs-title">custardbelly</span>/<span class="hljs-title">cucumberjs</span>-<span class="hljs-title">example</span>/<span class="hljs-title">script</span>/<span class="hljs-title">app</span>'</span>
</code></pre><p>Let&#39;s quickly create the main application module:</p>
<p><em>/script/app.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> application = {
  init: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-comment">// stub.</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;
  }
};

module.exports = {
  newSession: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.create(application).init();
  }
};
</code></pre><p>In this module, we have defined the factory method <code>newSession</code> which generates a new <code>application</code> instance and returns the reference from a call to <code>init()</code>.</p>
<p>If we were to run our tests again:</p>
<pre><code>$ node_modules<span class="hljs-subst">/</span><span class="hljs-built_in">.</span>bin/cucumber<span class="hljs-attribute">-js</span>

<span class="hljs-attribute">...</span><span class="hljs-attribute">...</span><span class="hljs-built_in">..</span>

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> passed)
<span class="hljs-number">8</span> steps (<span class="hljs-number">8</span> passed)
</code></pre><p>We are back to <span style="color:green;">green</span>!</p>
<h3 id="take-a-breather">take a breather</h3>
<p>Alright, we just added some environment context to our tests using the <strong>Background</strong> and <em>Given</em> step(s), and are bringing more solidarity to the actual testing environment in so much as we have started to address the concept that the grocery list is to be interacted with from an application. This concept was known and assumed before, yet in our previous example, we did not address an actual <strong>User Role</strong> (<em>The Shopper</em>) in context - we simply made sure that our gorcery list collection model was able to receive and retain an item.</p>
<p>That&#39;s fine, we were getting started; we had some tasks and we are not going to throw away our work.</p>
<p>However, our previous example and step definitions should be modified to address the <strong>User</strong> interacting with the application, in so much as operations being acted upon in context to an open grocery list application.</p>
<h3 id="get-back-to-work">get back to work</h3>
<p>That last section was all very wordy. Basically the whole <code>myList</code> business that is going on the <strong>World</strong> and references in the Add Item <strong>Feature</strong> steps that we just did previously in this article, I want that to go away. I want to interact with a list instance held on the application.</p>
<h3 id="refactorying">Refactorying</h3>
<p>The first modification is in the Add Item <strong>Feature</strong> steps:</p>
<p><em>/features/step_definitions/add-item.steps.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;
<span class="hljs-keyword">var</span> assert = <span class="hljs-built_in">require</span>(<span class="hljs-string">'assert'</span>);

module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  <span class="hljs-keyword">var</span> listItem;

  <span class="hljs-keyword">this</span>.World = <span class="hljs-built_in">require</span>(process.cwd() + <span class="hljs-string">'/features/support/world'</span>).World;

  <span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have an empty grocery list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    <span class="hljs-keyword">this</span>.groceryListApplication.list.empty();
    callback();
  });

  <span class="hljs-keyword">this</span>.When(<span class="hljs-regexp">/^I add an item to the list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    listItem = <span class="hljs-keyword">this</span>.createGroceryItem();
    <span class="hljs-keyword">this</span>.groceryListApplication.list.add(listItem);
    callback();
  });

  <span class="hljs-keyword">this</span>.Then(<span class="hljs-regexp">/^The grocery list contains a single item$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    assert.equal(<span class="hljs-keyword">this</span>.groceryListApplication.list.getAll().length, <span class="hljs-number">1</span>, <span class="hljs-string">'Grocery List should grow by one item.'</span>);
    callback();
  });

  <span class="hljs-keyword">this</span>.Then(<span class="hljs-regexp">/^I can access that item from the grocery list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    assert.notEqual(<span class="hljs-keyword">this</span>.groceryListApplication.list.getItemIndex(listItem), -<span class="hljs-number">1</span>, <span class="hljs-string">'Added item should be found at non-negative index.'</span>);
    callback();
  });

};
</code></pre><p>We have removed all references to the <code>myList</code> property that we added to <strong>World</strong> and replaced it with references to the <code>groceryListApplication.list</code> property.</p>
<pre><code>$ node_modules/.bin/cucumber-js

.F-.F-

(::) failed steps (::)

TypeError: Cannot call <span class="hljs-function"><span class="hljs-keyword">method</span> '<span class="hljs-title">empty</span>' <span class="hljs-title">of</span> <span class="hljs-title">undefined</span></span>
</code></pre><p>Back to <span style="color:red;">failing</span> at the first <strong>Step</strong> in each <strong>Scenario</strong>; the reason being that the application instance has no <code>list</code> property.</p>
<p><em>/script/app.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> GroceryList = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./model/grocery-list'</span>);

<span class="hljs-keyword">var</span> application = {
  init: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(list)</span> {</span>
    <span class="hljs-keyword">this</span>.list = list;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;
  }
};

module.exports = {
  newSession: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">var</span> newList = GroceryList.create();
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.create(application).init(newList);
  }
};
</code></pre><p>In modifying the <code>app</code> module, we have designed it so that when <code>newSession</code> is invoked, a new instance of <code>GroceryList</code> is passed in.</p>
<p>Run that:</p>
<pre><code>$ node_modules/.bin/cucumber-js

.F-.F-

(::) failed steps (::)

TypeError: Object #&lt;Object&gt; <span class="hljs-keyword">has</span> no <span class="hljs-function"><span class="hljs-keyword">method</span> '<span class="hljs-title">empty</span>'</span>
</code></pre><p>… and we have no <code>empty</code> method on the <code>GroceryList</code>.</p>
<p><em>/script/model/grocery-list.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> groceryList = {
  empty: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">this</span>.list.length = <span class="hljs-number">0</span>;
  },
  add: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>
    <span class="hljs-keyword">this</span>.list.push(item);
  },
  getAll: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.list;
  },
  getItemIndex: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(value)</span> {</span>
    <span class="hljs-keyword">var</span> index = <span class="hljs-keyword">this</span>.list.length;
    <span class="hljs-keyword">while</span>(--index &gt; -<span class="hljs-number">1</span>) {
      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.list[index] === value) {
        <span class="hljs-keyword">return</span> index;
      }
    }
    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;
  }
};

module.exports = {
  create: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.create(groceryList, {
      <span class="hljs-string">'list'</span>: {
        value: [],
        writable: <span class="hljs-literal">false</span>,
        enumerable: <span class="hljs-literal">true</span>  
      }
    });
  }
};
</code></pre><p>We added the <code>empty</code> method to the <code>groceryList</code> object which essentially just clears the underlying <code>Array</code> instance.</p>
<p>Run the tests again:</p>
<pre><code>$ node_modules<span class="hljs-subst">/</span><span class="hljs-built_in">.</span>bin/cucumber<span class="hljs-attribute">-js</span>

<span class="hljs-attribute">...</span><span class="hljs-attribute">...</span><span class="hljs-built_in">..</span>

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> passed)
<span class="hljs-number">8</span> steps (<span class="hljs-number">8</span> passed)
</code></pre><p>And we are back to <span style="color:green;">green</span>! Successful reactor… so far :)</p>
<p>We have carefully moved our collection model that is under test to the application, but we have some lingering and unneccessary code in our <strong>World</strong>. <em>I love removing code.</em></p>
<p>Here is our now cleaned up <strong>World</strong>:</p>
<p><em>/features/support/world.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> application = <span class="hljs-built_in">require</span>(process.cwd() + <span class="hljs-string">'/script/app'</span>);

<span class="hljs-keyword">var</span> World = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">World</span><span class="hljs-params">(callback)</span> {</span>

  <span class="hljs-keyword">this</span>.groceryListApplication = <span class="hljs-literal">undefined</span>;

  <span class="hljs-keyword">this</span>.openGroceryList = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> application.newSession();
  };
  <span class="hljs-keyword">this</span>.createGroceryItem = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-string">'apple'</span>;
  };

  callback();

};

module.exports.World = World;
</code></pre><p>Woohoo!</p>
<h2 id="conclusion">Conclusion</h2>
<p>I set out to address a few concepts associated with CucumberJS that I use regurlarly, but in doing so, I ended up modifying and refactoring the current example :) That wasn&#39;t the original intent when I started this post, but I was having fun.</p>
<ul>
<li>The <strong>World</strong> is useful in defining context for each <strong>Scenario</strong>. I often use it to also hold factory and general operation methods that may be called across many different <strong>Scenarios</strong></li>
<li><strong>Background</strong> is useful in defining environment context across <strong>Scenarios</strong> in separate <strong>Features</strong>. I often use it to assert that the proper environment is available before stepping into the <strong>Scenarios</strong>.</li>
</ul>
<p>I think the work we went through in this post will be very beneficial when I introduce running tests under a browser. Stay tuned…</p>
<p>Source for examples related to this post can be found in the <a href="https://github.com/bustardcelly/cucumberjs-examples/tree/0.2.0post">0.2.0.post tag on my Github account</a>.</p>
]]></description><link>http://custardbelly.com/blog/blog-posts/2014/01/22/cucumberjs-world/index.html</link><guid isPermaLink="true">http://custardbelly.com/blog/blog-posts/2014/01/22/cucumberjs-world/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[BDD in JavaScript: CucumberJS]]></title><description><![CDATA[<p>I have previously written about <strong>TDD</strong> in JavaScript, most notably using the BDD-style library <a href="https://github.com/pivotal/jasmine">Jasmine</a> in a series on <a href="http://custardbelly.com/blog/blog-pages/category/grocery-ls.html">building a Test-Driven Grocery List Application</a>. In that posts series I went through thinking of User Stories for Features and Scenarios as actual development tasks, and - reading back on it - it&#39;s all very green (no pun intended) in my finding a way to deliver test-driven code. Nothing wrong with that and I will most likely look upon this and subsequent posts in the same manner. That said, I still hold true that TDD is the best way to deliver concise, tested and well thought-out code.</p>
<p>Since that time, however, I have incorporated a different tool into my <strong>TDD</strong> workflow for JavaScript-based projects that affords me the integration of Feature specs more closely to my development and truly encompasses my current ideal of <strong>Behaviour Driven Development</strong>: <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>. Essentially, it allows me to truly adhere to <strong>TDD</strong> while developing from the outside in - running automated tests that fail until I have written code that supports a feature.</p>
<h3 id="-gt-assumptions-and-notes">&gt; assumptions and notes</h3>
<p>For the examples in this post, it is assumed that you are familiar with <a href="http://nodejs.org">NodeJS</a>, <a href="https://npmjs.org/">npm</a>, developing node modules and common unit testing practices as these topics too large to discuss in this post.</p>
<p>Supported files related to this and any subsequent posts on this topic will be available at:<br><a href="https://github.com/bustardcelly/cucumberjs-examples"><a href="https://github.com/bustardcelly/cucumberjs-examples">https://github.com/bustardcelly/cucumberjs-examples</a></a></p>
<h2 id="cucumberjs">CucumberJS</h2>
<p><a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> is a JavaScript port of the popular BDD tool <a href="http://cukes.info/">Cucumber</a> (which itself was a rewrite of RSpec). It allows you to define Feature Specs in a Domain-Specific-Language (DSL) - called <a href="http://docs.behat.org/guides/1.gherkin.html">Gherkin</a> - and run your specs using a command line tool which will report the passing and/or failing of scenarios and the steps they are comprised of.</p>
<p>It is important to note that <strong>Cucumber</strong> itself does not provide a default assertion library. It is a testing framework providing a command line tool that consumes defined Features and validates Scenarios by running Steps that are written in JavaScript. It is the developers choice to include the desired assertion library used in order to make those steps <span style="color:green;">pass</span> or <span style="color:red;">fail</span>. It is my intent to clarify the process by example through a single Feature with multiple Scenarios in this post.</p>
<h3 id="installation">Installation</h3>
<p>You can install <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> in your project using <a href="https://npmjs.org/">npm</a>:</p>
<pre><code><span class="hljs-comment">$</span> <span class="hljs-comment">npm</span> <span class="hljs-comment">install</span> <span class="hljs-comment">cucumber</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">save</span><span class="hljs-literal">-</span><span class="hljs-comment">dev</span>
</code></pre><h2 id="gherkin">Gherkin</h2>
<p>If you had followed along in the previous <a href="http://custardbelly.com/blog/blog-pages/category/grocery-ls.html">TDD Series</a>, you will find the specs defined in that series similar to <a href="http://docs.behat.org/guides/1.gherkin.html">Gherkin</a>. In fact, I will be re-hashing a feature spec from that series to demonstrate working through your first cuke (aka, passing feature spec).</p>
<p>If we were to remake the <a href="(http://custardbelly.com/blog/blog-pages/category/grocery-ls.html">Grocery List</a> application under TDD/BDD using <strong>Cucumber</strong>, we would first start with a feature using the <strong>Gherkin</strong> syntax:</p>
<p><em>/features/add-item.feature</em></p>
<pre><code>Feature: Shopper can <span class="hljs-built_in">add</span> <span class="hljs-operator">an</span> <span class="hljs-keyword">item</span> <span class="hljs-built_in">to</span> their Grocery List
  As <span class="hljs-operator">a</span> grocery shopper
  I want <span class="hljs-built_in">to</span> <span class="hljs-built_in">add</span> <span class="hljs-operator">an</span> <span class="hljs-keyword">item</span> <span class="hljs-built_in">to</span> my grocery list
  So that I can remember <span class="hljs-built_in">to</span> buy that <span class="hljs-keyword">item</span> <span class="hljs-keyword">at</span> <span class="hljs-operator">the</span> grocery store

  Scenario: Item added <span class="hljs-built_in">to</span> grocery list
    Given I have <span class="hljs-operator">an</span> <span class="hljs-constant">empty</span> grocery list
    When I <span class="hljs-built_in">add</span> <span class="hljs-operator">an</span> <span class="hljs-keyword">item</span> <span class="hljs-built_in">to</span> <span class="hljs-operator">the</span> list
    Then The grocery list <span class="hljs-operator">contains</span> <span class="hljs-operator">a</span> single <span class="hljs-keyword">item</span>

  Scenario: Item accessible <span class="hljs-built_in">from</span> grocery list
    Given I have <span class="hljs-operator">an</span> <span class="hljs-constant">empty</span> grocery list
    When I <span class="hljs-built_in">add</span> <span class="hljs-operator">an</span> <span class="hljs-keyword">item</span> <span class="hljs-built_in">to</span> <span class="hljs-operator">the</span> list
    Then I can access that <span class="hljs-keyword">item</span> <span class="hljs-built_in">from</span> <span class="hljs-operator">the</span> grocery list
</code></pre><p>The <strong>Feature</strong> defines a business value, while the <strong>Scenarios</strong> define the steps that provides that value. Most often, in the software development world, it is from these <strong>Scenarios</strong> that development tasks are taken on and QA tests are defined.</p>
<p>I stopped at two Scenarios, but we could very easily add more scenarios to this feature; immediately what comes to mind are item insertion rules and validation of properties that allow for an item to be added or rejected. In hindsight, it could make more sense in creating seperate feature specs for such details. We could spend a whole post on such topics, though... let&#39;s get back to the feature already defined.</p>
<p>Within each <strong>Scenario</strong> is a list of sequential <strong>Steps</strong>: <em>Given</em>, <em>When</em> and <em>Then</em>. It is these steps that <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> will execute after having consume this feature spec. After each of those, you can optionally have <em>And</em> and <em>But</em>, however - though necessary and unavoidable at times - I try to stay away from such additional step clauses.</p>
<h3 id="running-it">Running it</h3>
<p>Having saved that down to a file in a <strong>/features</strong> direcory, we can then run it under <strong>Cucumber</strong>:</p>
<pre><code><span class="hljs-variable">$ </span>node_modules/.bin/cucumber-js
</code></pre><p>By default, <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> will consume all feature specs found in the relative <strong>/features</strong> directory.</p>
<p>The current console output will look something like the following which essentially means that all the steps have not been located or defined:</p>
<pre><code>UUUUUU

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> <span class="hljs-literal">undefined</span>)
<span class="hljs-number">6</span> steps (<span class="hljs-number">6</span> <span class="hljs-literal">undefined</span>)

You can implement step definitions <span class="hljs-keyword">for</span> <span class="hljs-literal">undefined</span> steps <span class="hljs-keyword">with</span> these snippets:

<span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have an empty grocery list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
  <span class="hljs-comment">// express the regexp above with the code you wish you had</span>
  callback.pending();
});

<span class="hljs-keyword">this</span>.When(<span class="hljs-regexp">/^I add an item to the list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
  <span class="hljs-comment">// express the regexp above with the code you wish you had</span>
  callback.pending();
});

<span class="hljs-keyword">this</span>.Then(<span class="hljs-regexp">/^The grocery list contains a single item$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
  <span class="hljs-comment">// express the regexp above with the code you wish you had</span>
  callback.pending();
});

<span class="hljs-keyword">this</span>.Then(<span class="hljs-regexp">/^I can access that item from the grocery list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
  <span class="hljs-comment">// express the regexp above with the code you wish you had</span>
  callback.pending();
});
</code></pre><p>So we have 6 undefined <strong>Steps</strong> that make up 2 <strong>Scenarios</strong> and the <strong>CucumberJS</strong> ci tool even provides examples of defining them!</p>
<p>An important part of that snippet to understand is that there are only 4 steps to implement. In our <strong>Feature</strong> we have 2 <strong>Scenerios</strong> each with 3 <strong>Steps</strong>. There are a total of 6 steps, but we only need to define 4. The reason being that each <strong>Scenario</strong> shares the same <em>Given</em> and <em>When</em> step; these only need to be defined once and will be run separately for each <strong>Scenario</strong>. Essentially, if you define similar <strong>Steps</strong> using the same context, it will reuse the &quot;setup&quot; for a single <strong>Step</strong> within each <strong>Scenario</strong>.</p>
<p><em>I use &quot;setup&quot; in quotes because I mean it more in a role of defining context for <strong>When</strong> and <strong>Then</strong> steps.</em></p>
<p><em>I don&#39;t want to get it confused with the setup/teardown methods of other unit testing practices - which are known as Before/After support tasks in CucumberJS - and carry more of a context of setting up an environment in which tests are then executed (such as filling a DB of users) and then tearing down that set up.</em></p>
<h2 id="step-definitions">Step Definitions</h2>
<p>In the previous section, we saw that running <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> against our Add Item Feature alerted us that we have undefined (and, though not printed in <span style="color:red;">red</span>, failing) scenarios to support the feature. By default <strong>CucumberJS</strong> reads in all features from the <strong>/features</strong> directory relative to where the command was run, but it could not locate the supported step files in which these methods are defined.</p>
<p>As mentioned previously, <strong>CucumberJS</strong> does not provide an assertion library. The only assumption at this point - since the <strong>CucumberJS</strong> tool is run under <a href="http://nodejs.org/">NodeJS</a> - is that the supported steps will be loaded as node modules with an exported function to be executed. As we start implementing the steps, we will need to decide on the assertion library to use in validating our logic. We&#39;ll put that decision on the shelf at the moment and get the barebones setup to fail :)</p>
<p>To start, let&#39;s take those step definitions provided by the <strong>CucumberJS</strong> ci tool and drop them into a node module:</p>
<p><em>/features/step_definitions/add-item.steps.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  <span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have an empty grocery list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    callback.pending();
  });

  <span class="hljs-keyword">this</span>.When(<span class="hljs-regexp">/^I add an item to the list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    callback.pending();
  });

  <span class="hljs-keyword">this</span>.Then(<span class="hljs-regexp">/^The grocery list contains a single item$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    callback.pending();
  });

  <span class="hljs-keyword">this</span>.Then(<span class="hljs-regexp">/^I can access that item from the grocery list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    callback.pending();
  });

};
</code></pre><p>By default, <strong>CucumberJS</strong> will look for steps to be loaded within a folder titled <code>step_definitions</code> under the <strong>/features</strong> directory relative to where you issue the command. You can optionally use the <code>-r</code> option to have <strong>CucumberJS</strong> load steps from another location. Running the default is the same as setting the following step definition directory option:</p>
<pre><code><span class="hljs-built_in">.</span>/node_modules<span class="hljs-subst">/</span><span class="hljs-built_in">.</span>bin/cucumber<span class="hljs-attribute">-js</span> <span class="hljs-attribute">-r</span> features/step_definitions
</code></pre><p>The console output will now look like the following:</p>
<pre><code><span class="hljs-comment">P</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">P</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>

<span class="hljs-comment">2</span> <span class="hljs-comment">scenarios</span> <span class="hljs-comment">(2</span> <span class="hljs-comment">pending)</span>
<span class="hljs-comment">6</span> <span class="hljs-comment">steps</span> <span class="hljs-comment">(2</span> <span class="hljs-comment">pending</span><span class="hljs-string">,</span> <span class="hljs-comment">4</span> <span class="hljs-comment">skipped)</span>
</code></pre><p>Not too suprising seeing as we notify the callback of a <code>pending</code> state. <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> enters the first step (<em>Given</em>) and is immediately returned with a pending notification. As such, it doesn&#39;t bother with entering any subsequent steps and marks them as skipped.</p>
<p><em>Note: It is too much to get into a discussion about <a href="http://addyosmani.com/writing-modular-js/">client-side modules and AMD vs CommonJS</a>. For the purposes of this example I will be using CommonJS, as I my current interests lie in utilizing <a href="https://github.com/substack/node-browserify">Browserify</a> for client-side development. For a long time, I was a proponent of <a href="http://requirejs.org/">RequireJS</a> and AMD. Again, a whole other discussion :)</em></p>
<h3 id="given">Given</h3>
<p><hr/>
To get closer to <span style="color:green;">green</span>, we&#39;ll tackle the <strong>Given</strong> step first:</p>
<p><em>/features/step_definitions/add-item.step.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> GroceryList = <span class="hljs-built_in">require</span>(process.cwd() + <span class="hljs-string">'/script/model/grocery-list'</span>);

module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  <span class="hljs-keyword">var</span> myList;

  <span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have an empty grocery list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    myList = GroceryList.create();
    callback();
  });
  ...

};
</code></pre><p>If we were to run that again, we&#39;d get an exception right away:</p>
<pre><code><span class="hljs-variable">$ </span>./node_modules/.bin/cucumber-js

<span class="hljs-class"><span class="hljs-keyword">module</span>.<span class="hljs-title">js</span>:340</span>
    throw err;
          ^
<span class="hljs-constant">Error</span><span class="hljs-symbol">:</span> <span class="hljs-constant">Cannot</span> find <span class="hljs-class"><span class="hljs-keyword">module</span> './<span class="hljs-title">script</span>/<span class="hljs-title">model</span>/<span class="hljs-title">grocery</span>-<span class="hljs-title">list</span>'</span>
    at <span class="hljs-constant">Function</span>.<span class="hljs-constant">Module</span>._resolveFilename (<span class="hljs-class"><span class="hljs-keyword">module</span>.<span class="hljs-title">js</span>:338:15)</span>
    at <span class="hljs-constant">Function</span>.<span class="hljs-constant">Module</span>._load (<span class="hljs-class"><span class="hljs-keyword">module</span>.<span class="hljs-title">js</span>:280:25)</span>
    at <span class="hljs-constant">Module</span>.<span class="hljs-keyword">require</span> (<span class="hljs-class"><span class="hljs-keyword">module</span>.<span class="hljs-title">js</span>:364:17)</span>
    at <span class="hljs-keyword">require</span> (<span class="hljs-class"><span class="hljs-keyword">module</span>.<span class="hljs-title">js</span>:380:17)</span>
    at <span class="hljs-constant">Object</span>.&lt;anonymous&gt; (<span class="hljs-regexp">/Users/toddanderson</span><span class="hljs-regexp">/Documents/workspace</span><span class="hljs-regexp">/custardbelly/cucumberjs</span>-example/features/step_definitions/add-item.steps.<span class="hljs-symbol">js:</span><span class="hljs-number">3</span><span class="hljs-symbol">:</span><span class="hljs-number">19</span>)
</code></pre><p>Which is understandable, we haven&#39;t any other code but this step definition module and are trying to require a module that doesn&#39;t exist. In sticking with TDD, this is a good thing - we know why it&#39;s failing and we expect it; I would be pulling my hair out if it <em>didn&#39;t</em> throw an exception!</p>
<p>In order to get this to pass, we&#39;ll create a node module in the specified directory and which exports an object with a <code>create</code> method:</p>
<p><em>/script/model/grocery-list.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

module.exports = {
  create: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>);
  }
};
</code></pre><p>We have provided the minimal requirement to get our <em>Given</em> step to pass. We&#39;ll worry about the details as we approach the latter steps.</p>
<p>Run that again, and <strong>CucumberJS</strong> enters in to the <em>When</em> step of each <strong>Scenario</strong> and aborts due to pending return.</p>
<pre><code>$ ./node_modules/<span class="hljs-preprocessor">.bin</span>/cucumber-js

<span class="hljs-preprocessor">.P</span>-<span class="hljs-preprocessor">.P</span>-

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> pending)
<span class="hljs-number">6</span> steps (<span class="hljs-number">2</span> pending, <span class="hljs-number">2</span> skipped, <span class="hljs-number">2</span> passed)
</code></pre><h3 id="when">When</h3>
<p><hr/>
In the previous section, to make the <em>Given</em> step pass on each <strong>Scenario</strong> we implemented the beginnings of a Grocery List model generated from a factory method, <code>create</code>, from the <code>grocery-list</code> module. I don&#39;t want to get into a debate of object creation, the <strong>new</strong> operator, classes and prototypes - at least not in this post - and will assume that you are familiar and comfortable (at least in reading code) with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create</a> defined for ECMAScript 5.</p>
<p>In reviewing the <em>When</em> step for the <strong>Scenarios</strong>:</p>
<pre><code>When I <span class="hljs-built_in">add</span> <span class="hljs-operator">an</span> <span class="hljs-keyword">item</span> <span class="hljs-built_in">to</span> <span class="hljs-operator">the</span> list
</code></pre><p>we need to provide a way in which to add an item to the Grocery List instance created in the <em>Given</em> - and do so in as little code to make the step pass...</p>
<p>First, we&#39;ll define our expectation of the make up and <code>add</code> signature of the Grocery List in the step definitions:</p>
<p><em>/features/step_definitions/add-item.step.js</em></p>
<pre><code><span class="hljs-keyword">...</span>
module.exports = <span class="hljs-keyword">function</span>() {

  var myList,
      listItem = <span class="hljs-string">'apple'</span>;

  this.Given(/^I have an empty grocery list$/, <span class="hljs-keyword">function</span>(callback) {
    myList = GroceryList.create();
    callback();
  });

  this.When(/^I add an item to the list$/, <span class="hljs-keyword">function</span>(callback) {
    myList.add(listItem);
    callback();
  });
  <span class="hljs-keyword">...</span>

};
</code></pre><p>If we run that again:</p>
<pre><code>$ ./node_modules/.bin/cucumber-js

.F-.F-

(::) failed steps (::)

TypeError: Object object <span class="hljs-keyword">has</span> no <span class="hljs-function"><span class="hljs-keyword">method</span> '<span class="hljs-title">add</span>'</span>
</code></pre><p>Oooo-weee! Now we&#39;re talking. Big, bright <span style="color:red;">red F&#39;s</span>. :)</p>
<p>To make that get back to passing, we&#39;ll modify <code>grocery-list</code> with as little code as possible:</p>
<p><em>/script/model/grocery-list.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> groceryList = {
  add: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>
    <span class="hljs-comment">//</span>
  }
};

module.exports = {
  create: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.create(groceryList);
  }
};
</code></pre><p>Run again, and <strong>CucumberJS</strong> has progressed to the <em>Then</em> steps which are reporting a <code>pending</code> state.</p>
<pre><code>$ ./node_modules/<span class="hljs-preprocessor">.bin</span>/cucumber-js

.<span class="hljs-preprocessor">.P</span>.<span class="hljs-preprocessor">.P</span>

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> pending)
<span class="hljs-number">6</span> steps (<span class="hljs-number">2</span> pending, <span class="hljs-number">4</span> passed)
</code></pre><h3 id="then">Then</h3>
<p><hr/>
We progressed through our step implementations and have reached the step(s) at which we assert operations and properties that prove that our scenario provides its intended value. As mentioned previously, <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> does not provide an assertion library. My preference in assertion libraries is a combination of <a href="https://github.com/chaijs/chai">Chai</a>, <a href="http://github.com/cjohansen/Sinon.JS">Sinon</a> and <a href="http://github.com/domenic/sinon-chai">Sinon-Chai</a>, but for the examples in this post, I am just going to use the <code>assert</code> module that comes with <a href="http://nodejs.org">NodeJS</a>. I encourage you to check out other assertion libraries and leave a note if you have a favorite; perhaps one of these posts will address how I use <strong>Chai</strong> and <strong>Sinon</strong>.</p>
<p><em>Note: This section will be a little example heavy as we quickly switch from modifying our code and run the spec runner frequently.</em></p>
<h3 id="first-scenario">First Scenario</h3>
<p>In reviewing the first <strong>Scenario</strong>&#39;s <em>Then</em> step:</p>
<pre><code>Then The grocery list <span class="hljs-operator">contains</span> <span class="hljs-operator">a</span> single <span class="hljs-keyword">item</span>
</code></pre><p>we will need to prove that the Grocery List instance grows by a factor of 1 for each new item added.</p>
<p>Update the step to define how we expect that specification to be validated:</p>
<p><em>/feature/step_definitions/add-item.step.js</em></p>
<pre><code><span class="hljs-keyword">...</span>
var assert = <span class="hljs-keyword">require</span>(<span class="hljs-string">'assert'</span>);
<span class="hljs-keyword">...</span>
module.exports = <span class="hljs-keyword">function</span>() {
<span class="hljs-keyword">...</span>

  this.Then(/^The grocery list contains a single item$/, <span class="hljs-keyword">function</span>(callback) {
    assert.equal(myList.getAll().length, <span class="hljs-number">1</span>, <span class="hljs-string">'Grocery List should grow by one item.'</span>);
    callback();
  });

<span class="hljs-keyword">...</span>
};
<span class="hljs-keyword">...</span>
</code></pre><p>We&#39;ve pulled in the <code>assert</code> module and attempt to validate that the length of the Grocery List has grown by a value of 1 after having run the previous step - <em>When</em> - in adding the item.</p>
<p>Run that and we&#39;ll get an exception:</p>
<pre><code>$ ./node_modules/.bin/cucumber-js

..F..P

(::) failed steps (::)

TypeError: Object #&lt;Object&gt; <span class="hljs-keyword">has</span> no <span class="hljs-function"><span class="hljs-keyword">method</span> '<span class="hljs-title">getAll</span>'</span>
</code></pre><p>Let&#39;s add that method to our Grocery List model:</p>
<p><em>/script/model/grocery-list.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> groceryList = {
  add: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>
    <span class="hljs-comment">//</span>
  },
  getAll: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-comment">//</span>
  }
};

module.exports = {
  create: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.create(groceryList);
  }
};
</code></pre><p>And back to running our specs:</p>
<pre><code>$ .<span class="hljs-regexp">/node_modules/</span>.bin/cucumber-js

..F..P

(::) failed steps (::)

<span class="hljs-attribute">TypeError</span>: Cannot read property <span class="hljs-string">'length'</span> <span class="hljs-keyword">of</span> <span class="hljs-literal">undefined</span>
</code></pre><p>Seeing as the code is not returning anything from <code>getAll()</code>, we can&#39;t access a <code>length</code> property for our assertion test.</p>
<p>If we modify the code to return an Array:</p>
<p><em>/feature/step_definitions/add-item.step.js</em></p>
<pre><code><span class="hljs-keyword">...</span>
getAll: <span class="hljs-keyword">function</span>() {
  <span class="hljs-keyword">return</span> [];
}
<span class="hljs-keyword">...</span>
</code></pre><p>And run the specs again, we&#39;ll get the assertion error message we provided:</p>
<pre><code>$ ./node_modules/<span class="hljs-preprocessor">.bin</span>/cucumber-js

.<span class="hljs-preprocessor">.F</span>.<span class="hljs-preprocessor">.P</span>

(::) failed steps (::)

<span class="hljs-label">AssertionError:</span> Grocery List should grow by one item.
</code></pre><p>Now, we have a proper <span style="color:red;">Fail</span> being reported to us from an assertion that causes the step to not pass. Hooray!</p>
<h3 id="-take-a-breather-">-- take a breather --</h3>
<p>Let&#39;s pause here for a second before adding more code to get this step to <span style="color:green;">pass</span>. The issue at hand is not actually adding an item to the array being returned, it is more about ensuring that an item is added through the <code>add</code> method and the result from <code>getAll</code> being a list extended with that item.</p>
<p>Implementation details that are involved in making this test pass is where your team uses their architecture experience, but care is required that only the most essential code is added and not to go overboard in thinking about the internals of the Grocery List collection model. It&#39;s a slippery tight-rope that could easily fall down a rabbit hole - just like that poorly-worded metaphor :)</p>
<h3 id="-get-back-to-work-">-- get back to work! --</h3>
<p>For the purposes of this examples, we&#39;ll use the <code>propertiesObject</code> argument of <code>Object.create</code> to define a <code>list</code> getter that will serve as a mutable array for our grocery list items:</p>
<p><em>/script/model/grocery-list.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> groceryList = {
  add: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>
    <span class="hljs-keyword">this</span>.list.push(item);
  },
  getAll: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.list;
  }
};

module.exports = {
  create: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.create(groceryList, {
      <span class="hljs-string">'list'</span>: {
        value: [],
        writable: <span class="hljs-literal">false</span>,
        enumerable: <span class="hljs-literal">true</span>  
      }
    });
  }
};
</code></pre><p>If we run that, we&#39;ll find that the first <strong>Scenario</strong> is now passing!</p>
<pre><code>$ ./node_modules/<span class="hljs-preprocessor">.bin</span>/cucumber-js

....<span class="hljs-preprocessor">.P</span>

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">1</span> pending, <span class="hljs-number">1</span> passed)
<span class="hljs-number">6</span> steps (<span class="hljs-number">1</span> pending, <span class="hljs-number">5</span> passed)
</code></pre><h3 id="second-scenario">Second Scenario</h3>
<p>In reviewing the final step of our 2nd <strong>Scenario</strong>, the pending implementation is accessing the added item:</p>
<pre><code>Then I can access <span class="hljs-keyword">that</span> <span class="hljs-property">item</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span>
</code></pre><p>To make this step pass we need to verify that we can access the item appended to the Grocery List by invoking <code>add()</code> with an item. </p>
<p>As with the implementation of accessing the length of the Grocery List, there are several ways in which we could make this test pass in the code. Again, I feel this is where software development experience and taste comes into play with regards to architecture, but I also do prefer <em>trying</em> to produce the least amount of code possible; and I will be the first to admit that sometimes I go a little absent-minded and create more code than is necessary... hence, <em>trying</em> :)</p>
<p>That said, we also have to take into account language and environment specifications in how we address making the assertion pass - and the browser, with its history, has many to consider. That is not a slight, it is just a forethought in setting expectations for requirements.</p>
<p>Specifically: suppose we were to say that the step can be verified using the <code>Array.indexOf()</code> method on the collection returned from &#39;getAll()&#39; on the Grocery List object? Without a polyfill, then we are limiting ourselves to passing assertions on <a href="http://kangax.github.io/es5-compat-table/#Array.prototype.indexOf">IE 9 and older</a>. Such considerations are just the tip of the iceberg when deciding about what to introduce into your codebase in order to have your tests pass, and really should be left up to a team discussion on what is considered necessary to get the product to production.</p>
<p>I could go on and on, but let&#39;s just assume we want to cover all bases when it comes to browsers (IE 6 and up, shudder). In my opinion, to make this second <strong>Scenario</strong> turn green, we will add a <code>getItemIndex()</code> method with the following signature:</p>
<pre><code>+ getItemIndex(itemValue):<span class="hljs-keyword">int</span>
</code></pre><p>We&#39;ll first modify the step to fail:</p>
<p><em>/feature/step_definitions/add-item.step.js</em></p>
<pre><code>this.Then(/^I can access <span class="hljs-keyword">that</span> <span class="hljs-property">item</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span>$/, function(callback) {
  assert.notEqual(myList.getItemIndex(listItem), -<span class="hljs-number">1</span>, 'Added <span class="hljs-property">item</span> should be found <span class="hljs-keyword">at</span> non-negative index.');
  callback();
});
</code></pre><p>The acceptance in order for this test to pass is that the index at which the added item resides in the collection is non-negative. For this scenariom we are not trying to validate a specification as to <em>where</em> new item is added in a list (eg, prepended or appended), but simply that it is accessible.</p>
<p>Running that will produce an exception:</p>
<pre><code>$ ./node_modules/.bin/cucumber-js

.....F

(::) failed steps (::)

TypeError: Object #&lt;Object&gt; <span class="hljs-keyword">has</span> no <span class="hljs-function"><span class="hljs-keyword">method</span> '<span class="hljs-title">getItemIndex</span>'</span>
</code></pre><p>Let&#39;s modify our <strong>Grocery List</strong> object to support the <code>getItemIndex</code> method:</p>
<p><em>/script/model/grocery-list.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> groceryList = {
  add: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>
    <span class="hljs-keyword">this</span>.list.push(item);
  },
  getAll: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.list;
  },
  getItemIndex: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(value)</span> {</span>
    <span class="hljs-keyword">var</span> index = <span class="hljs-keyword">this</span>.list.length;
    <span class="hljs-keyword">while</span>(--index &gt; -<span class="hljs-number">1</span>) {
      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.list[index] === value) {
        <span class="hljs-keyword">return</span> index;
      }
    }
    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;
  }
};

module.exports = {
  create: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.create(groceryList, {
      <span class="hljs-string">'list'</span>: {
        value: [],
        writable: <span class="hljs-literal">false</span>,
        enumerable: <span class="hljs-literal">true</span>  
      }
    });
  }
};
</code></pre><p>In our implementation of <code>getItemIndex</code>, the list is traversed and, if item is found, the index is returned. Otherwise, a value of -1 is returned. Essentially, how the <code>Array.indexOf</code> method works of ECMAScript 5.</p>
<p><em>Note: I know it seems silly to use Object.create from ECMAScript 5, but not Array.indexOf. The reason - mostly - being that I normally always include a polyfill for Object.create and not for Array.indexOf. I suppose habit.</em></p>
<p>Now if we run the specs again under <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>:</p>
<pre><code>$ <span class="hljs-built_in">.</span>/node_modules<span class="hljs-subst">/</span><span class="hljs-built_in">.</span>bin/cucumber<span class="hljs-attribute">-js</span>

<span class="hljs-attribute">...</span><span class="hljs-attribute">...</span>

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> passed)
<span class="hljs-number">6</span> steps (<span class="hljs-number">6</span> passed)
</code></pre><p>Our cukes are <span style="color:green;">GREEN</span>! (This is the point you wipe your brow and slow clap).</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this post, I introduce how I use the BDD tool <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> in order to adhere to Test Driven Development in JavaScript. I went through using an example of a single <strong>Feature</strong> with two <strong>Scenarios</strong> and turning <span style="color:red;">failing</span> <strong>Steps</strong> to <span style="color:green;">green</span> cukes. If you are unfamiliar with the process with making tests fail first only to produce code to make the test pass, I hope you followed along; I may be wordy and the process could appear to take a lot of time, but development under such practices does start to move smoothly once you get in the groove. Additionally, I think there is a huge reward in having your code under a test harness when it comes to refactoring and bug fixing - both in developer health and business.</p>
<h2 id="the-future">The Future</h2>
<p>I was going to cover the following topics in this post but have decided to exclude with the hopes of re-addressing in a later post:</p>
<ul>
<li>The <a href="https://github.com/cucumber/cucumber-tck/blob/master/world.feature">World</a> support utility</li>
<li>Build integration (<a href="http://gruntjs.com/">Grunt</a> and <a href="http://gulpjs.com/">Gulp</a>) and automation</li>
<li>Report generation for Continuous Integration</li>
</ul>
<p>Additionally, in a following post I want to address how I use <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> to run tests that rely on browser integration - ie, <strong>window</strong> and <strong>document</strong> access.</p>
<p><em>In the past I have used <a href="http://zombie.labnotes.org/">ZombieJS</a> to much success, but <a href="https://twitter.com/s9tpepper">Omar Gonzalez</a> has tipped me to him <a href="https://github.com/s9tpepper/karma-cucumberjs">Karma solution</a> that I am excited to test-drive.</em></p>
]]></description><link>http://custardbelly.com/blog/blog-posts/2014/01/08/bdd-in-js-cucumberjs/index.html</link><guid isPermaLink="true">http://custardbelly.com/blog/blog-posts/2014/01/08/bdd-in-js-cucumberjs/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[A slight obsession over page speed]]></title><description><![CDATA[<p>Lately, several projects (both personal and work-related) have ignited an increasing obsession over page load speed and performance. I wanted to highlight a few tools and resources I find useful in analyzing performance and delivering web pages in production with optimal load time.</p>
<h2 id="where-d-this-hat-come-from-">Where&#39;d this hat come from?</h2>
<p>Over the past decade I primarily have been a client-side application developer. Sometimes my business card changes or personal introductions are made that get &#39;engineer&#39; and &#39;architect&#39; thrown in there, but truthfully I spend my days coding applications, regardless of language. I enjoy writing and shipping code under certain practices and methodologies and ocassionally pause to assess my current workflow and modify where bottlenecks are prevelant.</p>
<p>Up until recent years I was primarily concerned with code performance; rendering pipelines and element lifecycles, user-perceived performance cases for remote or off-loaded operations, optimizing algorithms for sorting, mapping, analyzing data, etc. I still am, but I also have become increasingly focused on delivery and load perfomance - especially in today&#39;s climate of people viewing web content on handheld devices without WiFi available. </p>
<p>Perhaps it is due the increasing work of web-based clients over desktop or native applications, but - if I am being honest - I never really paid attention to load time for older web-based application projects for several reasons:</p>
<ul>
<li>Flash plugin (preload, skip intro)</li>
<li>Desktop browser targets</li>
<li>Blind naivete</li>
</ul>
<p>However, as an end-user myself (don&#39;t like the term much, either) trying to access web content on my phone while on my bus ride home, my world is consumed with <code>waiting...</code>. As such, I wised up rather quick when I started to think about how someone would be absolutely frustrated and move on after 1/4 second without seeing any visible load response from a web application I lovingly crafted to in some way (hopefully) make their life easier.</p>
<p>That&#39;s when I started incorporating page load analysis to my deployment workflow.</p>
<h2 id="best-practices">Best Practices</h2>
<p>There is excellent documentation out there regarding best practices in delivering web pages with optimal performance. Some of the best known ones are below:</p>
<p>Yahoo: <a href="http://developer.yahoo.com/performance/rules.html">Best Practices for Speeding Up Your Web Site</a><br>Google: <a href="https://developers.google.com/speed/docs/best-practices/rules_intro">Web Perfomance Best Practices; Google</a><br>Steve Souders: <a href="http://stevesouders.com/hpws/rules.php">14 Rules for Faster-Loading Web Sites</a></p>
<p>I won&#39;t rehash the tidbits those articles provide, so please visit those links for a wealth of information and follow the following blogs to keep abreast of the latest in research and development of web performance:</p>
<ul>
<li><a href="http://stevesouders.com/">Steve Souders</a></li>
<li><a href="http://calendar.perfplanet.com/">Perfomance Calendar</a>  </li>
</ul>
<p>One aspect I find interesting is that a handful of the preferred optimizations described in those articles - such as concatenation, data-uris and script and styles placement on pages - have actually become part of the build phase of my development workflow, especially with the rise of tools such as <a href="http://gruntjs.com">Grunt</a> and the developer community creating post-process tasks. </p>
<p>It is not taken for granted that I can select tools and code under certain architectural principles I perceive as providing a comfortable development environment and have these tools at my disposal to deliver the end product in an optimal fashion. <em>Another resolution for this year is to contribute more to the libraries and tools I use often - whether through code or monetary donations.</em></p>
<h2 id="manual-performance-analysis">Manual Performance Analysis</h2>
<p>There are a few sites and tools I visit that will perform analysis on a site while in development:</p>
<ul>
<li><a href="http://www.webpagetest.org/">WebPageTest</a></li>
<li><a href="http://gtmetrix.com/">GTmetrix</a></li>
<li><a href="http://tools.pingdom.com/">pingdom</a></li>
<li><a href="https://developers.google.com/speed/docs/insights/using_chrome">PageSpeed Chrome Developer Tool</a></li>
</ul>
<p>Additonally, <a href="http://www.feedthebot.com/tools/">feedthebot</a> has a handful of neat little tools to test some things - specifically if gzip is working on your site.</p>
<p>They all - along with various other metrics - provide a scoring based on some criteria which, as far as I can tell, are defined either by <strong>Yahoo!</strong> (via <a href="http://developer.yahoo.com/yslow/">yslow</a>) or <strong>Google</strong> (via <a href="https://developers.google.com/speed/pagespeed/?csw=1">PageSpeed</a>).</p>
<p>Typically I stick to opening and running <a href="https://developers.google.com/speed/pagespeed/?csw=1">PageSpeed</a> when developing in Chrome to get a overall recommndation of optimizations and then visit <a href="http://www.webpagetest.org/">WebPageTest</a> when I want some serious analysis and am busy updating my <strong>.htaccess</strong> file with rewrites and expiries.</p>
<h2 id="integrating-performance-reporting-in-workflow">Integrating Performance Reporting in Workflow</h2>
<p>Running analysis using tools described above is a great way to see some metrics and determine what solutions to take to better the load performance of your site/application, but I like to automate all the things when I can as well as provide reporting to Continuous Integration servers so that we can document progress or failures. To provide such value, I am a strong proponent of using <a href="http://www.sitespeed.io/">sitespeed.io</a>.</p>
<p>I have nothing bad to say about <a href="http://www.sitespeed.io/">sitespeed.io</a>. It&#39;s built on top of <a href="https://github.com/ariya/phantomjs">PhantomJS</a>, <a href="https://github.com/marcelduran/yslow/">yslow</a>, <a href="https://github.com/tobli/browsertime">browsertime</a> and <a href="https://github.com/twbs/bootstrap/">bootstrap</a>. You can alternatively use the <a href="http://yslow.org/phantomjs/">yslow script for PhantomJS</a> if you want something more stripped down, but <a href="http://www.sitespeed.io/">sitespeed.io</a> generates a nice set of web documents that provide performance summaries along with being able to produce a <strong><a href="http://www.sitespeed.io/documentation/#junit">JUnit</a></strong> report for CI.</p>
<p>The documentation for <strong>sitespeed.io</strong> is thorough and easy to follow along and the <a href="http://www.sitespeed.io/documentation/#configuration">configuration options</a> are insanely helpful in finding possible pages on your site that may be of issue.</p>
<h3 id="grunt-integration">Grunt integration</h3>
<p>I am sure there is some <a href="http://gruntjs.com">Grunt</a> task out there in the wild that hooks into running <strong>sitespeed.io</strong> (or I should probably just stop being lazy and make one), but I have yet to find or search for one. I personally just use <a href="https://github.com/jharding/grunt-exec">grunt-exec</a> to run the command during a build and deploy. With the proper <a href="http://www.sitespeed.io/documentation/#installation">installation of sitespeed.io</a>, I have the following subtask under <code>exec</code> task:</p>
<pre><code>grunt.initConfig({
  <span class="hljs-keyword">...</span>
  exec: {
    sitespeed: {
      cmd: <span class="hljs-string">'sitspeed.io -u http://staging.mysite.com -r ./doc/metrics'</span>
    }
  }
}
});

grunt.loadNpmTasks(<span class="hljs-string">'grunt-exec'</span>);
grunt.registerTask(<span class="hljs-string">'dryrun'</span>, <span class="hljs-string">'Build, deploy and analyze.'</span>,\ 
  [<span class="hljs-string">'build'</span>, <span class="hljs-string">'deploy:staging'</span>, <span class="hljs-string">'exec:sitespeed'</span>]);
</code></pre><p>That generates the JUnit report and summary documentation artifacts that can be consumed and presented by your CI server of choice. I also have a tendency to use the <a href="https://github.com/marcelduran/yslow/">yslow</a> script for <a href="https://github.com/ariya/phantomjs">PhantomJS</a> in tandem on the <code>exec</code> task as that will print out my perfomance grade in the console after issuing my <strong>grunt</strong> deployment.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Sometimes, especially when working with 3rd party libraries, web fonts, etc, it is unrealistic to hit 100 for your performance grading - who am I kidding, it is damn near impossible. I try to stay above 90 and feel satisfied. </p>
<p>As well, it should be stated that the final test is actually physically visiting the sites on handheld devices over a data plan. As I mentioned previously, I usually do some perceived perfomance testing while on the bus ride home, ensuring that I don&#39;t get frustrated with the load time on my own work (and I hope I am more critical of my own stuff than others are ;)).</p>
<p>This is just the tip of the iceberg when it comes to analyzing load performance and with developments coming out of Google, such as <a href="http://www.chromium.org/spdy/spdy-whitepaper">SPDY</a> and <a href="https://code.google.com/p/modpagespeed/">mod_pagespeed</a>, an exciting space to keep an eye on in order to deliver your content faster and keep end-users happily enjoying your sites and applications.</p>
]]></description><link>http://custardbelly.com/blog/blog-posts/2014/01/06/obsession-over-page-speed/index.html</link><guid isPermaLink="true">http://custardbelly.com/blog/blog-posts/2014/01/06/obsession-over-page-speed/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[So long WordPress]]></title><description><![CDATA[<p>Originally a resolution for 2012, then 2013, I am making good early this year on getting rid of my reliance on <a href="http://wordpress.org/">WordPress</a> as my blog engine - in fact, getting rid of <em>any</em> engine to manage and serve blog posts; I converted all my old posts to static files and will be writing posts in markdown from now on.</p>
<h2 id="out-with-the-old">Out with the old</h2>
<p>Within the past couple years it just felt laborious to maintain my blog - not so much in actually writing content, but rather in dealing with spam, upgrading WordPress to ward off attacks until the next upgrade, finding syntax highlight replacements and other plugins as interests changed/grew. As a consequence, I think it did affect me actually wanting to log into the admin console to write posts.</p>
<p>Along with maintenance of the my self-host WordPress being a bothersome heft, the WYSIWYG editor and all the extra bells and whistles in the admin console it provided just seemed to be a lot of useless noise. I have grown quite comfortable writing documentation in <a href="http://daringfireball.net/projects/markdown/">markdown</a> (due, in most part, to the rise of <a href="https://github.com/">GitHub</a>) and felt the experience of writing in such a context much more liberating and free-flowing. </p>
<p>As such, I started looking at what else was out there that would allow me to:</p>
<ul>
<li>get rid of the dynamicism of serving blog posts  </li>
<li>throw out requirement of a database to store and maintain information  </li>
<li>write posts in markdown  </li>
<li>easily generate and maintain static files</li>
</ul>
<h2 id="the-solution">The solution</h2>
<p>As I mentioned previously, I started investigating solutions for the line items above a few years ago. Sitting on my desire to get rid of WordPress for so long has afforded me two things:</p>
<ul>
<li>growing frustration that I still have to deal with WordPress</li>
<li>keeping track of the climate of tools that allow for generating static content from markdown</li>
</ul>
<p>Naturally, the first one I gave a shot at back in 2012 was <a href="http://jekyllrb.com/">Jekyll</a>, and then the <a href="http://octopress.org/">Octopress</a> framework. Truly great software which you should check out if you haven&#39;t had a chance. It was most likely the involvement of Octopress and maintenance that started to weigh down on me continuing to pursue it as an option and look for something more lightweight.</p>
<p>Within the time frame, as well, saw the rise of <a href="http://gruntjs.com/">Grunt</a>, a task-based utility built on <a href="http://nodejs.org/">nodejs</a>, and a tool I essentially use everyday in my work and personal projects. It was only natural that over the past couple years (or rather half-year) that I kept an eye out for any Grunt tasks that would generate markup from markdown; that&#39;s when <a href="https://github.com/testdouble/grunt-markdown-blog">grunt-markdown-blog</a> which utilizes the <a href="https://github.com/chjj/marked">marked</a> node module, along with <a href="https://github.com/jashkenas/underscore/">underscore</a> templating, entered my life.</p>
<h2 id="the-implementation">The implementation</h2>
<p>Though I had settled on a solution to turn markdown into markup, I had sort of started working backwards - there were more pertinent issues I had to address in order to preserve the past history of my bloggin - since 2005! (spoiler: not all <em>good</em> content).</p>
<h3 id="conversion-of-wp-posts-to-markdown">Conversion of WP posts to markdown</h3>
<p>The first thing I had to accomplish was turning all my old posts stored in a database into static content. To do just that, I found the wonderful <a href="https://github.com/mossiso/WP-Static">wpstatic</a> script. Dropping that script on my server in the same location as the <em>wp-config.php</em> file of my WordPress install - along with turning on 1000 posts per page in my WP admin console - allowed me to spit out the whole full history of posts since I started blogging by simply issuing the following:</p>
<pre><code>./wpstatic
</code></pre><p>With a full history of posts held in a single HTML file, I then used <a href="http://phantomjs.org/download.html">PhantomJS</a> to consume that file and spit out each post into a directory structure that was relative to the naming convention used for posting in WordPress.</p>
<p>I then used <a href="https://github.com/aaronsw/html2text">html2text</a> - a python module - to convert each post markup into markdown.</p>
<h3 id="conversion-of-markdown-back-to-markup">Conversion of markdown back to markup</h3>
<p>I know, I know. It seems really odd that in my first two steps I had generated valid markup and then went ahead and converted that to markdown only wanting to convert it back to markup... there is a good reason :) I wanted the markup to be consistent across previous posts and any new posts I would be writing in markdown. Using <a href="https://github.com/aaronsw/html2text">html2text</a> allowed me to conform previous HTML documents to the structure of markdown I would be using going forward.</p>
<p>With the static markdown content produced, all it takes now is running the <a href="https://github.com/testdouble/grunt-markdown-blog">grunt-markdown-blog</a> task on those files to generate static HTML documents.</p>
<p>And with that, all my previous work is preserved and available as it once was.</p>
<h2 id="the-downside">The downside</h2>
<p>The biggest benefit a database provides is being able to reference information categorically. Data stored with reference to other data stored allows for ease in generating new views and relationships. Admittedly, this is the big downside of moving my blog to static content - I do love analyzing and presenting data in new ways (its part of my job!). But, as mentioned previously, the weight of maintenance involved in the engine and tooling farly outweighed the need to move to static content than the need to access blog post data.</p>
<p>Another downside is the loss of comment association to post - and specifically the &quot;google-ability&quot; of providing a post of mine as a result of a comment being relevant to a search query. Even further, all previous comments are lost :( For that, I feel truly sorry to those of you out there who have added to the discussion on previous posts; I apologize for throwing them out with the bath water. If the previous comments corrected some information with the post or provided valuable insight, I did make it a habit of ammending the post and those should still be part of the static replacement. If you see something that is out of place or would like to be added, please get in touch.</p>
<h2 id="the-brightside">The brightside</h2>
<p>I am free of WordPress :)</p>
<p>I do want to state that WordPress is not bad or evil - far from it. It had just become a burden for me; I much prefer just writing thoughts out in markdown and then issuing a command to generate and deploy new, static content.</p>
<p>If you are interested in all the details, you can checkout the Github repo I have set up to store my tools and blog content:<br><a href="https://github.com/bustardcelly/blog-to-markdown"><a href="https://github.com/bustardcelly/blog-to-markdown">https://github.com/bustardcelly/blog-to-markdown</a></a></p>
]]></description><link>http://custardbelly.com/blog/blog-posts/2014/01/03/so-long-wordpress/index.html</link><guid isPermaLink="true">http://custardbelly.com/blog/blog-posts/2014/01/03/so-long-wordpress/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[The Making of a Test-Driven Grocery List Application in JS: Part X]]></title><description><![CDATA[<p><em>This is the tenth installment in a series of building a Test-Driven Grocery List application using <a href="http://pivotal.github.com/jasmine/">Jasmine</a> and <a href="http://requirejs.org">RequireJS</a>. To learn more about the intent and general concept of the series please visit <a href="http://custardbelly.com/blog/2012/11/26/the-making-of-a-test-driven-grocery-list-application-in-javascript-part-i/">The Making of a Test-Driven Grocery List Application in JavaScript: Part I</a></em><br>—</p>
<h2 id="introduction">Introduction</h2>
<p>When we last left, we properly modified <code>list-controller</code> to support event notification upon change to its collection as well as created a <code>storage-service</code> communication layer with <code>localStorage</code>. That gave us some great passing tests, but nothing to show off as the service was not integrated into the <strong>Grocery List</strong> application. In this article, we’ll do just that, but…</p>
<h2 id="before-we-hook-up-list-controller-events-to-storage-service-operations-">Before we hook up list-controller events to storage-service operations…</h2>
<p>We need a way to supply the <code>list-controller</code> with the stored items. The <code>list-controller</code> has a <code>createNewItem()</code> method, but no methods to provide a previously created item. Since we are not burdening the <code>list-controller</code> in communicating with the <code>storage-service</code> directly, we’ll need to open up the API to allow items to be added – at least at the onset.</p>
<h3 id="tests">Tests</h3>
<p>First we’ll include all our tests in our <em>specrunner</em> again as changes to <code>list-controller</code> may impact tests across multiple specs. And while we are poking around, let’s add a spec suite for <code>setItems()</code> on the <code>list-controller</code> and watch it fail:</p>
<p><em>/test/jasmine/spec/list-controller.spec.js</em></p>
<pre><code><span class="hljs-function">describe(<span class="hljs-string">'setItems()'</span>, <span class="hljs-function">function()</span> {



  var itemOne = modelFactory.<span class="hljs-function">create()</span>,

      itemTwo = modelFactory.<span class="hljs-function">create()</span>;



  <span class="hljs-function">beforeEach( <span class="hljs-function">function()</span> {

    itemOne.name = <span class="hljs-string">'apples'</span>;

    itemTwo.name = <span class="hljs-string">'oranges'</span>;

    listController.<span class="hljs-function">setItems([itemOne, itemTwo])</span>;

  })</span>;



  <span class="hljs-function">afterEach( <span class="hljs-function">function()</span> {

    listController.<span class="hljs-function">getItemList()</span>.<span class="hljs-function">removeAll()</span>;

  })</span>;



  <span class="hljs-function">it(<span class="hljs-string">'should fill list with provided items'</span>, <span class="hljs-function">function()</span> {

    var items = listController.<span class="hljs-function">getItemList()</span>;

    <span class="hljs-function">expect(items.<span class="hljs-function">itemLength()</span>)</span>.<span class="hljs-function">toEqual(<span class="hljs-number">2</span>)</span>;

    <span class="hljs-function">expect(items.<span class="hljs-function">getItemAt(<span class="hljs-number">0</span>)</span>)</span>.<span class="hljs-function">toBe(itemOne)</span>;

    <span class="hljs-function">expect(items.<span class="hljs-function">getItemAt(<span class="hljs-number">1</span>)</span>)</span>.<span class="hljs-function">toBe(itemTwo)</span>;

  })</span>;



})</span>;
</code></pre><p>This simple first spec tells us that an array of items can be provided to the <code>list-controller</code> using <code>setItems()</code> and should be accessible by its collection. And we fail with no surprises:<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_17.png" alt="Failing on setItems of list-controller"></p>
<h3 id="list-controller-modification">list-controller modification</h3>
<p>Throughout this series I have employed a quasi-<a href="http://coderetreat.org/facilitating/activities/tdd-as-if-you-meant-it"><em>“TDD as if you mean it”</em></a> approach when creating new components and modifying the API on existing ones. With this modification to the <code>list-controller</code>, I am going to stick to getting the tests to pass by modifying the <code>list-controller</code> directly as I feel it is going to get a little more involved and will require some refactoring that would be better suited by focusing on true implementation.</p>
<p>With that said, let’s modify <code>list-controller</code> to get that new spec passing:</p>
<p><em>/script/controller/list-controller.js</em></p>
<pre><code>listController = {

  $view: <span class="hljs-literal">undefined</span>,

  getItemList: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

    <span class="hljs-keyword">return</span> collection;

  },

  getRendererFromItem: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>

    <span class="hljs-keyword">var</span> i = rendererList.itemLength(),

        renderer;

    <span class="hljs-keyword">while</span>( --i &gt; -<span class="hljs-number">1</span> ) {

      renderer = rendererList.getItemAt(i);

      <span class="hljs-keyword">if</span>(renderer.model === item) {

        <span class="hljs-keyword">return</span> renderer;

      }

    }

    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;

  },

  createNewItem: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

    <span class="hljs-keyword">var</span> model = modelFactory.create();

    collection.addItem(model);

    <span class="hljs-keyword">return</span> model;

  },

  removeItem: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>

    <span class="hljs-keyword">return</span> collection.removeItem(item);

  },

  setView: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(view)</span> {</span>

    <span class="hljs-keyword">this</span>.$view = (view <span class="hljs-keyword">instanceof</span> $) ? view : $(view);

  },

  setItems: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(items)</span> {</span>

    collection = collectionFactory.create(items);

  }

};
</code></pre><p>Well, that was easy enough!<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_18.png" alt="Passing on setItems() of list-controller"></p>
<h3 id="tests">Tests</h3>
<p>Not so fast… I think our single spec may be deceiving our expectations. Let’s add a few more and make sure we are on the right path. To start, we expect changes to these new models to propagate events when it is modified – such as in the work we have done previously.</p>
<p><em>/test/jasmine/spec/list-controller.spec.js</em></p>
<pre><code>async.it(<span class="hljs-string">'should dispatch events of property-change from provided items'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(done)</span> {</span>

  <span class="hljs-keyword">var</span> items = listController.getItemList(),

      itemOne = items.getItemAt(<span class="hljs-number">0</span>);

  $(listController).on(<span class="hljs-string">'save-item'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(event)</span> {</span>

    $(listController).off(<span class="hljs-string">'save-item'</span>);

    expect(event.item).toBe(itemOne);

    done();

  });

  itemOne.marked = <span class="hljs-literal">true</span>;

});
</code></pre><p>This spec tells us that changes to an item should be notified through the <code>list-controller</code> – basically the work we had done previously in getting the <code>list-controller</code> to dispatch events related to its underlying collection so as to be captured by observing parties.<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_19.png" alt="Failing on async timeout of event from item"></p>
<p>This test actually reveals some refactoring that is required within the <code>list-controller</code>. In essence, creating a new collection from the provided items in <code>setItems()</code> is not enough to have the application work as expected – each individual item needs to be managed by a <code>list-item-controller</code> which responds and notifies of changes accordingly. We had previously paired an item with a item controller within the <code>collection-change</code> event handler of the collection in <code>list-controller</code>:</p>
<p><em>/script/controller/list-controller.js</em></p>
<pre><code><span class="hljs-list">(<span class="hljs-title">function</span> assignCollectionHandlers<span class="hljs-list">($collection)</span> {



  var EventKindEnum = collectionFactory.collectionEventKind,

      isValidValue = function<span class="hljs-list">(<span class="hljs-title">value</span>)</span> {

        return value <span class="hljs-keyword">&amp;&amp;</span> <span class="hljs-list">(<span class="hljs-title">value</span>.hasOwnProperty<span class="hljs-list">('length')</span> <span class="hljs-keyword">&amp;&amp;</span> value.length &gt; <span class="hljs-number">0</span>)</span><span class="hljs-comment">;</span>

      }<span class="hljs-comment">;</span>



  $collection.on<span class="hljs-list">('collection-change', function<span class="hljs-list">(<span class="hljs-title">event</span>)</span> {

    var model,

        itemController,

        $itemController,

        $itemView<span class="hljs-comment">;</span>

    switch<span class="hljs-list">( event.kind )</span> {

      case EventKindEnum.ADD:

        $itemView = $<span class="hljs-list">('&lt;li&gt;')</span><span class="hljs-comment">;</span>

        model = event.items.shift<span class="hljs-list">()</span><span class="hljs-comment">;</span>

        itemController = itemControllerFactory.create<span class="hljs-list">($itemView, model)</span><span class="hljs-comment">;</span>

        $itemController = $<span class="hljs-list">(<span class="hljs-title">itemController</span>)</span><span class="hljs-comment">;</span>



        $itemView.appendTo<span class="hljs-list">(<span class="hljs-title">listController</span>.$view)</span><span class="hljs-comment">;</span>

        rendererList.addItem<span class="hljs-list">(<span class="hljs-title">itemController</span>)</span><span class="hljs-comment">;</span>

        $<span class="hljs-list">(<span class="hljs-title">listController</span>)</span>.trigger<span class="hljs-list">(<span class="hljs-title">createSaveEvent</span><span class="hljs-list">(<span class="hljs-title">model</span>)</span>)</span><span class="hljs-comment">;</span>

        itemController.state = itemControllerFactory.state.EDITABLE<span class="hljs-comment">;</span>



        $itemController.on<span class="hljs-list">('remove', function<span class="hljs-list">(<span class="hljs-title">event</span>)</span> {

          listController.removeItem<span class="hljs-list">(<span class="hljs-title">model</span>)</span><span class="hljs-comment">;</span>

        })</span><span class="hljs-comment">;</span>

        $itemController.on<span class="hljs-list">('commit', function<span class="hljs-list">(<span class="hljs-title">event</span>)</span> {

          if<span class="hljs-list">(!isValidValue<span class="hljs-list">(<span class="hljs-title">model</span>.name)</span>)</span> {

            listController.removeItem<span class="hljs-list">(<span class="hljs-title">model</span>)</span><span class="hljs-comment">;</span>

          }

          else {

            $<span class="hljs-list">(<span class="hljs-title">listController</span>)</span>.trigger<span class="hljs-list">(<span class="hljs-title">createSaveEvent</span><span class="hljs-list">(<span class="hljs-title">model</span>)</span>)</span><span class="hljs-comment">;</span>

          }

        })</span><span class="hljs-comment">;</span>

        break<span class="hljs-comment">;</span>

      case EventKindEnum.REMOVE:

        model = event.items.shift<span class="hljs-list">()</span><span class="hljs-comment">;</span>

        itemController = listController.getRendererFromItem<span class="hljs-list">(<span class="hljs-title">model</span>)</span>,

        $itemController = $<span class="hljs-list">(<span class="hljs-title">itemController</span>)</span><span class="hljs-comment">;</span>



        if<span class="hljs-list">(<span class="hljs-title">itemController</span>)</span> {

          $itemView = itemController.parentView<span class="hljs-comment">;</span>

          $itemView.remove<span class="hljs-list">()</span><span class="hljs-comment">;</span>

          itemController.dispose<span class="hljs-list">()</span><span class="hljs-comment">;</span>

          $itemController.off<span class="hljs-list">('remove')</span><span class="hljs-comment">;</span>

          $itemController.off<span class="hljs-list">('commit')</span><span class="hljs-comment">;</span>

          rendererList.removeItem<span class="hljs-list">(<span class="hljs-title">itemController</span>)</span><span class="hljs-comment">;</span>

          $<span class="hljs-list">(<span class="hljs-title">listController</span>)</span>.trigger<span class="hljs-list">(<span class="hljs-title">createRemoveEvent</span><span class="hljs-list">(<span class="hljs-title">model</span>)</span>)</span><span class="hljs-comment">;</span>

        }

        break<span class="hljs-comment">;</span>

      case EventKindEnum.RESET:

        break<span class="hljs-comment">;</span>

    }

  })</span><span class="hljs-comment">;</span>



}<span class="hljs-list">($<span class="hljs-list">(<span class="hljs-title">collection</span>)</span>)</span>)</span><span class="hljs-comment">;</span>
</code></pre><p>That <a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/">IIFE</a> was run in the module prior to returning the <code>list-controller</code> instance. Now, we could just copy that code from the <code>EventKindEnum.ADD</code> case and shove it into <code>setItems()</code>, applying it to each item in a loop, but that wouldn’t be very efficient, not to mention a cry-inducing solution for anyone (including yourself) which need to revisit your code.</p>
<h3 id="list-controller-refactor">list-controller refactor</h3>
<p>I think we are going to have to get rid of this <strong>IIFE</strong>, but let’s do that modification in piecemeal; first, let’s strip out the item management when added to a collection:</p>
<p><em>/script/controller/list-controller.js</em></p>
<pre><code><span class="hljs-keyword">var</span> collection = collectionFactory.create(),

    rendererList = collectionFactory.create(),

    manageItemInList = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item, listController)</span> {</span>

      <span class="hljs-keyword">var</span> <span class="hljs-variable">$itemView</span> = $(<span class="hljs-string">'&lt;li&gt;'</span>),

          itemController = itemControllerFactory.create(<span class="hljs-variable">$itemView</span>, item),

          <span class="hljs-variable">$itemController</span> = $(itemController),

          isValidValue = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(value)</span> {</span>

            <span class="hljs-keyword">return</span> value &amp;&amp; (value.hasOwnProperty(<span class="hljs-string">'length'</span>) &amp;&amp; value.length &gt; <span class="hljs-number">0</span>);

          };



      <span class="hljs-variable">$itemView</span>.appendTo(listController.<span class="hljs-variable">$view</span>);

      rendererList.addItem(itemController);



      <span class="hljs-variable">$itemController</span>.on(<span class="hljs-string">'remove'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(event)</span> {</span>

        listController.removeItem(item);

      });

      <span class="hljs-variable">$itemController</span>.on(<span class="hljs-string">'commit'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(event)</span> {</span>

        <span class="hljs-keyword">if</span>(!isValidValue(item.name)) {

          listController.removeItem(item);

        }

        <span class="hljs-keyword">else</span> {

          $(listController).trigger(createSaveEvent(item));

        }

      });

      <span class="hljs-keyword">return</span> itemController;

    },

    listController = {

      <span class="hljs-variable">$view</span>: undefined,

      ...

    };
</code></pre><p>Most of what was held in the <code>EventKindEnum.ADD</code> case of the <code>collection-change</code> handler has been moved to its own function expression – <code>manageItemInList()</code>. If we look at how this case is modified we see that we have left state initialization and event dispatching:</p>
<p><em>/script/controller/list-controller.js</em></p>
<pre><code>case EventKindEnum<span class="hljs-preprocessor">.ADD</span>:

  model = event<span class="hljs-preprocessor">.items</span><span class="hljs-preprocessor">.shift</span>()<span class="hljs-comment">;</span>

  itemController = manageItemInList(model, listController)<span class="hljs-comment">;</span>

  itemController<span class="hljs-preprocessor">.state</span> = itemControllerFactory<span class="hljs-preprocessor">.state</span><span class="hljs-preprocessor">.EDITABLE</span><span class="hljs-comment">;</span>

  $(listController)<span class="hljs-preprocessor">.trigger</span>(createSaveEvent(model))<span class="hljs-comment">;</span>

  <span class="hljs-keyword">break</span><span class="hljs-comment">;</span>
</code></pre><p>When an item is added to the collection and the list-controller is notified, it creates a new <code>list-item-controller</code> using <code>manageItemInList()</code>, sets the controller’s state to <code>EDITABLE</code> and notifies of its addition. The last two operations are of note, as they only pertain to <em>new</em> additions to the collection – we don’t want such things for existing items being added to the list from <code>setItems()</code>.</p>
<p><em>/script/controller/list-controller.js</em></p>
<pre><code><span class="hljs-attribute">setItems</span>: <span class="hljs-string">function(items) {</span>

<span class="matlab">  var <span class="hljs-built_in">i</span>, <span class="hljs-built_in">length</span> = <span class="hljs-transposed_variable">items.</span><span class="hljs-built_in">length</span>;

  collection = <span class="hljs-transposed_variable">collectionFactory.</span>create();

  <span class="hljs-keyword">for</span>( <span class="hljs-built_in">i</span> = <span class="hljs-number">0</span>; <span class="hljs-built_in">i</span> &lt; <span class="hljs-built_in">length</span>; <span class="hljs-built_in">i</span>++ ) <span class="hljs-cell">{

    manageItemInList(items[i], this);

    collection.addItem(items[i]);

  }</span>

}</span>
</code></pre><p>Now if we run the tests again:<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_20.png" alt="Passing on modifications to item management in list-controller"></p>
<p>Passing! </p>
<h3 id="tests">Tests</h3>
<p>I don’t think we are out of the woods yet, however… Let’s continue to add more expectations about setting the collection through <code>setItems()</code>on <code>list-controller</code>:</p>
<p><em>/test/jasmine/spec/list-controller.spec.js</em></p>
<pre><code>async.it(<span class="hljs-string">'should dispatch event of remove-item from collection'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(done)</span> {</span>

  $(listController).on(<span class="hljs-string">'remove-item'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(event)</span> {</span>

    $(listController).off(<span class="hljs-string">'remove-item'</span>);

    expect(event.item).toBe(itemOne);

    done();

  });

  listController.removeItem(itemOne);

});
</code></pre><p>This test ensures that the <code>list-controller</code> should still be responding to and notifying of changes to the new collection created through <code>setItems()</code> just as it should if the <code>list-controller</code> was only being instructed to modify the collection through calls to <code>createNewItem()</code>.</p>
<h3 id="list-controller-refactoring">list-controller refactoring</h3>
<p>To save you some time in downloading more images, believe me when I tell you I just put us back in red <img src="http://custardbelly.com/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)"> The reason being that dang <code>assignCollectionHandlers</code> <a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/">IIFE</a>. The collection that is created in <code>setItems()</code> is not being observed. The <strong>IIFE</strong> to assign events handlers is only run upon load of the module and only targets the collection instantiated in its declaration. In other words, any new collections will not be observed.</p>
<p>I say we move that <strong>IIFE</strong> out into its own expression:</p>
<p><em>/script/controller/list-controller.js</em></p>
<pre><code><span class="hljs-keyword">var</span> collection = collectionFactory.create(),

    rendererList = collectionFactory.create(),

    assignCollectionHandlers = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(<span class="hljs-variable">$collection</span>)</span> {</span>

      <span class="hljs-keyword">var</span> EventKindEnum = collectionFactory.collectionEventKind;

      <span class="hljs-variable">$collection</span>.on(<span class="hljs-string">'collection-change'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(event)</span> {</span>

        <span class="hljs-keyword">var</span> model,

            itemController,

            <span class="hljs-variable">$itemController</span>,

            <span class="hljs-variable">$itemView</span>;

        <span class="hljs-keyword">switch</span>( event.kind ) {

          <span class="hljs-keyword">case</span> EventKindEnum.ADD:

            model = event.items.shift();

            itemController = manageItemInList(model, listController);

            itemController.state = itemControllerFactory.state.EDITABLE;

            $(listController).trigger(createSaveEvent(model));

            <span class="hljs-keyword">break</span>;

          <span class="hljs-keyword">case</span> EventKindEnum.REMOVE:

            model = event.items.shift();

            itemController = listController.getRendererFromItem(model),

            <span class="hljs-variable">$itemController</span> = $(itemController);



            <span class="hljs-keyword">if</span>(itemController) {

              <span class="hljs-variable">$itemView</span> = itemController.parentView;

              <span class="hljs-variable">$itemView</span>.remove();

              itemController.dispose();

              <span class="hljs-variable">$itemController</span>.off(<span class="hljs-string">'remove'</span>);

              <span class="hljs-variable">$itemController</span>.off(<span class="hljs-string">'commit'</span>);

              rendererList.removeItem(itemController);

              $(listController).trigger(createRemoveEvent(model));

            }

            <span class="hljs-keyword">break</span>;

          <span class="hljs-keyword">case</span> EventKindEnum.RESET:

            <span class="hljs-keyword">break</span>;

        }

      });

    },

    manageItemInList = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item, listController)</span> {</span>

      <span class="hljs-comment">// implementation removed to reduce noise</span>

    },

    listController = {

      <span class="hljs-comment">// implementation removed to reduce noise</span>

    }
</code></pre><p>We basically took what was the named <code>assignCollectionHandlers</code> <strong>IIFE</strong> and added it to the variable declarations within the <code>list-controller</code> module. That changes the code between those declarations and the return of the <code>listController</code> instance to:</p>
<p><em>/script/controller/list-controller.js</em></p>
<pre><code><span class="hljs-keyword">var</span> collection = collectionFactory.create(),

    rendererList = collectionFactory.create(),

    assignCollectionHandlers = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($collection)</span> {</span>

      <span class="hljs-comment">// implementation removed to reduce noise</span>

    },

    manageItemInList = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item, listController)</span> {</span>

      <span class="hljs-comment">// implementation removed to reduce noise</span>

    },

    listController = {

      <span class="hljs-comment">// implementation removed to reduce noise</span>

    };



assignCollectionHandlers($(collection));



<span class="hljs-keyword">return</span> listController;
</code></pre><p>With those changes we are still failing on the last spec we created, but more importantly we have not caused any other tests to fail!<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_21.png" alt="Still failing, but failing well!"></p>
<p>Let’s get that last spec to pass:</p>
<p><em>/script/controller/list-controller.js</em></p>
<pre><code><span class="hljs-attribute">setItems</span>: <span class="hljs-string">function(items) {</span>

<span class="matlab">  var <span class="hljs-built_in">i</span>, <span class="hljs-built_in">length</span> = <span class="hljs-transposed_variable">items.</span><span class="hljs-built_in">length</span>;

  collection = <span class="hljs-transposed_variable">collectionFactory.</span>create();

  <span class="hljs-keyword">for</span>( <span class="hljs-built_in">i</span> = <span class="hljs-number">0</span>; <span class="hljs-built_in">i</span> &lt; <span class="hljs-built_in">length</span>; <span class="hljs-built_in">i</span>++ ) <span class="hljs-cell">{

    manageItemInList(items[i], this);

    collection.addItem(items[i]);

  }</span>

  assignCollectionHandlers($(collection));

}</span>
</code></pre><p>Hurrah!<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_22.png" alt="Passing again!"></p>
<p>Tagged <strong>0.1.13</strong>: <a href="https://github.com/bustardcelly/grocery-ls/tree/0.1.13"><a href="https://github.com/bustardcelly/grocery-ls/tree/0.1.13">https://github.com/bustardcelly/grocery-ls/tree/0.1.13</a></a></p>
<h2 id="hooking-it-all-together">Hooking it all together</h2>
<p>We have created our <code>storage-service</code> to communicate with <code>localStorage</code>, modified <code>list-controller</code> to dispatch events and accept initial items for its collection and all our tests are still passing! It’s a wonderous feeling. Now let’s get to actually hooking them up so that the <code>storage-service</code> is told how to handle changes to the list by responding to <code>list-controller</code> events.</p>
<p>Normally, in such situations I would create another component to the application that would serve as an mediator for such integration, receiving events from <code>list-controller</code> and invoking the <code>storage-service</code>. Naturally, that would also call for more tests in assuring that the mediator did its job correctly. I am not going to do that here. This is a small application meant for our own personal use and this series has gotten quite long; I don’t want to scare you away by adding more dependencies, but I would encourage you to do so on your own if you feel so…. just don’t forget the tests!</p>
<p>I think modifying the main JavaScript file (<em>/script/grocery-ls.js</em>) that defines the module dependencies and initializes the <strong>Grocery List</strong> application is fine enough for the task at hand:</p>
<p><em>/script/grocery-ls.js</em></p>
<pre><code><span class="hljs-list">(<span class="hljs-title">function</span><span class="hljs-list">(<span class="hljs-title">window</span>, require)</span> <span class="hljs-collection">{



  require.config<span class="hljs-list">(<span class="hljs-collection">{

    baseUrl: <span class="hljs-string">"."</span>,

    paths: <span class="hljs-collection">{

      <span class="hljs-string">"lib"</span>: <span class="hljs-string">"./lib"</span>,

      <span class="hljs-string">"script"</span>: <span class="hljs-string">"./script"</span>,

      <span class="hljs-string">"jquery"</span>: <span class="hljs-string">"./lib/jquery-1.8.3.min"</span>

    }</span>

  }</span>)</span><span class="hljs-comment">;</span>



  require<span class="hljs-list">( <span class="hljs-collection">['jquery', 'script/controller/list-controller', 'script/service/storage-service']</span>,

            function<span class="hljs-list">(<span class="hljs-title">$</span>, listController, storageService)</span> <span class="hljs-collection">{



    var $listController = $<span class="hljs-list">(<span class="hljs-title">listController</span>)</span><span class="hljs-comment">;</span>

    listController.setView<span class="hljs-list">(<span class="hljs-title">$</span><span class="hljs-list">(<span class="hljs-title">'section.groceries</span> ul')</span>)</span><span class="hljs-comment">;</span>



    storageService.getItems<span class="hljs-list">()</span>.then<span class="hljs-list">(<span class="hljs-title">function</span><span class="hljs-list">(<span class="hljs-title">items</span>)</span> <span class="hljs-collection">{

      listController.setItems<span class="hljs-list">(<span class="hljs-title">items</span>)</span><span class="hljs-comment">;</span>

    }</span>)</span><span class="hljs-comment">;</span>

    $listController.on<span class="hljs-list">(<span class="hljs-title">'save-item'</span>, function<span class="hljs-list">(<span class="hljs-title">event</span>)</span> <span class="hljs-collection">{

      storageService.saveItem<span class="hljs-list">(<span class="hljs-title">event.item</span>)</span>.then<span class="hljs-list">(<span class="hljs-title">function</span><span class="hljs-list">(<span class="hljs-title">item</span>)</span> <span class="hljs-collection">{

        console.log<span class="hljs-list">(<span class="hljs-title">'Item</span> saved! ' + item.name)</span><span class="hljs-comment">;</span>

      }</span>, function<span class="hljs-list">(<span class="hljs-title">error</span>)</span> <span class="hljs-collection">{

        console.log<span class="hljs-list">(<span class="hljs-title">'Item</span> not saved: ' + error)</span>

      }</span>)</span><span class="hljs-comment">;</span>

    }</span>)</span><span class="hljs-comment">;</span>

    $listController.on<span class="hljs-list">(<span class="hljs-title">'remove-item'</span>, function<span class="hljs-list">(<span class="hljs-title">event</span>)</span> <span class="hljs-collection">{

      storageService.removeItem<span class="hljs-list">(<span class="hljs-title">event.item</span>)</span>.then<span class="hljs-list">(<span class="hljs-title">function</span><span class="hljs-list">(<span class="hljs-title">item</span>)</span> <span class="hljs-collection">{

        console.log<span class="hljs-list">(<span class="hljs-title">'Item</span> removed! ' + item.name)</span><span class="hljs-comment">;</span>

      }</span>, function<span class="hljs-list">(<span class="hljs-title">error</span>)</span> <span class="hljs-collection">{

        console.log<span class="hljs-list">(<span class="hljs-title">'Item</span> not removed: ' + error)</span><span class="hljs-comment">;</span>

      }</span>)</span><span class="hljs-comment">;</span>

    }</span>)</span><span class="hljs-comment">;</span>

    $<span class="hljs-list">(<span class="hljs-title">'#add-item-button'</span>)</span>.on<span class="hljs-list">(<span class="hljs-title">'click'</span>, function<span class="hljs-list">(<span class="hljs-title">event</span>)</span> <span class="hljs-collection">{

      listController.createNewItem<span class="hljs-list">()</span><span class="hljs-comment">;</span>

    }</span>)</span><span class="hljs-comment">;</span>



  }</span>)</span><span class="hljs-comment">;</span>



}</span><span class="hljs-list">(<span class="hljs-title">window</span>, requirejs)</span>)</span><span class="hljs-comment">;</span>
</code></pre><p>Just a slight modification to the main file. We added <code>storage-service</code> as an initial dependency, request and supply stored items to the list-controller and respond to <code>save-item</code> and <code>remove-item</code> events, forwarding actions along to the <code>storage-service</code> appropriately.</p>
<p>If we run the application now, we can add, mark-off, remove items from the list. Same as before, but now, if we refresh the page, items and their state a persisted!</p>
<p><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_27.png" alt="Grocery list application"></p>
<p>It may look a little different than your if you have been following along in the code. I added some nice styling and committed it to the repo.</p>
<p>Tagged <strong>0.2.0</strong> : <a href="https://github.com/bustardcelly/grocery-ls/tree/0.2.0"><a href="https://github.com/bustardcelly/grocery-ls/tree/0.2.0">https://github.com/bustardcelly/grocery-ls/tree/0.2.0</a></a></p>
<h2 id="conclusion">Conclusion</h2>
<p>We have completed our <strong>Grocery List</strong> application and have it fully tested (well, hopefully <img src="http://custardbelly.com/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)"> ). We now have a grocery list that we can curate and is persisted in the browser. It should be noted that it is not persistent across browser<strong>s</strong>, plural – so make sure to open it in the same browser on your mobile device when creating the list and shopping. I am most likely going to whip up a little server to persist the list remotely, but am not going to document that in this series. It may end up in the <a href="https://github.com/bustardcelly/grocery-ls">github repo</a> eventually, however, so keep an eye out.</p>
<p>Thanks for sticking around in this long series (<em>ten parts!</em>) of building an application by trying to adhere to <strong>TDD</strong>. I may have gone off course here and there, but I hope it was informative in any way.</p>
<p>Cheers!</p>
<p>—-</p>
<h1 id="link-dump">Link Dump</h1>
<h2 id="reference">Reference</h2>
<p><a href="http://tddjs.com/">Test-Driven JavaScript Development by Christian Johansen</a><br><a href="http://dannorth.net/introducing-bdd/">Introducing BDD by Dan North</a><br><a href="http://cumulative-hypotheses.org/2011/08/30/tdd-as-if-you-meant-it/">TDD as if you Meant it by Keith Braithwaite</a><br><a href="http://requirejs.org/">RequireJS</a><br><a href="https://github.com/amdjs/amdjs-api/wiki/AMD">AMD</a><br><a href="http://pivotal.github.com/jasmine/">Jasmine</a><br><a href="http://sinonjs.org/">Sinon</a><br><a href="https://github.com/derickbailey/jasmine.async">Jasmine.Async</a></p>
<h2 id="post-series">Post Series</h2>
<p><a href="https://github.com/bustardcelly/grocery-ls">grocery-ls github repo</a><br><a href="http://custardbelly.com/blog/2012/11/26/the-making-of-a-test-driven-grocery-list-application-in-javascript-part-i">Part I – Introduction</a><br><a href="http://custardbelly.com/blog/2012/11/26/the-making-of-a-test-driven-grocery-list-application-in-js-part-ii">Part II – Feature: Add Item</a><br><a href="http://custardbelly.com/blog/2012/12/06/the-making-of-a-test-driven-grocery-list-application-in-js-part-iii">Part III – Feature: Mark-Off Item</a><br><a href="http://custardbelly.com/blog/2012/12/17/the-making-of-a-test-driven-grocery-list-application-in-js-part-iv">Part IV – Feature: List-Item-Controller</a><br><a href="http://custardbelly.com/blog/2012/12/31/the-making-of-a-test-driven-grocery-list-application-in-js-part-v/">Part V – Feature: List-Controller Refactoring</a><br><a href="http://custardbelly.com/blog/2013/01/08/the-making-of-a-test-driven-grocery-list-application-in-js-part-vi/">Part VI – Back to Passing</a><br><a href="http://custardbelly.com/blog/2013/01/17/the-making-of-a-test-driven-grocery-list-application-in-js-part-vii/">Part VII – Remove Item</a><br><a href="http://custardbelly.com/blog/2013/01/22/the-making-of-a-test-driven-grocery-list-application-part-viii/">Part VIII – Bug Fixing</a><br><a href="http://custardbelly.com/blog/2013/02/15/the-making-of-a-test-driven-grocery-list-application-in-js-part-ix/">Part IX – Persistence</a><br><a href="http://custardbelly.com/blog/2013/03/06/the-making-of-a-test-driven-grocery-list-application-in-js-part-x/">Part X – It Lives!</a></p>
<p>Posted in <a href="http://custardbelly.com/blog/category/amd/">AMD</a>, <a href="http://custardbelly.com/blog/category/javascript/">JavaScript</a>, <a href="http://custardbelly.com/blog/category/requirejs/">RequireJS</a>, <a href="http://custardbelly.com/blog/category/grocery-ls/">grocery-ls</a>, <a href="http://custardbelly.com/blog/category/jasmine/">jasmine</a>.</p>
]]></description><link>http://custardbelly.com/blog/blog-posts/2013/03/06/the-making-of-a-test-driven-grocery-list-application-in-js-part-x/index.html</link><guid isPermaLink="true">http://custardbelly.com/blog/blog-posts/2013/03/06/the-making-of-a-test-driven-grocery-list-application-in-js-part-x/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[The Making of a Test-Driven Grocery List Application in JS: Part IX]]></title><description><![CDATA[<p><em>This is the ninth installment in a series of building a Test-Driven Grocery List application using <a href="http://pivotal.github.com/jasmine/">Jasmine</a> and <a href="http://requirejs.org">RequireJS</a>. To learn more about the intent and general concept of the series please visit <a href="http://custardbelly.com/blog/2012/11/26/the-making-of-a-test-driven-grocery-list-application-in-javascript-part-i/">The Making of a Test-Driven Grocery List Application in JavaScript: Part I</a></em><br>—</p>
<h1 id="introduction">Introduction</h1>
<p>In the <a href="http://custardbelly.com/blog/2013/01/22/the-making-of-a-test-driven-grocery-list-application-part-viii/">previous article</a>, we pretty much wrapped up all the user-based functionality and ended with a working <strong>Grocery List</strong> application that we could start using. There is one little snag though… no persistance. If you made this gloriously elaborate list that detailed everything you needed at the store, then closed the browser and reopened it, the list was gone! That will not do.</p>
<p>There are many factors and paradigms to consider in choosing the level of persistence when it comes to handling session and user based applications. Without introducing a discussion about authentication, when approaching the integration persistence you have to take into account system-based vs user-based persistence, client-side vs server-side storage, and – nowadays, more commonly – the cross pollination of the two: <a href="http://en.wikipedia.org/wiki/Occasionally_connected_computing">occasional-connectivity</a>. (<em>not to mention browser support in all this</em>) We won’t be getting into all of that <img src="http://custardbelly.com/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)"> We’ll be using the <code>localStorage</code> of today’s modern browser.</p>
<p>The intent of this article in the series is to implement client-side, browser-based persistence for the <strong>Grocery List</strong> application. It would be nice to store our list remotely so it can be accessed by all browsers on all devices, but I feel it would introduce too many new libraries, software and concepts to this series. I will most likely add it personally after this series is over, and I invite you to as well – keeping in mind to do it using TDD <img src="http://custardbelly.com/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)"> The most I can offer at this point, is to keep the code we will write clean enough to support such future endeavours.</p>
<h1 id="what-tests-to-modify-to-get-us-there-">What Tests to Modify to Get Us There?</h1>
<p>Good question. Let’s first think about what actions will prompt an update to the list in storage. Actually, if we look at the feature specs we have created throughout this series and separated out into the <code>/feature</code> directory itself, we pretty much have all the defined actions that will trigger an update to the stored list:<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_1.png" alt="Spec listing"></p>
<p>All of these features are a result from interacting with the <code>list-controller</code>. My first inkling is to add responsibility to the <code>list-controller</code> so that, along with the other operations it handles in list management, it communicates with a service layer to update the <strong>Grocery List</strong> in storage. However, I think that would add too much burden on the <code>list-controller</code> and, when taking into account that requirements around storage may change, the introduction of such complexity into the <code>list-controller</code> may quickly make our tests feel chaotic.</p>
<p>As such, I propose that we should start off with the expectation that the <code>list-controller</code> will notify of its underlying collection having been modified, not only upon its change in length, but of the items within the collection, as well. We can then capture those events and forward them on to whichever service implementation we have without having to pass that dependency into the <code>list-controller</code> and burdening it with such communication.</p>
<h2 id="new-expectation-for-add-item">New Expectation for Add Item</h2>
<p>To start, let’s add a quick spec to the <em>Add Item</em> feature that defines an expectation from the <code>list-controller</code> to notify when an item has been added:</p>
<p><em>/test/jasmine/spec/feature/additem.spec.js</em></p>
<pre><code>async.it(<span class="hljs-string">'should dispatch a save-item event'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(done)</span> {</span>

  <span class="hljs-keyword">var</span> newItem;



  $(listController).on(<span class="hljs-string">'save-item'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(event)</span> {</span>

    expect(event.item).not.toBeUndefined();

    $(listController).off(<span class="hljs-string">'save-item'</span>);

    done();

  });

  newItem = listController.createNewItem();

});
</code></pre><p>In creating this expectation, we have also begun to define the actual make-up of the event we intend to receive: the event type being <code>save-item</code> and the access of the <code>item</code> that was saved.</p>
<p>Run it and we are red, as expected:<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_2.png" alt="Failing test on add item event response"></p>
<p>Taking what we have defined as our expectation when an item is added, we’ll modify the list-controller to get this passing. First we’ll add a factory method to generate <code>save-item</code> events:</p>
<p><em>/script/controller/list-controller.js</em></p>
<pre><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createSaveEvent</span><span class="hljs-params">(item)</span> {</span>

  <span class="hljs-keyword">var</span> event = $.Event(<span class="hljs-string">'save-item'</span>);

  event.item = item;

  <span class="hljs-keyword">return</span> event;

}
</code></pre><p>Fairly straight-forward and similar to other event factory methods declared previously in this series. Since we are addressing an expectation of event notification on add of item, we know where in the list-controller we can add that dispatch – in response to the addition of an item on the collection:</p>
<p><em>/script/controller/list-controller.js</em></p>
<pre><code>$itemView<span class="hljs-preprocessor">.appendTo</span>(listController.$view)<span class="hljs-comment">;</span>

rendererList<span class="hljs-preprocessor">.addItem</span>(itemController)<span class="hljs-comment">;</span>

$(listController)<span class="hljs-preprocessor">.trigger</span>(createSaveEvent(model))<span class="hljs-comment">;</span>

itemController<span class="hljs-preprocessor">.state</span> = itemControllerFactory<span class="hljs-preprocessor">.state</span><span class="hljs-preprocessor">.EDITABLE</span><span class="hljs-comment">;</span>
</code></pre><p>Back in business.<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_3.png" alt="Passing test on add item event response"></p>
<h2 id="new-expectation-for-remove-item">New Expectation for Remove Item</h2>
<p>Let’s quickly just do a similar modification to the <code>list-controller</code> with regards to the <em>Remove Item</em> feature. First we’ll append a spec in the <em>removeitem.spec</em> suite with an expectation of being notified on <code>remove-item</code>:</p>
<p><em>/test/jasmine/spec/feature/removeitem.spec.js</em></p>
<pre><code>async.it(<span class="hljs-string">'should dispatch a remove-item event'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(done)</span> {</span>

  <span class="hljs-keyword">var</span> removedItem;



  $(listController).on(<span class="hljs-string">'remove-item'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(event)</span> {</span>

    expect(event.item).not.toBeUndefined();

    $(listController).off(<span class="hljs-string">'remove-item'</span>);

    done();

  });

  removedItem = listController.removeItem(groceryItem);

});
</code></pre><p>Sparing you another image of the specrunner turning red, that will fail with the timeout that we saw before. We’ll fix that up by adding a trigger in the removal of an item from the collection handler in <code>list-controller</code>. First with the addition of a factory method for the <code>remove-item</code> event:</p>
<p><em>/script/controller/list-controller.js</em></p>
<pre><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createRemoveEvent</span><span class="hljs-params">(item)</span> {</span>

  <span class="hljs-keyword">var</span> event = $.Event(<span class="hljs-string">'remove-item'</span>);

  event.item = item;

  <span class="hljs-keyword">return</span> event;

}
</code></pre><p>And then with an additional line to the <code>remove</code> response on the collection:</p>
<p><em>/script/controller/list-controller.js</em></p>
<pre><code><span class="hljs-keyword">case</span> EventKindEnum.REMOVE:

  model = <span class="hljs-keyword">event</span>.items.shift();

  itemController = listController.getRendererFromItem(model),

  <span class="hljs-variable">$itemController</span> = <span class="hljs-variable">$(</span>itemController);



  <span class="hljs-keyword">if</span>(itemController) {

    <span class="hljs-variable">$itemView</span> = itemController.parentView;

    <span class="hljs-variable">$itemView</span>.remove();

    itemController.dispose();

    <span class="hljs-variable">$itemController</span>.off(<span class="hljs-string">'remove'</span>);

    <span class="hljs-variable">$itemController</span>.off(<span class="hljs-string">'commit'</span>);

    rendererList.removeItem(itemController);

    <span class="hljs-variable">$(</span>listController).trigger(createRemoveEvent(model));

  }

<span class="hljs-keyword">break</span>;
</code></pre><p>Run the tests, and we are back to passing:<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_4.png" alt="Passing on removal event from list-controller"></p>
<h2 id="new-expectation-for-save-item">New Expectation for Save Item</h2>
<p>Sort of repetitive, but we are on a roll… let’s go through the similar process to ensure that a notification for <code>save-item</code> is dispatched when the user has modified its name and committed it to the list – the <em>Save Item</em> feature we added in the <a href="http://custardbelly.com/blog/2013/01/22/the-making-of-a-test-driven-grocery-list-application-part-viii/">last article</a>.</p>
<p><em>/test/jasmine/spec/feature/saveitem.spec.js</em></p>
<pre><code>async.it(<span class="hljs-string">'should dispatch a save-item event'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(done)</span> {</span>



  $(listController).on(<span class="hljs-string">'save-item'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(event)</span> {</span>

    expect(event.item).toEqual(item);

    $(listController).off(<span class="hljs-string">'save-item'</span>);

    done();

  });



  item.name = itemName;

  itemRenderer.state = itemControllerFactory.state.UNEDITABLE;

});
</code></pre><p>That’ll put us in the red with the same old timeout issue. Getting back to green, we’ll trigger the <code>save-item</code> event upon committal of the item to the list, which if you remember – and is described in the test – is in response to the <code>list-item-controller</code> notifying of change to the item model:</p>
<p><em>/test/jasmine/spec/feature/list-controller.js</em></p>
<pre><code>$<span class="hljs-transposed_variable">itemController.</span>on(<span class="hljs-string">'commit'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(event)</span> {</span>

  <span class="hljs-keyword">if</span>(!isValidValue(<span class="hljs-transposed_variable">model.</span>name)) <span class="hljs-cell">{

    listController.removeItem(model);

  }</span>

  <span class="hljs-keyword">else</span> <span class="hljs-cell">{

    $(listController).trigger(createSaveEvent(model));

  }</span>

});
</code></pre><p>Back to green!<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_5.png" alt="Passing on commital of item form list-item-controller"></p>
<p>The amount of those little dots just keeps growing. Makes you feel all warm inside. Cherish that, ’cause it will go away…</p>
<h3 id="hold-up">Hold Up</h3>
<p>Just stepping back, it may seem a little odd that we are calling <code>save-item</code> when we add and commit the item to the list; after all they are the same item, we do we need to notify on save multiple times? The reason being is that upon any modification to an item – including its existence – the store needs to be modified. We haven’t gotten into the service layer for storage yet, but it will be abstracted out that a response from save-item will be internally handled as whether to append the item (from add) or to update an item already existant (from commit). Until we get to that service layer implementation for <code>localStorage</code>, we’ll go about setting expectations of <code>save-item</code> notification on modification to an item.</p>
<p>Which actually brings up a good point… what about marking off an item? We will need to notify on change of an item being marked off, as well.</p>
<h2 id="new-expectation-for-mark-off-item">New Expectation for Mark-Off Item</h2>
<p>We tackled the <em>Mark-Off Item</em> feature a <a href="http://custardbelly.com/blog/2012/12/06/the-making-of-a-test-driven-grocery-list-application-in-js-part-iii/">while back</a> in this series. Just a quick refresher on the story:</p>
<p><em>// story</em><br>—<br><strong>Story</strong>: Item is marked off on grocery list</p>
<p><strong>In order to</strong> remember what items have already made it to the cart<br><strong>As a</strong> grocery shopper<br><strong>I want to</strong> mark an item as being attained on the grocery list.<br>—</p>
<p>We implemented the feature, and upon user press of the item while in non-edit mode, it toggles its <code>marked</code> property on the model and updates the UI to add or remove a <del>strikethrough</del> on the label.</p>
<p>We’ve got a spec suite for the <em>Mark-Off Item</em> feature already, so we’ll append an expectation for <code>save-item</code> to it just as we have done with the other feature specs in this article:</p>
<p><em>/test/jasmine/spec/feature/markitem.spec.js</em></p>
<pre><code>async.it(<span class="hljs-string">'should dispatch a save-item event'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(done)</span> {</span>



   <span class="hljs-keyword">var</span> timeout = setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

     clearTimeout(timeout);

     $(listController).off(<span class="hljs-string">'save-item'</span>);

   }, jasmine.DEFAULT_TIMEOUT_INTERNAL);



  $(listController).on(<span class="hljs-string">'save-item'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(event)</span> {</span>

    expect(event.item).toBe(item);

    $(listController).off(<span class="hljs-string">'save-item'</span>);

    done();

  });



  item.marked = <span class="hljs-literal">true</span>;

});
</code></pre><p>… and that will bring us back to failing.<br>The <code>timeout</code> placed in there is just to ensure that listener(s) to the <code>save-item</code> event are removed regardless of the async test timing out.</p>
<p>The resolution to the issue is a trickier one than those of the previous in this article, however. Currently the <code>list-item-controller</code> is the only component that actually concerned with this change in marked status. It is not concerned with notifying any other party of the change to its model. The model does, however, notify of any property changes. I see two ways in which we can get back to passing:</p>
<ol>
<li>Assign a handler for <code>property-change</code> on model when it is first created and returned from <code>listController.createNewItem()</code></li>
<li>Dispatch a <code>commit</code> event from <code>list-item-controller</code> on change to <code>marked</code> property on the underlying model</li>
</ol>
<p>While both options will most likely get us where we need to be, the former adds additional management to the <code>list-controller</code>; its already listening in on <code>commit</code> from its <code>list-item-controller</code> instance, so modifying the <code>list-item-controller</code> to notify of change to the <code>marked</code> property seems to be the path of least resistance.</p>
<p>We had previously set up the <code>commit</code> notification on response from leaving the <code>EDITABLE</code> state of the <code>list-item-controller</code>:</p>
<p><em>/script/controller/list-item-controller.js</em></p>
<pre><code>// append state-based item.

if(event<span class="hljs-preprocessor">.newState</span> === stateEnum<span class="hljs-preprocessor">.UNEDITABLE</span>) {

  controller<span class="hljs-preprocessor">.parentView</span><span class="hljs-preprocessor">.append</span>(controller.$uneditableView)<span class="hljs-comment">;</span>

  controller<span class="hljs-preprocessor">.save</span>()<span class="hljs-comment">;</span>

}
</code></pre><p>That implementation got us to passing previously in which we described the expectation of a user committing an item to the list with a valid name (un-empty string). Our issue at hand is to also invoke the <code>save()</code> method on <code>list-item-controller</code> when the <code>marked</code> property is modified. In thinking about it now, while the committal of an item is tied to the change of state, it runs a validation on the <code>name</code> property to ensure that the item can be added/kept in the collection – so, in actuality <code>commit</code> can be tied to property updates to the item model.</p>
<p>As such, let’s remove line <code>48</code> from the above snippet and insert the invocation of <code>save()</code> to the handler in <code>list-item-controller</code> for <code>property-change</code> on the model:</p>
<p><em>/script/controller/list-item-controller.js</em></p>
<pre><code>$(<span class="hljs-keyword">this</span>.model).on(<span class="hljs-string">'property-change'</span>, (<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(controller)</span> {</span>

  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(event)</span> {</span>

    handlePropertyChange.call(<span class="hljs-literal">null</span>, controller, event);

    controller.save();

  };

}(<span class="hljs-keyword">this</span>)));
</code></pre><p>Run the specrunner again…<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_5_fail.png" alt="We broke it"></p>
<p>… and we broke it <img src="http://custardbelly.com/blog/wp-includes/images/smilies/icon_sad.gif" alt=":("></p>
<p>The reason for those X’s is due to the logic we have held in <code>list-controller</code> on save of an item: it checks it’s <code>name</code> property and removes it from the list if considered an invalid value – which an empty string is.</p>
<p>I sense some modification to such logic in the future, but for now we can get the tests back to passing by providing a <code>name</code> property value to the created item in our mark-item spec:</p>
<p>/tests/jasmine/spec/feature/markitem.spec.js</p>
<pre><code>beforeEach( <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  item = listController.createNewItem();

  item.name = <span class="hljs-string">'apples'</span>;

});
</code></pre><p><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_6.png" alt="Passing on model property update"></p>
<p>We’re green!</p>
<p>Tagged <strong>0.1.13</strong>: <a href="https://github.com/bustardcelly/grocery-ls/tree/0.1.13"><a href="https://github.com/bustardcelly/grocery-ls/tree/0.1.13">https://github.com/bustardcelly/grocery-ls/tree/0.1.13</a></a></p>
<h3 id="settle-down">Settle Down</h3>
<p>We have verified our expectations of <code>save-item</code> and <code>remove-item</code> events being dispatched from <code>list-controller</code> – new and model updates issuing the former, removal issuing the later. The work we have done was to separate concerns and not burden the <code>list-controller</code> itself with service communication for persisting the <strong>Grocery List</strong> items across browser sessions, but we have yet to address the actual service layer implementation that will take all these notifications.</p>
<h2 id="storage-service">Storage Service</h2>
<p>The <code>storage-service</code> will provide a service layer for communication with storage – whether that be remote or local. It will serve as a facade to an existing storage of grocery list items persisted somewhere other than the current application session. For the purposes of this article, that persistence layer is going to be the <code>localStorage</code> of the browser.</p>
<p>While fleshing out the storage service and its API, we’ll <em>loosely</em> use the technique of <a href="http://coderetreat.org/facilitating/activities/tdd-as-if-you-meant-it">‘TDD as if you meant it’</a>. I say <em>loosely</em> in part because to fully do it and explain each step would be a lot of noise for this article; the main practice point to take away – and I hope I express – is that the component you are testing is actually being built while you make the expectations for it pass.</p>
<h3 id="tests">Tests</h3>
<p>To start, we’ll create a bare-bones module for our service layer:</p>
<p><em>/script/service/storage-service</em></p>
<pre><code>define([<span class="hljs-string">'jquery'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($)</span> {</span>



  <span class="hljs-keyword">var</span> store = {};

  <span class="hljs-keyword">return</span> store;



});
</code></pre><p>And let’s create the beginnings of our test:</p>
<p><em>/test/jasmine/spec/storage-service.spec.js</em></p>
<pre><code>define([<span class="hljs-string">'jquery'</span>, <span class="hljs-string">'script/service/storage-service'</span>, <span class="hljs-string">'script/model/grocery-ls-item'</span>],

        <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($, store, modelFactory)</span> {</span>



  describe(<span class="hljs-string">'Grocery List storage-service'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>



    describe(<span class="hljs-string">'getItems()'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>



      it(<span class="hljs-string">'should return of type array'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

        expect(<span class="hljs-literal">false</span>).toEqual(<span class="hljs-literal">true</span>);

      });



      it(<span class="hljs-string">'should return array of grocery-ls-item types'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

        expect(<span class="hljs-literal">false</span>).toEqual(<span class="hljs-literal">true</span>);

      });



    });



  });



});
</code></pre><p>In the test we have set up some tests for the <code>getItems()</code> method for the service. Prior to any implementation, it should be known that communication with the <code>storage-service</code> will be considered asynchronous – meaning all operations will return a <a href="http://api.jquery.com/category/deferred-object/">jQuery Deferred</a>. This will abstract out the storage proxy that will be employed by the <code>storage-service</code> and will respond in an asynchronous manner regardless of whether the store is immediately accessible – as in the case of <code>localStorage</code> – or remote.</p>
<p>Truthfully, in practice, I should only do one tests at a time, but we are testing the expectations for access of the same item listing; to save you from reading the ramblings of adding another test, I declared them both at the start.</p>
<p>Let’s stub out the API and start testing and building the <code>storage-service</code>:</p>
<p><em>/test/jasmine/spec/storage-service.spec.js</em></p>
<pre><code><span class="hljs-function">describe(<span class="hljs-string">'getItems()'</span>, <span class="hljs-function">function()</span> {



  var items,

      itemOne = modelFactory.<span class="hljs-function">create()</span>,

      itemTwo = modelFactory.<span class="hljs-function">create()</span>,

      async = new <span class="hljs-function">AsyncSpec(this)</span>;



  async.<span class="hljs-function">beforeEach( <span class="hljs-function">function(done)</span> {

    var deferred = $.<span class="hljs-function">Deferred()</span>,

        getStub = sinon.<span class="hljs-function">stub()</span>.<span class="hljs-function">returns(deferred)</span>;



    deferred.<span class="hljs-function">resolve([itemOne, itemTwo])</span>;

    store.getItems = getStub;



    store.<span class="hljs-function">getItems()</span>.<span class="hljs-function">then(<span class="hljs-function">function(list)</span> {

      items = list;

      <span class="hljs-function">done()</span>;

    })</span>;

  })</span>;



  <span class="hljs-function">afterEach( <span class="hljs-function">function()</span> {

    //

  })</span>;



  <span class="hljs-function">it(<span class="hljs-string">'should return of type array'</span>, <span class="hljs-function">function()</span> {

    <span class="hljs-function">expect(Array.<span class="hljs-function">isArray(items)</span>)</span>.<span class="hljs-function">toEqual(true)</span>;

    <span class="hljs-function">expect(items.length)</span>.<span class="hljs-function">toEqual(<span class="hljs-number">2</span>)</span>;

  })</span>;



  <span class="hljs-function">it(<span class="hljs-string">'should return array of grocery-ls-item types'</span>, <span class="hljs-function">function()</span> {

    <span class="hljs-function">expect(items[<span class="hljs-number">0</span>])</span>.<span class="hljs-function">toBe(itemOne)</span>;

    <span class="hljs-function">expect(items[<span class="hljs-number">1</span>])</span>.<span class="hljs-function">toBe(itemTwo)</span>;

  })</span>;



})</span>;
</code></pre><p>In the <code>beforeEach()</code>, we’re using anonymous stubs from <a href="http://sinonjs.org/">SinonJS</a>, which allow us to stub out methods that may not necessarily already exist on an object. I have used it previously in this series, but we’ll be using it pretty much exclusively while we stub out the API for the <code>storage-service</code>.</p>
<p>Staying true to our idea that the service will provide an asynchronous communication layer, <code>getItems()</code> returns a deferred which has resolved to a listing of two <code>grocery-ls-item</code> instances in our tests.</p>
<p>Sometimes when working with a single feature, I like to isolate it out from my tests for a bit. Here is what the specrunner reports with running just <strong>storage-service.spec</strong>:<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_7.png" alt="Passing on succss of getItems() in service"></p>
<p>We could move that implementation to <code>storage-service</code> module now, but we are sort of in a <a href="http://en.wikipedia.org/wiki/Chicken_or_the_egg">chicken-or-the-egg</a> scenario. We’ve canned the resolved <code>grocery-ls-item</code> list in the test, but how does the list get filled up in an actual scenario for <code>storage-service</code>? It’s an excellent question, and something I often puzzle myself with. I mean, we’ll need a <code>saveItem()</code> method no doubt in order to add items to the store. But shouldn’t that method now be stubbed out in a new test? And how do I test that <code>saveItem()</code> works without <code>getItems()</code> being already tested and verified? I could go in circles…</p>
<p>Let’s just stub out an <code>saveItem()</code> method on <code>storage-service</code> and, afterward, set expectations in another spec suite:</p>
<p><em>/test/jasmine/spec/storage-service.spec.js</em></p>
<pre><code>async<span class="hljs-preprocessor">.beforeEach</span>( function(done) {

  var <span class="hljs-keyword">call</span> = <span class="hljs-number">0</span>,

      tempList = [],

      deferred = $<span class="hljs-preprocessor">.Deferred</span>(),

      getStub = sinon<span class="hljs-preprocessor">.stub</span>()<span class="hljs-preprocessor">.returns</span>(deferred),

      saveStub = sinon<span class="hljs-preprocessor">.stub</span>()<span class="hljs-preprocessor">.callsArgOn</span>(<span class="hljs-number">0</span>, store),

      appendItem = function() {

        tempList<span class="hljs-preprocessor">.push</span>((<span class="hljs-keyword">call</span>++%<span class="hljs-number">2</span> === <span class="hljs-number">0</span>) ? itemOne : itemTwo)<span class="hljs-comment">;</span>

      }<span class="hljs-comment">;</span>



  store<span class="hljs-preprocessor">.saveItem</span> = saveStub<span class="hljs-comment">;</span>

  store<span class="hljs-preprocessor">.getItems</span> = getStub<span class="hljs-comment">;</span>



  store<span class="hljs-preprocessor">.saveItem</span>(appendItem)<span class="hljs-comment">;</span>

  store<span class="hljs-preprocessor">.saveItem</span>(appendItem)<span class="hljs-comment">;</span>

  store<span class="hljs-preprocessor">.getItems</span>()<span class="hljs-preprocessor">.then</span>(function(list) {

    items = list<span class="hljs-comment">;</span>

    done()<span class="hljs-comment">;</span>

  })<span class="hljs-comment">;</span>

  deferred<span class="hljs-preprocessor">.resolve</span>(tempList)<span class="hljs-comment">;</span>

})<span class="hljs-comment">;</span>
</code></pre><p>With these modifications, we have assigned an anonymous stub – <code>saveStub</code> – as the <code>saveItem</code> method on the <code>store</code> and specified that the function-local <code>appendItem</code> method should be invoked, appending items to the list prior to each of our tests. </p>
<p>A little more work in setup and slightly unrealistic in telling of the arguments to be given to <code>saveItem()</code>, but it kept us on green without having to hard code the result; it’s a litte truer to life than the previous setup, and still passes:</p>
<p><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_7.png" alt="Passing on succss of getItems() in service"></p>
<h3 id="implementation">Implementation</h3>
<p>Alright, so I think we should move this out to <code>storage-service</code> now and trash the stubbing in the test – we’ve got our expectations:</p>
<p><em>/script/service/storage-service.js</em></p>
<pre><code>define([<span class="hljs-string">'jquery'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($)</span> {</span>



  <span class="hljs-keyword">var</span> itemCache = [],

      store = {

        saveItem: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>

          <span class="hljs-keyword">var</span> deferred = $.Deferred();

          itemCache[itemCache.length] = item;

          <span class="hljs-keyword">return</span> deferred.resolve(item);

        },

        getItems: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

          <span class="hljs-keyword">var</span> deferred = $.Deferred();

          deferred.resolve(itemCache);

          <span class="hljs-keyword">return</span> deferred;

        }

      };



  <span class="hljs-keyword">return</span> store;



});
</code></pre><p><em>/test/jasmine/spec/storage-service.spec.js</em></p>
<pre><code><span class="hljs-function">describe(<span class="hljs-string">'getItems()'</span>, <span class="hljs-function">function()</span> {



  var items,

      itemOne = modelFactory.<span class="hljs-function">create()</span>,

      itemTwo = modelFactory.<span class="hljs-function">create()</span>,

      async = new <span class="hljs-function">AsyncSpec(this)</span>;



  async.<span class="hljs-function">beforeEach( <span class="hljs-function">function(done)</span> {

    store.<span class="hljs-function">saveItem(itemOne)</span>;

    store.<span class="hljs-function">saveItem(itemTwo)</span>;

    store.<span class="hljs-function">getItems()</span>.<span class="hljs-function">then(<span class="hljs-function">function(value)</span> {

      items = value;

      <span class="hljs-function">done()</span>;

    })</span>;

  })</span>;



  <span class="hljs-function">afterEach( <span class="hljs-function">function()</span> {

    //

  })</span>;



  <span class="hljs-function">it(<span class="hljs-string">'should return of type array'</span>, <span class="hljs-function">function()</span> {

    <span class="hljs-function">expect(Array.<span class="hljs-function">isArray(items)</span>)</span>.<span class="hljs-function">toEqual(true)</span>;

    <span class="hljs-function">expect(items.length)</span>.<span class="hljs-function">toEqual(<span class="hljs-number">2</span>)</span>;

  })</span>;



  <span class="hljs-function">it(<span class="hljs-string">'should return array of grocery-ls-item types'</span>, <span class="hljs-function">function()</span> {

    <span class="hljs-function">expect(items[<span class="hljs-number">0</span>])</span>.<span class="hljs-function">toBe(itemOne)</span>;

    <span class="hljs-function">expect(items[<span class="hljs-number">1</span>])</span>.<span class="hljs-function">toBe(itemTwo)</span>;

  })</span>;



})</span>;
</code></pre><p>Run that, and we are still green!<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_7.png" alt="Passing on succss of getItems() in service"></p>
<h3 id="tests">Tests</h3>
<p>Now that we can verify that <code>saveItem()</code> is working enough for our <code>getItem</code> spec, let’s properly set the expectations for <code>saveItem</code>, as well, in our tests:</p>
<p><em>/test/jasmine/spec/storage-service.spec.js</em></p>
<pre><code>describe(<span class="hljs-string">'saveItem()'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>



  <span class="hljs-keyword">var</span> itemOne = modelFactory.create(),

      itemTwo = modelFactory.create(),

      async = <span class="hljs-keyword">new</span> AsyncSpec(<span class="hljs-keyword">this</span>);



  beforeEach( <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

    store.saveItem(itemOne);

  });



  afterEach( <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

    <span class="hljs-comment">//</span>

  });



  async.it(<span class="hljs-string">'should be grow the length of items'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(done)</span> {</span>

    store.getItems().then( <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(items)</span> {</span>

      expect(items.length).toEqual(<span class="hljs-number">1</span>);

      done();

    });

  });



});
</code></pre><p>Simple enough. Back to the specrunner:<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_8.png" alt="Failing on saveItem of storage-service"></p>
<p>Oh noes! Our expectation is that the length of items is only 1. We have only specified one addition of an item in the setup… where did the length of 5 come from!? Put down the abacus – there are better things to throw. But before that, I have an explanation: we haven’t been cleaning up. We have let <code>afterEach()</code> just quietly be invoked without a job to do.</p>
<p>To do just enough in getting our tests pass, we can update the <code>afterEach()</code> declarations in each spec suite to the following:</p>
<pre><code><span class="hljs-transposed_variable">async.</span>afterEach( <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(done)</span> {</span>

  <span class="hljs-transposed_variable">store.</span>getItems().<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(items)</span> {</span>

    <span class="hljs-transposed_variable">items.</span><span class="hljs-built_in">length</span> = <span class="hljs-number">0</span>;

    done();

  });

});
</code></pre><p>That will get us back to passing:<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_9.png" alt="Passing on saveItem spec."></p>
<p>I am not particularly fond of that solution, however. Mainly because I think it conveys a usage of the API on <code>storage-service</code> that I would not condone: directly mutating the underlying list of <code>storage-service</code> from another party. </p>
<p>I’m not gonna get crazy with the lock-down and privacy of properties and start introducing the latest-and-greatest framework that tries to tout that they really are just a library all in the attempt to stop someone from directly accessing the underlying array of items on <code>storage-service</code>. If some developers gonna go crazy and do so, hopefully we can find it in more tests later or they can look at our tests as a guideline of how to do what they want. </p>
<p>As such, I think we should add a method to <code>storage-service</code> that simply allows for emptying the list. First the expectation:</p>
<p><em>/test/jasmine/spec/storage-service.spec.js</em></p>
<pre><code><span class="hljs-function">describe(<span class="hljs-string">'empty()'</span>, <span class="hljs-function">function()</span> {



  var itemOne = modelFactory.<span class="hljs-function">create()</span>,

      itemTwo = modelFactory.<span class="hljs-function">create()</span>,

      async = new <span class="hljs-function">AsyncSpec(this)</span>;



  <span class="hljs-function">beforeEach( <span class="hljs-function">function()</span> {

    store.<span class="hljs-function">saveItem(itemOne)</span>;

    store.<span class="hljs-function">saveItem(itemTwo)</span>;

  })</span>;



  <span class="hljs-function">afterEach( <span class="hljs-function">function()</span> {

    store.<span class="hljs-function">empty()</span>;

  })</span>;



  async.<span class="hljs-function">it(<span class="hljs-string">'should be appended to the list of items'</span>, <span class="hljs-function">function(done)</span> {

    store.<span class="hljs-function">empty()</span>.<span class="hljs-function">then( <span class="hljs-function">function(items)</span> {

      <span class="hljs-function">expect(items.length)</span>.<span class="hljs-function">toEqual(<span class="hljs-number">0</span>)</span>;

      <span class="hljs-function">done()</span>;

    })</span>;

  })</span>;



})</span>;
</code></pre><p><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_10.png" alt="Failing on empty()"></p>
<p><em>/script/service/storage-service.js</em></p>
<pre><code>define([<span class="hljs-string">'jquery'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($)</span> {</span>



  <span class="hljs-keyword">var</span> itemCache = [],

      store = {

        saveItem: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>

          <span class="hljs-keyword">var</span> deferred = $.Deferred();

          itemCache[itemCache.length] = item;

          <span class="hljs-keyword">return</span> deferred.resolve(item);

        },

        getItems: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

          <span class="hljs-keyword">var</span> deferred = $.Deferred();

          deferred.resolve(itemCache);

          <span class="hljs-keyword">return</span> deferred;

        },

        empty: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

          <span class="hljs-keyword">var</span> deferred = $.Deferred();

          itemCache.length = <span class="hljs-number">0</span>;

          deferred.resolve(itemCache);

          <span class="hljs-keyword">return</span> deferred;

        }

      };



  <span class="hljs-keyword">return</span> store;

});
</code></pre><p><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_11.png" alt="Passing on empty()"></p>
<p>Alright! We are passing expectations on three parts of the API for <code>storage-service</code>. Now let’s think of what else we need… I think only a <code>removeItem()</code> method will suffice. In working as we have previously in this article – stubbing out methods to be added to the <code>storage-service</code> implementation – we can add a spec suite for <code>removeItem()</code> such as the following:</p>
<p><em>/test/jasmine/spec/storage-service.spec.js</em></p>
<pre><code><span class="hljs-function">describe(<span class="hljs-string">'removeItem()'</span>, <span class="hljs-function">function()</span> {



  var items,

      itemOne = modelFactory.<span class="hljs-function">create()</span>,

      itemTwo = modelFactory.<span class="hljs-function">create()</span>,

      async = new <span class="hljs-function">AsyncSpec(this)</span>,

      deferred = $.<span class="hljs-function">Deferred()</span>,

      removeItemFromList = <span class="hljs-function">function()</span> {

        deferred.<span class="hljs-function">resolve(items.<span class="hljs-function">splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)</span>)</span>;

      };



  async.<span class="hljs-function">beforeEach( <span class="hljs-function">function(done)</span> {

    var removeItemStub = sinon.<span class="hljs-function">stub()</span>.<span class="hljs-function">returns(deferred)</span>.<span class="hljs-function">callsArgOn(<span class="hljs-number">0</span>, store)</span>;



    store.<span class="hljs-function">saveItem(itemOne)</span>;

    store.<span class="hljs-function">saveItem(itemTwo)</span>;

    store.removeItem = removeItemStub;

    store.<span class="hljs-function">getItems()</span>.<span class="hljs-function">then( <span class="hljs-function">function(value)</span> {

      items = value;

      <span class="hljs-function">done()</span>;

    })</span>;

  })</span>;



  <span class="hljs-function">afterEach( <span class="hljs-function">function()</span> {

    store.<span class="hljs-function">empty()</span>;

  })</span>;



  async.<span class="hljs-function">it(<span class="hljs-string">'should shorten length of the list'</span>, <span class="hljs-function">function(done)</span> {

    store.<span class="hljs-function">removeItem(removeItemFromList)</span>.<span class="hljs-function">then( <span class="hljs-function">function(item)</span> {

      store.<span class="hljs-function">getItems()</span>.<span class="hljs-function">then( <span class="hljs-function">function(items)</span> {

        <span class="hljs-function">expect(items.length)</span>.<span class="hljs-function">toEqual(<span class="hljs-number">1</span>)</span>;

        <span class="hljs-function">done()</span>;

      })</span>;

    })</span>;

  })</span>;



})</span>;
</code></pre><p><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_12.png" alt="Passing on initial removeItem()"></p>
<p>I think there are more expectations to assert for the <code>removeItem()</code> spec suite, but for now we are passing and we’ll move the implementation over to <code>storage-service</code>:</p>
<p><em>/script/service/storage-service.js</em></p>
<pre><code>define([<span class="hljs-string">'jquery'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($)</span> {</span>



  <span class="hljs-keyword">var</span> itemCache = [],

      store = {

        saveItem: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>

          <span class="hljs-keyword">var</span> deferred = $.Deferred();

          itemCache[itemCache.length] = item;

          <span class="hljs-keyword">return</span> deferred.resolve(item);

        },

        removeItem: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>

          <span class="hljs-keyword">var</span> deferred = $.Deferred(),

              itemIndex = itemCache.indexOf(item),

              removedItem;



          <span class="hljs-keyword">if</span>(itemIndex &gt; -<span class="hljs-number">1</span>) {

            itemCache.splice(itemIndex, <span class="hljs-number">1</span>);

            removedItem = item;

          }

          <span class="hljs-keyword">return</span> deferred.resolve(removedItem);

        },

        getItems: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

          <span class="hljs-keyword">var</span> deferred = $.Deferred();

          deferred.resolve(itemCache);

          <span class="hljs-keyword">return</span> deferred;

        },

        empty: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

          <span class="hljs-keyword">var</span> deferred = $.Deferred();

          itemCache.length = <span class="hljs-number">0</span>;

          deferred.resolve(itemCache);

          <span class="hljs-keyword">return</span> deferred;

        }

      };



  <span class="hljs-keyword">return</span> store;



});
</code></pre><p>Now, we’ll update the spec suite for <code>removeItem()</code> and add a few more expectations to ensure the item removal process is correct:</p>
<p><em>/test/jasmine/spec/storage-service.spec.js</em></p>
<pre><code><span class="hljs-function">describe(<span class="hljs-string">'removeItem()'</span>, <span class="hljs-function">function()</span> {



  var itemOne = modelFactory.<span class="hljs-function">create()</span>,

      itemTwo = modelFactory.<span class="hljs-function">create()</span>,

      async = new <span class="hljs-function">AsyncSpec(this)</span>;



  <span class="hljs-function">beforeEach( <span class="hljs-function">function()</span> {

    itemOne.name = <span class="hljs-string">'one'</span>;

    store.<span class="hljs-function">saveItem(itemOne)</span>;

    store.<span class="hljs-function">saveItem(itemTwo)</span>;

  })</span>;



  <span class="hljs-function">afterEach( <span class="hljs-function">function()</span> {

    store.<span class="hljs-function">empty()</span>;

  })</span>;



  async.<span class="hljs-function">it(<span class="hljs-string">'should shorten length of the list'</span>, <span class="hljs-function">function(done)</span> {

    store.<span class="hljs-function">removeItem(itemOne)</span>.<span class="hljs-function">then( <span class="hljs-function">function(item)</span> {

      store.<span class="hljs-function">getItems()</span>.<span class="hljs-function">then( <span class="hljs-function">function(items)</span> {

        <span class="hljs-function">expect(items.length)</span>.<span class="hljs-function">toEqual(<span class="hljs-number">1</span>)</span>;

        <span class="hljs-function">done()</span>;

      })</span>;

    })</span>;

  })</span>;



  async.<span class="hljs-function">it(<span class="hljs-string">'should remove item specified from the list'</span>, <span class="hljs-function">function(done)</span> {

    store.<span class="hljs-function">removeItem(itemOne)</span>.<span class="hljs-function">then( <span class="hljs-function">function(item)</span> {

      store.<span class="hljs-function">getItems()</span>.<span class="hljs-function">then( <span class="hljs-function">function(items)</span> {

        <span class="hljs-function">expect(items.<span class="hljs-function">indexOf(itemOne)</span>)</span>.<span class="hljs-function">toEqual(-<span class="hljs-number">1</span>)</span>;

        <span class="hljs-function">done()</span>;

      })</span>;

    })</span>;

  })</span>;



  async.<span class="hljs-function">it(<span class="hljs-string">'should return the item removed if found'</span>, <span class="hljs-function">function(done)</span> {

    store.<span class="hljs-function">removeItem(itemOne)</span>.<span class="hljs-function">then( <span class="hljs-function">function(item)</span> {

      <span class="hljs-function">expect(item)</span>.<span class="hljs-function">toEqual(itemOne)</span>;

      <span class="hljs-function">done()</span>;

    })</span>;

  })</span>;



  async.<span class="hljs-function">it(<span class="hljs-string">'should return undefined if item not found'</span>, <span class="hljs-function">function(done)</span> {

    store.<span class="hljs-function">removeItem(modelFactory.<span class="hljs-function">create()</span>)</span>.<span class="hljs-function">then( <span class="hljs-function">function(item)</span> {

      <span class="hljs-function">expect(item)</span>.<span class="hljs-function">toBeUndefined()</span>;

      <span class="hljs-function">done()</span>;

    })</span>;

  })</span>;



})</span>;
</code></pre><p>… and we’re still in business!<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_13.png" alt="Complete and passing removeItem specs"></p>
<h3 id="revisiting-saveitem-">Revisiting saveItem()</h3>
<p>When we setup the <code>saveItem</code> stub for our <code>getItem()</code> spec suite, we really only focused on getting the expectations to pass. To get back to green – at the time – we were only concerned with appending items to the list. I think this needs to be looked at again.</p>
<p>If we remember back to the notifications we set up for the <code>list-controller</code>, it will dispatch a <code>save-item</code> event upon the existence of a new item, as well as the modification to an existing item. So we will pass that item through the <code>storage-service</code> using <code>saveItem()</code> but we don’t want to continually append items that are previously stored to the list – if so, we’d be buying a lot of <del>spinich</del> <del>spinnash</del> spinach.</p>
<p>Normally I wouldn’t cut corners: a feature spec should be written up for what I have described here prior to modifying the tests. To save you some scrolling, however, I decided to not include walking through one and letting the expectations that we define in the following speak for the specification.</p>
<p><em>/test/jasmine/spec/storage-service.spec.js</em></p>
<pre><code><span class="hljs-function">describe(<span class="hljs-string">'saveItem()'</span>, <span class="hljs-function">function()</span> {



  var itemOne = modelFactory.<span class="hljs-function">create()</span>,

      itemTwo = modelFactory.<span class="hljs-function">create()</span>,

      async = new <span class="hljs-function">AsyncSpec(this)</span>;



  <span class="hljs-function">beforeEach( <span class="hljs-function">function()</span> {

    store.<span class="hljs-function">saveItem(itemOne)</span>;

  })</span>;



  <span class="hljs-function">afterEach( <span class="hljs-function">function()</span> {

    store.<span class="hljs-function">empty()</span>;

  })</span>;



  async.<span class="hljs-function">it(<span class="hljs-string">'should grow the length of items on new item'</span>, <span class="hljs-function">function(done)</span> {

    store.<span class="hljs-function">getItems()</span>.<span class="hljs-function">then( <span class="hljs-function">function(items)</span> {

      <span class="hljs-function">expect(items.length)</span>.<span class="hljs-function">toEqual(<span class="hljs-number">1</span>)</span>;

      <span class="hljs-function">done()</span>;

    })</span>;

  })</span>;



  async.<span class="hljs-function">it(<span class="hljs-string">'should not grow the length of items on pre-existing item'</span>, <span class="hljs-function">function(done)</span> {

    itemOne.name = <span class="hljs-string">'oranges'</span>;

    store.<span class="hljs-function">saveItem(itemOne)</span>.<span class="hljs-function">then( <span class="hljs-function">function(item)</span> {

      store.<span class="hljs-function">getItems()</span>.<span class="hljs-function">then( <span class="hljs-function">function(items)</span> {

        <span class="hljs-function">expect(items.length)</span>.<span class="hljs-function">toEqual(<span class="hljs-number">1</span>)</span>;

        <span class="hljs-function">done()</span>;

      })</span>;

    })</span>;

  })</span>;



})</span>;
</code></pre><p>We modified the description of the original expectation to state that the items list should only grow on new existence and added a new expectation that previously stored items do not get appended to the stored list:</p>
<p><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_14.png" alt="Failing update to saveItem() specs."></p>
<p>As expected <img src="http://custardbelly.com/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)"> Let’s update <code>saveItem()</code> on the <code>storage-service</code> to account for this:</p>
<p><em>/script/service/storage-service.js</em></p>
<pre><code><span class="hljs-attribute">saveItem</span>: <span class="hljs-string">function(item) {</span>

<span class="applescript">  var deferred = $.Deferred(),

      index = itemCache.indexOf(<span class="hljs-property">item</span>);

  <span class="hljs-keyword">if</span>(index === -<span class="hljs-number">1</span>) {

    itemCache[itemCache.<span class="hljs-property">length</span>] = <span class="hljs-property">item</span>;

  }
<span class="hljs-command">
  return</span> deferred.resolve(<span class="hljs-property">item</span>);

}</span>
</code></pre><p><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_15.png" alt="Passing on new expectation for saveItem()"></p>
<p>Not leaving any to chance, let’s add a couple more expectations as to how items are placed and how they remain in their places:</p>
<p><em>/test/jasmine/spec/storage-service.spec.js</em></p>
<pre><code><span class="hljs-function">describe(<span class="hljs-string">'saveItem() multiples'</span>, <span class="hljs-function">function()</span> {



  var itemOne = modelFactory.<span class="hljs-function">create()</span>,

      itemTwo = modelFactory.<span class="hljs-function">create()</span>,

      async = new <span class="hljs-function">AsyncSpec(this)</span>;



  <span class="hljs-function">beforeEach( <span class="hljs-function">function()</span> {

    store.<span class="hljs-function">saveItem(itemOne)</span>;

    store.<span class="hljs-function">saveItem(itemTwo)</span>;

  })</span>;



  <span class="hljs-function">afterEach( <span class="hljs-function">function()</span> {

    store.<span class="hljs-function">empty()</span>;

  })</span>;



  async.<span class="hljs-function">it(<span class="hljs-string">'should append new items to the end of the list'</span>, <span class="hljs-function">function(done)</span> {

    store.<span class="hljs-function">getItems()</span>.<span class="hljs-function">then( <span class="hljs-function">function(items)</span> {

      <span class="hljs-function">expect(items[items.length-<span class="hljs-number">1</span>])</span>.<span class="hljs-function">toBe(itemTwo)</span>;

      <span class="hljs-function">done()</span>;

    })</span>;

  })</span>;



  async.<span class="hljs-function">it(<span class="hljs-string">'should update existing item at position'</span>, <span class="hljs-function">function(done)</span> {

    itemOne.name = <span class="hljs-string">'oranges'</span>;

    store.<span class="hljs-function">saveItem(itemOne)</span>.<span class="hljs-function">then( <span class="hljs-function">function(item)</span> {

      store.<span class="hljs-function">getItems()</span>.<span class="hljs-function">then( <span class="hljs-function">function(items)</span> {

        <span class="hljs-function">expect(items.<span class="hljs-function">indexOf(itemOne)</span>)</span>.<span class="hljs-function">toEqual(<span class="hljs-number">0</span>)</span>;

        <span class="hljs-function">done()</span>;

      })</span>;

    })</span>;

  })</span>;



})</span>;
</code></pre><p>I had begun to add these expectations for multiple items in the list to the <code>saveItem()</code> spec suite, but I saw a similar setup for them both that differed from the origin setup for the <code>saveItem()</code> suite. As such, I moved these expectations to their own spec suite and particular setup.</p>
<p>Without any new modification to <code>storage-service</code> implementation, run that and we are still green!<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_16.png" alt="Passing with new expectations for saveItem()"></p>
<p>Tagged <strong>0.1.14</strong>: <a href="https://github.com/bustardcelly/grocery-ls/tree/0.1.14"><a href="https://github.com/bustardcelly/grocery-ls/tree/0.1.14">https://github.com/bustardcelly/grocery-ls/tree/0.1.14</a></a></p>
<h2 id="this-is-all-great-but-we-still-haven-t-done-anything">This Is All Great But We Still Haven’t Done Anything</h2>
<p>In other words, what this subsection header is trying to say, the <code>storage-service</code> – even after we hook up communication to it from <code>list-controller</code> events – will do <em>nothing</em> but keep a session-cache of items: <strong>there still is no persistence across sessions</strong>.</p>
<p>Seeing as this is the case, let’s start integrating communication with <code>localStorage</code> into our <code>storage-service</code>. I am not going to modify the tests in order to verify the utilization of <code>localStorage</code> in relation to the operations available on <code>storage-service</code> – I am simply going to modify the <code>storage-service</code> and posible change expectations. The reason being that I do not really care about whether the storage-service relies on <code>localStorage</code> or a remote resource to read and write items to storage; I am only concerned with communication to <code>storage-service</code> being supported. </p>
<p>In truth, if this were a real world application and had to support occasional connectivity, i’d have two service modules: local-storage-service and remove-storage-service. They would both support the same API and there would be a service layer facade that would manage the ‘live’ instance and sync of both. That is a little too much for this series, so we’ll stick with a proxy to <code>localStorage</code> without modifying our tests to assume that the <code>storage-service</code> requires communication with it.</p>
<h3 id="storage-service-modification">storage-service modification</h3>
<p>To begin with, a <code>String</code> value is used as a key to read and write to an object held on <a href="https://developer.mozilla.org/en-US/docs/DOM/Storage">localStorage</a>. The API of <code>localStorage</code> is fairly simple and we’ll only be concerned with <code>getItem()</code> and <code>setItem()</code> to read and write to the store, respectively. We’ll use a key that we hope is unique to our application and won’t overwrite any object stored previously by another and use that key to access the stored grocery list items:</p>
<p><em>/script/service/storage-service.js</em></p>
<pre><code>define([<span class="hljs-string">'jquery'</span>, <span class="hljs-string">'script/model/grocery-ls-item'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($, modelFactory)</span> {</span>



  <span class="hljs-keyword">var</span> itemCache,

      groceryListKey = <span class="hljs-string">'com.custardbelly.grocerylist'</span>,

      parseToCollection = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(json)</span> {</span>

        <span class="hljs-keyword">var</span> i,

            length,

            list = (json &amp;&amp; <span class="hljs-keyword">typeof</span> json === <span class="hljs-string">'string'</span>) ? <span class="hljs-built_in">JSON</span>.parse(json) : [];

        length = list.length;

        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; length; i++) {

          list[i] = $.extend(modelFactory.create(), list[i]);

        }

        <span class="hljs-keyword">return</span> list;

      },

      store = {

        saveItem: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>

          <span class="hljs-keyword">var</span> deferred = $.Deferred();

          <span class="hljs-keyword">return</span> deferred.resolve(item);

        },

        removeItem: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>

          <span class="hljs-keyword">var</span> deferred = $.Deferred(),

              itemIndex = itemCache.indexOf(item),

              removedItem;



          <span class="hljs-keyword">if</span>(itemIndex &gt; -<span class="hljs-number">1</span>) {

            itemCache.splice(itemIndex, <span class="hljs-number">1</span>);

            removedItem = item;

          }

          <span class="hljs-keyword">return</span> deferred.resolve(removedItem);

        },

        getItems: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

          <span class="hljs-keyword">var</span> deferred = $.Deferred();

          <span class="hljs-keyword">if</span>(itemCache === <span class="hljs-literal">undefined</span>) {

             <span class="hljs-keyword">try</span> {

              itemCache = parseToCollection(window.localStorage.getItem(groceryListKey));

              deferred.resolve(itemCache);

            }

            <span class="hljs-keyword">catch</span>(e) {

              deferred.reject(<span class="hljs-string">'Could not access items: '</span> + e.message);

            }

          }

          <span class="hljs-keyword">else</span> {

            deferred.resolve(itemCache);

          }

          <span class="hljs-keyword">return</span> deferred;

        },

        empty: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

          <span class="hljs-keyword">var</span> deferred = $.Deferred();

          itemCache.length = <span class="hljs-number">0</span>;

          deferred.resolve(itemCache);

          <span class="hljs-keyword">return</span> deferred;

        }

      };



  <span class="hljs-keyword">return</span> store;



});
</code></pre><p>That will light up our tests in pretty red… but that was expected. Actually, if it didn’t make our tests fail horribly, I would have been worried.<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_23.png" alt="Failing on sotrage modification."></p>
<p>There are a couple things going on in this modification to <code>storage-service</code> that we should go over, however – the first being <code>parseToCollection()</code>:</p>
<p><em>/script/service/storage-service.js</em></p>
<pre><code>parseToCollection = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(json)</span> {</span>

  var <span class="hljs-built_in">i</span>,

      <span class="hljs-built_in">length</span>,

      list = (json &amp;&amp; typeof json === <span class="hljs-string">'string'</span>) ? <span class="hljs-transposed_variable">JSON.</span>parse(json) : <span class="hljs-matrix">[]</span>;



  <span class="hljs-built_in">length</span> = <span class="hljs-transposed_variable">list.</span><span class="hljs-built_in">length</span>;

  <span class="hljs-keyword">for</span>(<span class="hljs-built_in">i</span> = <span class="hljs-number">0</span>; <span class="hljs-built_in">i</span> &lt; <span class="hljs-built_in">length</span>; <span class="hljs-built_in">i</span>++) <span class="hljs-cell">{

    list[i] = $.extend(modelFactory.create(), list[i]);

  }</span>

  <span class="hljs-keyword">return</span> list;

}
</code></pre><p>This method is invoked from <code>getItems()</code> and is provided the value of the object held in <code>localStorage</code> with the key <code>com.custardbelly.grocerylist</code>. We’ll be saving our data down in <a href="http://www.json.org/">JSON</a> format, and as such, <code>parseCollection()</code> is responsible for parsing that data back out; as well, if it is the first time accessing the data it will be coming in as undefined so a new list is created. What is particularly important in this parsing is how the objects on the list held in <code>localStorage</code> are converted to instances of our <code>grocery-ls-item</code> model: we create a new instance using the <code>modelFactory</code> and extend it with the object values from the item held on the list. The reason for this is because <code>grocery-ls-items</code> are decorated with getters and setters to allow for <code>property-change</code> events to be notified. In serializing down to JSON, this object structure is not perserved – it is just a <strong>POJSO</strong>.</p>
<p>The <code>parseToCollection()</code> method is invoked from <code>getItems()</code>:</p>
<p><em>/script/service/storage-service.js</em></p>
<pre><code>getItems: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  <span class="hljs-keyword">var</span> deferred = $.Deferred();

  <span class="hljs-keyword">if</span>(itemCache === <span class="hljs-literal">undefined</span>) {

    <span class="hljs-keyword">try</span> {

      itemCache = parseToCollection(window.localStorage.getItem(groceryListKey));

      deferred.resolve(itemCache);

    }

    <span class="hljs-keyword">catch</span>(e) {

      deferred.reject(<span class="hljs-string">'Could not access items: '</span> + e.message);

    }

  }

  <span class="hljs-keyword">else</span> {

    deferred.resolve(itemCache);

  }

  <span class="hljs-keyword">return</span> deferred;

}
</code></pre><p>When <code>getItems()</code> is first invoked in a session, it will go about trying to access and parse the data held on <code>localStorage</code>; any subsequent invocations will immediately return the currently held reference to the store. In essence, during a session of creating and curating a <strong>Grocery List</strong>, we are working with live and current data so there is no need to keep accessing the list of grocery items from local storage every time – we’ll just return the live record.</p>
<p>Speaking of which, a lot of the failing tests I suspect are due to not actually not saving the list down to <code>localStorage</code>. Let’s just modify <code>storage-service</code> a little to do so and see where that gets us:</p>
<p><em>/script/service/storage-service.js</em></p>
<pre><code>define([<span class="hljs-string">'jquery'</span>, <span class="hljs-string">'script/model/grocery-ls-item'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($, modelFactory)</span> {</span>



  <span class="hljs-keyword">var</span> itemCache,

      groceryListKey = <span class="hljs-string">'com.custardbelly.grocerylist'</span>,

      parseToCollection = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(json)</span> {</span>

        <span class="hljs-keyword">var</span> i,

            length,

            list = (json &amp;&amp; <span class="hljs-keyword">typeof</span> json === <span class="hljs-string">'string'</span>) ? <span class="hljs-built_in">JSON</span>.parse(json) : [];



        length = list.length;

        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; length; i++) {

          list[i] = $.extend(modelFactory.create(), list[i]);

        }

        <span class="hljs-keyword">return</span> list;

      },

      serialize = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(key, data)</span> {</span>

        window.localStorage.setItem(key, <span class="hljs-built_in">JSON</span>.stringify(data));

      },

      store = {

        saveItem: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>

          <span class="hljs-keyword">var</span> deferred = $.Deferred();

          $.when(<span class="hljs-keyword">this</span>.getItems()).then(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(cache)</span> {</span>

            <span class="hljs-keyword">var</span> index = cache.indexOf(item);

            <span class="hljs-keyword">try</span> {

              <span class="hljs-keyword">if</span>(index === -<span class="hljs-number">1</span>) {

                cache[cache.length] = item;

              }

              serialize(groceryListKey, cache);

              deferred.resolve(item);

            }

            <span class="hljs-keyword">catch</span>(e) {

              deferred.reject(<span class="hljs-string">'Could not save item: '</span> + e.message);

            }

          });

          <span class="hljs-keyword">return</span> deferred;

        },

        removeItem: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>

          <span class="hljs-comment">// implementation removed to reduce noise</span>

        },

        getItems: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

          <span class="hljs-comment">// implementation removed to reduce noise</span>

        },

        empty: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

          <span class="hljs-comment">// implementation removed to reduce noise</span>

        }

      };



  <span class="hljs-keyword">return</span> store;



});
</code></pre><p><code>saveItem()</code> was modified to access the held list using <code>getItems()</code>, operate on that list as it had done previously and then try to serialize the list back to storage. Fairly simple. It’s important to note that we don’t access the <code>itemCache</code> directly in saveItem(), the reason being that we can’t ensure that <code>saveItem()</code> will only be called after a request to <code>getItems()</code>. As such, we need to be sure we’re always working with the same data and do so by requesting that cached list from <code>getItems()</code> within <code>saveItem()</code>.</p>
<p>That gets us closer to green, but we still have some work to do…<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_24.png" alt="Closer to green for storage-service modifications."></p>
<p>Let’s modify <code>removeItem()</code> and <code>empty()</code> to work with the cached list returned from <code>getItems()</code> just as the modification to <code>saveItems()</code> has:</p>
<p><em>/script/service/storage-service.js</em></p>
<pre><code>removeItem: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>

  <span class="hljs-keyword">var</span> deferred = $.Deferred();

  $.when(<span class="hljs-keyword">this</span>.getItems()).then(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(cache)</span> {</span>

    <span class="hljs-keyword">var</span> itemIndex = cache.indexOf(item),

        removedItem;

    <span class="hljs-keyword">try</span> {

      <span class="hljs-keyword">if</span>(itemIndex &gt; -<span class="hljs-number">1</span>) {

        cache.splice(itemIndex, <span class="hljs-number">1</span>);

        removedItem = item;

        serialize(groceryListKey, cache);

      }

      deferred.resolve(removedItem);

    }

    <span class="hljs-keyword">catch</span>(e) {

      cache.splice(itemIndex, <span class="hljs-number">0</span>, removedItem);

      deferred.reject(<span class="hljs-string">'Could not remove item: '</span> + e.message);

    }

  });

  <span class="hljs-keyword">return</span> deferred;

}
</code></pre><p><em>/script/service/storage-service.js</em></p>
<pre><code>empty: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  <span class="hljs-keyword">var</span> deferred = $.Deferred();

  $.when(<span class="hljs-keyword">this</span>.getItems()).then(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(cache)</span> {</span>

    <span class="hljs-keyword">try</span> {

      cache.length = <span class="hljs-number">0</span>;

      serialize(groceryListKey, cache);

      deferred.resolve(cache);

    }

    <span class="hljs-keyword">catch</span>(e) {

      deferred.reject(<span class="hljs-string">'Could not empty cache: '</span> + e.message);

    }

  });

  <span class="hljs-keyword">return</span> deferred;

}
</code></pre><p>That oughta do. Basically doing the same as we had done with <code>saveItem()</code>: accessing the cached list through <code>getItems()</code>, then modifying that list and serializing back done to <code>localStorage</code>.</p>
<p>Run those tests again, and we are back to green!<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_25.png" alt="Passing storage-service tests after modification!"></p>
<p>… at least for our <code>storage-service</code>. Let’s turn on all our tests again and see if our previous expectations are met:<br><img src="http://custardbelly.com/blog/images/tdd_js/part_ix_26.png" alt="Passing tests!"></p>
<p>Whoopie!</p>
<p>Tagged <strong>0.1.15</strong>: <a href="https://github.com/bustardcelly/grocery-ls/tree/0.1.15"><a href="https://github.com/bustardcelly/grocery-ls/tree/0.1.15">https://github.com/bustardcelly/grocery-ls/tree/0.1.15</a></a></p>
<p>We’re not done yet: we have still to hook up <code>list-controller</code> notification to <code>storage-service</code> operations. However, I want to end this article here on a good note <img src="http://custardbelly.com/blog/wp-includes/images/smilies/icon_smile.gif" alt=":)"></p>
<h2 id="conclusion">Conclusion</h2>
<p>We have yet to reach our goal of incorporating session persistence within our <strong>Grocery List</strong> application – but that is not to say we have gotten nowhere. We implemented our <code>storage-service</code> layer for <code>localStorage</code> communication and modified the <code>list-controller</code> to notify of change events to its collection related to <code>grocery-ls-item</code> existence. Not to shabby. </p>
<p>I know we want to get a finished product out the door, but we’ll get there… just a few more things to tie up in the next article…</p>
<p>Cheers! </p>
<p>—-</p>
<h1 id="link-dump">Link Dump</h1>
<h2 id="reference">Reference</h2>
<p><a href="http://tddjs.com/">Test-Driven JavaScript Development by Christian Johansen</a><br><a href="http://dannorth.net/introducing-bdd/">Introducing BDD by Dan North</a><br><a href="http://cumulative-hypotheses.org/2011/08/30/tdd-as-if-you-meant-it/">TDD as if you Meant it by Keith Braithwaite</a><br><a href="http://requirejs.org/">RequireJS</a><br><a href="https://github.com/amdjs/amdjs-api/wiki/AMD">AMD</a><br><a href="http://pivotal.github.com/jasmine/">Jasmine</a><br><a href="http://sinonjs.org/">Sinon</a><br><a href="https://github.com/derickbailey/jasmine.async">Jasmine.Async</a></p>
<h2 id="post-series">Post Series</h2>
<p><a href="https://github.com/bustardcelly/grocery-ls">grocery-ls github repo</a><br><a href="http://custardbelly.com/blog/2012/11/26/the-making-of-a-test-driven-grocery-list-application-in-javascript-part-i">Part I – Introduction</a><br><a href="http://custardbelly.com/blog/2012/11/26/the-making-of-a-test-driven-grocery-list-application-in-js-part-ii">Part II – Feature: Add Item</a><br><a href="http://custardbelly.com/blog/2012/12/06/the-making-of-a-test-driven-grocery-list-application-in-js-part-iii">Part III – Feature: Mark-Off Item</a><br><a href="http://custardbelly.com/blog/2012/12/17/the-making-of-a-test-driven-grocery-list-application-in-js-part-iv">Part IV – Feature: List-Item-Controller</a><br><a href="http://custardbelly.com/blog/2012/12/31/the-making-of-a-test-driven-grocery-list-application-in-js-part-v/">Part V – Feature: List-Controller Refactoring</a><br><a href="http://custardbelly.com/blog/2013/01/08/the-making-of-a-test-driven-grocery-list-application-in-js-part-vi/">Part VI – Back to Passing</a><br><a href="http://custardbelly.com/blog/2013/01/17/the-making-of-a-test-driven-grocery-list-application-in-js-part-vii/">Part VII – Remove Item</a><br><a href="http://custardbelly.com/blog/2013/01/22/the-making-of-a-test-driven-grocery-list-application-part-viii/">Part VIII – Bug Fixing</a><br><a href="http://custardbelly.com/blog/2013/02/15/the-making-of-a-test-driven-grocery-list-application-in-js-part-ix/">Part IX – Persistence</a><br><a href="http://custardbelly.com/blog/2013/03/06/the-making-of-a-test-driven-grocery-list-application-in-js-part-x/">Part X – It Lives!</a></p>
<p>Posted in <a href="http://custardbelly.com/blog/category/amd/">AMD</a>, <a href="http://custardbelly.com/blog/category/javascript/">JavaScript</a>, <a href="http://custardbelly.com/blog/category/requirejs/">RequireJS</a>, <a href="http://custardbelly.com/blog/category/grocery-ls/">grocery-ls</a>, <a href="http://custardbelly.com/blog/category/jasmine/">jasmine</a>, <a href="http://custardbelly.com/blog/category/unit-testing/">unit-testing</a>.</p>
]]></description><link>http://custardbelly.com/blog/blog-posts/2013/02/15/the-making-of-a-test-driven-grocery-list-application-in-js-part-ix/index.html</link><guid isPermaLink="true">http://custardbelly.com/blog/blog-posts/2013/02/15/the-making-of-a-test-driven-grocery-list-application-in-js-part-ix/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item></channel></rss>