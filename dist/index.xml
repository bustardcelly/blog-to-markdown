<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Todd Anderson]]></title><description><![CDATA[ramblings about making things for web, mobile, desktop and land.]]></description><link>http://custardbelly.com/blog</link><generator>RSS for Node</generator><lastBuildDate>Wed, 03 Feb 2016 20:01:35 GMT</lastBuildDate><atom:link href="http://custardbelly.com/blog/index.xml" rel="self" type="application/rss+xml"/><author><![CDATA[Todd Anderson]]></author><item><title><![CDATA[flood-pi: Flood detection on Raspberry Pi]]></title><description><![CDATA[<p>A lot has happened over the course current year. Among the biggest changes, we left Boston for Vermont! We have begun to settle in here in the beatuiful Champlain Valley and, of course, my oldest is enrolled in hockey lessons - a sport i know very little about, but am excited to learn from him.</p>
<p>As is expected from a big move, we have found outselves in different surroundings and different living spaces. We are no longer 4 people cramped in a tiny 2-bedroom condo along the train line in Brighton, MA; we are now 4 people in a ranch house with noone above or below us to complain about taking off their loud shoes when the baby is sleeping. </p>
<p>While the extra space of a house is wonderful, tit comes with additional maintenance and care over renting an apartment. For instance, we never had a basement in our previous apartments and never had to worry about flooding or failures in a sump pump. Now we do. And we have had a handful of instances when it has occurred. While it is true that we have and will continue to have qualified people locate the source of the problem, I thought - in the meantime - it would be a fun little project to setup something that could alert me to possible water starting to accumulate in the basement.</p>
<p><img src="http://custardbelly.com/images/flood_pi_flood.jpg" alt="a flood!"></p>
<p>And from that <a href="https://github.com/bustardcelly/flood-pi">flood-pi</a> was born!</p>
<h2 id="flood-pi">flood-pi</h2>
<p><strong>flood-pi</strong> is an open source Python project meant to be run on a <a href="http://www.raspberrypi.org/">Raspberry Pi</a>. The Github repo for <a href="https://github.com/bustardcelly/flood-pi">flood-pi</a> has some more technical details, but essential <strong>flood-pi</strong> detects a &quot;flood&quot; by reading an analog value from a circuit completed by water.</p>
<p>The basic premise is that two leads with copper plates at the end (originally nails in my prototype) are set level to the floor of the basement and spaced about a inch apart from each other. One lead is connected to the power while the other lead is connected to the between the first pin of the mcp3008 and the ground. As water comes between the leads (most likely from the start of a flood), the circuit is complete and a reading from 0 to 1024 is read through the ADC. Some low values may come in but should be considered not a &quot;positive&quot; detection. As well, some high values may come in which typically means that somehow the leads started touching each other and be considered not a &quot;positive&quot; detection, either. In correlation to the distance between the leads, there is a middleground of values that would be considered a &quot;positive&quot; detection.</p>
<p>When a &quot;positive&quot; detection occurs, <strong>flood-pi</strong> then sends out an email to alert me. Then I can take appropriate action.</p>
<p><em>There is no analog in on <a href="http://www.raspberrypi.org/">Raspberry Pi</a>, but i have set up projects reading potentiometers using the <a href="https://learn.adafruit.com/reading-a-analog-in-and-controlling-audio-volume-with-the-raspberry-pi">mcp3008 as described here on adafruit</a>, so I knew i could use that setup for this project.</em></p>
<h3 id="project">project</h3>
<p>Here&#39;s some pictures of the project:</p>
<p>The leads.</p>
<p><img src="http://custardbelly.com/images/flood_pi_leads.jpg" alt="leads"></p>
<p><a href="http://www.raspberrypi.org/">Raspberry Pi</a>, running <a href="http://www.raspberrypi.org/downloads/">Debian-Wheezy</a> with the <a href="https://github.com/bustardcelly/flood-pi">flood-pi</a> program running as a daemon. <a href="http://www.edimax.com/edimax/merchandise/merchandise_detail/data/edimax/global/wireless_adapters_n150/ew-7811un">Edimax WiFi adapter</a> for the interweb-bings and email-ery.</p>
<p><img src="http://custardbelly.com/images/flood_pi_rasp.jpg" alt="pi"></p>
<p>The mcp3008 on its own breakout. (<strong>i soldered it up all by myself!</strong>)</p>
<p><img src="http://custardbelly.com/images/flood_pi_mcp3008.jpg" alt="mcp3008"></p>
<h3 id="installation">installation</h3>
<p>Here&#39;s some pictures of its installation in the basement:</p>
<p><img src="http://custardbelly.com/images/flood_pi_install3.jpg" alt="full install"></p>
<p><img src="http://custardbelly.com/images/flood_pi_install1.jpg" alt="module install"></p>
<p><img src="http://custardbelly.com/images/flood_pi_install2.jpg" alt="lead install"></p>
<p>We, thankfully, haven&#39;t been able to get a <em>true</em> &quot;positive&quot; reading since its installation, but I have submersed the leads in water for a short time to ensure i was being sent emails :)</p>
<h2 id="flood-pi-admin">flood-pi-admin</h2>
<p>I couldn&#39;t just stop at getting emails. I am empoyed as a software developer by trade, so I <em>had</em> to keep writing software.</p>
<p>I wanted to aggregate the readings from <a href="https://github.com/bustardcelly/flood-pi">flood-pi</a> and get an overview of its workings (or failure of workings if it may come to that). I don&#39;t know if there could be any patterns found from the data as to when the sump pump fails or whatnot, but more data can&#39;t hurt, can it?</p>
<p>As such, <a href="https://github.com/bustardcelly/flood-pi-admin">flood-pi-admin</a> was born!</p>
<h3 id="about-flood-pi-admin">about flood-pi-admin</h3>
<p><a href="https://github.com/bustardcelly/flood-pi-admin">flood-pi-admin</a> is a NodeJS-based server that provides a RESTful API for POSTing and accessing daatbeing reported by <a href="https://github.com/bustardcelly/flood-pi">flood-pi</a>. There is more detailed information on the <a href="https://github.com/bustardcelly/flood-pi-admin">Github repo for the project</a>, but it has endpoints for the <strong>flood-pi</strong> detector to post confiuguration and reading data as well as two main routes for accessing information about past and current conditions. </p>
<p><strong>It&#39;s pretty bare-bones at the moment, but i plan to add new features as they are required (or requested).</strong></p>
<h3 id="charts">charts</h3>
<p>The landing page and <em>/level?range=(day|week|year|all)</em> provide chart data with the level readings:</p>
<p><img src="http://custardbelly.com/images/flood_pi_chart.png" alt="chart data"></p>
<p>The red band across the middle of the chart is the &quot;positive&quot; value range provided from the <strong>flood-pi</strong> and should be considered possible flood detection. As mentioned previously, lower values may come in but not high enough to be considered &quot;positive&quot;; additionally, high values may come in which may actually mean that the leads have somehow started touching each other rather than completing the circuit with water.</p>
<h3 id="isitflooded">isitflooded</h3>
<p>There is also a direct page at <em>/isitflooded</em> that will let you know if it is currently considered flooded or not:</p>
<p><img src="http://custardbelly.com/images/flood_pi_no.png" alt="current detection"></p>
<p>It also reports last reporting time and whether or not it should alert you to the <a href="https://github.com/bustardcelly/flood-pi">flood-pi</a> no longer reporting information.</p>
<h2 id="conclusion">conclusion</h2>
<p>I had a lot of fun taking a small idea of being notified the nextr time their is water in the basement and transferring it to an actual physical devices that can send out emails upon completion of a circuit. Plus, i got better at soldering - i know the ADC breakout is a small assembly, but it made me happy the way it turned out.</p>
<p>If you have occasional water in your basement and have an interest in <a href="http://www.raspberrypi.org/">Raspberry Pi</a>, i hope you check out the <a href="https://github.com/bustardcelly/flood-pi">flood-pi</a> program and install it. And if you have yourself a VPS, feel free to also setup the <a href="https://github.com/bustardcelly/flood-pi-admin">flood-pi-admin</a> on it to access level reading data.</p>
<p>Now, onto the next little pet project i have in mind:)</p>
<p>Cheers!</p>
]]></description><link>/blog-posts/2014/12/4/flood-pi/index.html</link><guid isPermaLink="true">/blog-posts/2014/12/4/flood-pi/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[Caddis: The On-The-Fly JSON RESTful Server]]></title><description><![CDATA[<p>Recently I released a new node-based CLI tool called <a href="https://github.com/bustardcelly/caddis">caddis</a>. It allows you to start a server - as a daemon - on localhost and dynamically add routes and JSON responses. Once stopped, any work is wiped; it is purely in-memory, session based. </p>
<p>The impetus for its creation was a requirement to easily mock service APIs to be called in a test environment without regards to libraries or languages in which the environment is run. </p>
<p>To be more specific, for a recent project I am using the wonderful <a href="http://calaba.sh/">calabash-ios</a> framework to define <a href="http://cukes.info/">cucumber</a> specs in <a href="https://www.ruby-lang.org/en/">Ruby</a> that drive automated integration tests for an <strong>iOS</strong> project in the simulator. Creating <a href="https://github.com/bustardcelly/caddis">caddis</a> allows me to easily mock service requests that the <strong>iOS</strong> application will make and validate the expected result of scenarios in <a href="http://cukes.info/">cucumber</a>.</p>
<h2 id="installation-usage">Installation &amp; Usage</h2>
<p><a href="https://github.com/bustardcelly/caddis">caddis</a> is available through npm. It is recommended that you install globally:</p>
<pre><code><span class="hljs-variable">$ </span>npm install -g caddis
</code></pre><p><em>&gt; you may need to <code>sudo</code></em></p>
<p>To use <a href="https://github.com/bustardcelly/caddis">caddis</a> </p>
<pre><code>$ caddis start
$ curl -X POST -d <span class="hljs-string">'{"</span>method<span class="hljs-string">":"</span>GET<span class="hljs-string">", "</span>uri<span class="hljs-string">":"</span>/foo<span class="hljs-string">", "</span>response<span class="hljs-string">":{"</span>bar<span class="hljs-string">":"</span>baz<span class="hljs-string">"}}'</span> http:<span class="hljs-comment">//localhost:3001/api --header "Content-Type:application/json"</span>
</code></pre><p>Visit <a href="http://localhost:3001/foo">http://localhost:3001/foo</a>, prints:</p>
<pre><code><span class="hljs-rules">{
  <span class="hljs-rule"><span class="hljs-attribute">bar</span>:<span class="hljs-value"> <span class="hljs-string">'baz'</span>
</span></span></span>}
</code></pre><pre><code><span class="hljs-variable">$ </span>caddis stop
</code></pre><p>Visit <a href="http://localhost:3001/foo">http://localhost:3001/foo</a>, Not Found.</p>
<h3 id="options">Options</h3>
<pre><code>$ caddis -h

usage: caddis [action]

Starts <span class="hljs-operator">a</span> server <span class="hljs-keyword">at</span> <span class="hljs-keyword">http</span>://localhost:<span class="hljs-number">3001</span> <span class="hljs-keyword">as</span> <span class="hljs-operator">a</span> daemon, exposing <span class="hljs-operator">an</span> api <span class="hljs-built_in">to</span> <span class="hljs-built_in">post</span> JSON <span class="hljs-built_in">to</span> <span class="hljs-operator">in</span> order <span class="hljs-built_in">to</span> mock <span class="hljs-operator">a</span> RESTful service.

actions:
  start               Start Caddis <span class="hljs-keyword">at</span> <span class="hljs-keyword">http</span>://localhost:<span class="hljs-number">3001</span>
  stop                Stop <span class="hljs-operator">a</span> previously started Caddis daemon
options:
  -h                  Display this help menu
</code></pre><h2 id="what-">What?</h2>
<p><img src="http://custardbelly.com/images/caddis.jpg" alt="Caddis Fly Lure"><br>A caddis is a moth-like insect often used as models for fly lures in fishing.</p>
<p>The <a href="https://github.com/bustardcelly/caddis">caddis</a> CLI tool is used to start and stop a RESTful JSON service with the ability to POST route configuration and responses, on-the-fly, for mocking and testing purposes.</p>
<p><em>It may be a stretch, but there&#39;s wit in there somewhere...</em></p>
<h2 id="why-">Why?</h2>
<p>There are other projects I have been a part of, such as <a href="https://github.com/infrared5/madmin">madmin</a>, that allow for dynamically creating RESTful APIs through a User Interface and allows for persistance through I/O.</p>
<p>Recently, I was involved with mocking a service layer for unit testing purposes and found that the manual curation of such an API was too tedious for the task at hand - I wanted the process to be much more fluid and simple.</p>
<p>In this particular instance I needed to:</p>
<ol>
<li>Start a server in setup/before</li>
<li>Dynamically add a route to the service with mock JSON response</li>
<li>Run the test</li>
<li>Shut down the server in teardown/after</li>
</ol>
<p>Fairly simple, and most of all I didnt want any artifacts lying around - in other words I didn&#39;t need for any routes that I dynamically created to stick around on my local disk after the tests were done.</p>
<p>As such, <a href="https://github.com/bustardcelly/caddis">caddis</a> was born.</p>
<h2 id="how">How</h2>
<p>As mentioned briefly above, <a href="https://github.com/bustardcelly/caddis">caddis</a> is a CLI tool. It is recommended to install globally:</p>
<pre><code><span class="hljs-variable">$ </span>npm install -g caddis
</code></pre><p><em>&gt; you may need to <code>sudo</code></em></p>
<p>Once installed, you can start the service (currently defaults to <a href="http://localhost:3001">http://localhost:3001</a>) and begin POSTing route configurations in JSON. Here is an example using cUrl that dynamically adds a GET route at <code>/foo</code> with a simple JSON payload of <code>{&quot;bar&quot;:&quot;baz&quot;}</code>:</p>
<pre><code>$ curl -X POST -d <span class="hljs-string">'{"</span>method<span class="hljs-string">":"</span>GET<span class="hljs-string">", "</span>uri<span class="hljs-string">":"</span>/foo<span class="hljs-string">", "</span>response<span class="hljs-string">":{"</span>bar<span class="hljs-string">":"</span>baz<span class="hljs-string">"}}'</span> http:<span class="hljs-comment">//localhost:3001/api --header "Content-Type:application/json"</span>
</code></pre><p>You are not confiuned to cUrl - you can use whatever networking library in whatever language you are writing your tests in and the server can handle all modern RESTful methods:</p>
<ul>
<li>GET</li>
<li>POST</li>
<li>PUT</li>
<li>DELETE</li>
</ul>
<p>When you are finished, simply stop the <a href="https://github.com/bustardcelly/caddis">caddis</a> server:</p>
<pre><code><span class="hljs-variable">$ </span>caddis stop
</code></pre><h2 id="conclusion">Conclusion</h2>
<p>I hope this was a useful introduction to what <a href="https://github.com/bustardcelly/caddis">caddis</a> has to offer and that you may find it beneficial in your testing in some way.</p>
<p>You can visit the project on github at: <a href="https://github.com/bustardcelly/caddis">https://github.com/bustardcelly/caddis</a></p>
]]></description><link>/blog-posts/2014/02/25/introducing-caddis/index.html</link><guid isPermaLink="true">/blog-posts/2014/02/25/introducing-caddis/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[Running Browser-Based CucumberJS Specs in Testling]]></title><description><![CDATA[<p>In my <a href="http://custardbelly.com/blog/blog-posts/2014/02/10/cucumberjs-tests-browser/index.html">previous</a> <a href="http://custardbelly.com/blog/blog-posts/2014/02/12/cucumberjs-browser-update/index.html">posts</a> I discuss bringing <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> specs to the browser using the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> CLI tool. In this post I intend to address how to use the format reporting options of the <strong>cucumberjs-browser</strong> tool to enable integration with the <a href="https://ci.testling.com/">testling</a> automated cross-browser testing tool to run your specs in various browser environment targets that you may not have installed on your own system.</p>
<h2 id="requirements">Requirements</h2>
<p>For the purposes of this article, it is assumed that you are knowledgable of <a href="http://nodejs.org">node</a> and <a href="http://npmjs.org">npm</a> and familiar with creating feature specs for <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>. </p>
<p>To view examples of features and step definitions for a browser-based application, please visit the <a href="https://github.com/bustardcelly/cucumberjs-examples">cucumberjs-examples</a> repo, from which this post will use to demonstrate integrating the generated testrunner from <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> with <a href="https://ci.testling.com/">testling</a>.</p>
<h2 id="cucumberjs-browser">cucumberjs-browser</h2>
<p>The <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> CLI tool provides the ability to run your feature specs in the browser by bundling your features, steps and support files - written in the usual way you would - to be run and evaluated at runtime by the browser-based <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> testrunner</p>
<p>To install <strong>cucumberjs-browser</strong>:</p>
<pre><code>$ npm install <span class="hljs-attribute">-g</span> cucumberjs<span class="hljs-attribute">-browser</span>
</code></pre><p><em>you may need to <code>sudo</code></em></p>
<p>After installation, the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> will be accessible on the command-line using <code>cucumberjs-browser</code> and can be run within any directory that has <strong>Features</strong> and <strong>Step Definitions</strong> (along with optional support files) that can be consumed by <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>.</p>
<p>The <strong>cucumberjs-browser</strong> CLI tool can be run with the following options:</p>
<pre><code>$ <span class="hljs-tag">cucumberjs-browser</span> <span class="hljs-attr_selector">[-o outdir]</span> <span class="hljs-attr_selector">[-f format]</span> <span class="hljs-attr_selector">[--tmpl template]</span> <span class="hljs-attr_selector">[--features features]</span>
</code></pre><p>Though it is strongly encouraged to provide a custom template using the <code>--tmpl</code> option, for the purpose of this article, we will focus on the format (<code>-f</code>) option. As of the writing of this article, the following format options are available:</p>
<ul>
<li>ui</li>
<li>tap</li>
<li>testem</li>
<li>saucelabs</li>
</ul>
<p>For the purpose of this article, we will be discussing the <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol">TAP</a> format option value.</p>
<p><em>For more infromation about other format options, please visit the latest <a href="https://github.com/bustardcelly/cucumberjs-browser/wiki/Formats">documentation regarding formats</a> on the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a>.</em></p>
<h2 id="tap">TAP</h2>
<p>The <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol">Test Anything Protocol</a> is a specification for reporting test information. The benefit of using such a specification is that it can be consumed by any test harness that recognizes it.</p>
<p>You can output <strong>TAP</strong> reports from <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> using the <code>tap</code> value for the foromat option:</p>
<pre><code>$ cucumberjs<span class="hljs-attribute">-browser</span> <span class="hljs-attribute">-f</span> tap
</code></pre><p>Running this command will generate the necessary files to print <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol">TAP</a> test results in the console when loaded by a browser.</p>
<p>If you were to open the generated testrunner file in a browser using the example from <a href="https://github.com/bustardcelly/cucumberjs-examples">cucumberjs-examples</a>, you would see something like the following if you were to open the browser console:</p>
<pre><code>TAP <span class="hljs-property">version</span> <span class="hljs-number">13</span>
<span class="hljs-comment"># Submit of valid item adds item to list</span>
ok <span class="hljs-number">1</span> I have opened <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> <span class="hljs-type">application</span>
ok <span class="hljs-number">2</span> I have an empty grocery <span class="hljs-type">list</span> view
ok <span class="hljs-number">3</span> I provide a valid grocery <span class="hljs-type">list</span> <span class="hljs-property">item</span> <span class="hljs-property">name</span>
ok <span class="hljs-number">4</span> I select <span class="hljs-keyword">to</span> add an <span class="hljs-property">item</span>
ok <span class="hljs-number">5</span> The <span class="hljs-property">item</span> <span class="hljs-keyword">is</span> added <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> view
<span class="hljs-comment"># Submit of valid item adds item to collection</span>
ok <span class="hljs-number">6</span> I have opened <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> <span class="hljs-type">application</span>
ok <span class="hljs-number">7</span> I have an empty grocery <span class="hljs-type">list</span> view
ok <span class="hljs-number">8</span> I provide a valid grocery <span class="hljs-type">list</span> <span class="hljs-property">item</span> <span class="hljs-property">name</span>
ok <span class="hljs-number">9</span> I select <span class="hljs-keyword">to</span> add an <span class="hljs-property">item</span>
ok <span class="hljs-number">10</span> The <span class="hljs-property">item</span> <span class="hljs-keyword">is</span> accessible <span class="hljs-keyword">from</span> <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> collection
<span class="hljs-comment"># Item added to grocery list</span>
ok <span class="hljs-number">11</span> I have opened <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> <span class="hljs-type">application</span>
ok <span class="hljs-number">12</span> I have an empty grocery <span class="hljs-type">list</span>
ok <span class="hljs-number">13</span> I add an <span class="hljs-property">item</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> <span class="hljs-type">list</span>
ok <span class="hljs-number">14</span> The grocery <span class="hljs-type">list</span> <span class="hljs-keyword">contains</span> a single <span class="hljs-property">item</span>
<span class="hljs-comment"># Item accessible from grocery list</span>
ok <span class="hljs-number">15</span> I have opened <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> <span class="hljs-type">application</span>
ok <span class="hljs-number">16</span> I have an empty grocery <span class="hljs-type">list</span>
ok <span class="hljs-number">17</span> I add an <span class="hljs-property">item</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> <span class="hljs-type">list</span>
ok <span class="hljs-number">18</span> I can access <span class="hljs-keyword">that</span> <span class="hljs-property">item</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span>

<span class="hljs-number">1.</span><span class="hljs-number">.18</span>
<span class="hljs-comment"># tests 18</span>
<span class="hljs-comment"># pass  18</span>

<span class="hljs-comment"># ok</span>
</code></pre><p>It should be noted that the <code>tap</code> listener for <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> uses the excellent <a href="https://github.com/substack/tape">tape</a> module.</p>
<h2 id="testling">testling</h2>
<p>I can&#39;t say enough how much I appreciate <a href="https://ci.testling.com/">testling</a>. You can install <strong>testling</strong> locally to run tests on the browsers installed on your system or use their remote service to run tests against various browsers that may not be available to you, yet are required as targets for your current project.</p>
<h3 id="local">local</h3>
<p>You can install <a href="https://ci.testling.com/">testling</a> to be run locally:</p>
<pre><code><span class="hljs-variable">$ </span>npm install -g testling
</code></pre><p>To run it, change directories into the generated files from <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> and run the following command:</p>
<pre><code><span class="hljs-variable">$ </span>cd browser-test
<span class="hljs-variable">$ </span>testling
</code></pre><p>That will consume a local <code>package.json</code> file and read a <code>testling</code> entry with options associated with running the generated html file againsta installed browsers on your system:</p>
<p><em>/browser-test/package.json</em></p>
<pre><code>{
<span class="hljs-keyword">...</span>

  <span class="hljs-string">"testling"</span> : {
    <span class="hljs-string">"html"</span> : <span class="hljs-string">"cucumber-testrunner.html"</span>,
    <span class="hljs-string">"browsers"</span> : [
        <span class="hljs-string">"chrome/latest"</span>,
        <span class="hljs-string">"firefox/latest"</span>,
        <span class="hljs-string">"safari/latest"</span>
    ]
  },

<span class="hljs-keyword">...</span>
}
<span class="hljs-keyword">...</span>
</code></pre><p>Truthfully, I never run <a href="https://ci.testling.com/">testling</a> locally. The main reasons being </p>
<p><strong>a)</strong> I can automate the running of specs on locally installed browsers easier with other tools (this is for another post :) )<br><strong>b)</strong> Testling provides a bigger benefit in providing tests against browsers I would otherwise have to install VMs for.</p>
<p>That said, I don&#39;t want ot pursuade you from using <strong>testling</strong> locally if it provides benefit in your workflow.</p>
<h3 id="remote">remote</h3>
<p>To use the remote service that <a href="https://ci.testling.com/">testling</a> provides, you still define the <code>testling</code> property in your <code>package.json</code> for the project as described above, but you additionally have to provide a webhook for your <strong>git</strong> repo in order to invoke the test harness. Upon a <code>PUSH</code> to your repository, <a href="https://ci.testling.com/">testling</a> will run the specified HTML file under the listed target browsers and report results based on the <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol">Test Anything Protocol</a> output printed to <code>console</code>.</p>
<p>In addition to providing a great service, you also get the option of adding a nice looking badge to your project.</p>
<p><img src="http://custardbelly.com/blog/images/testling-1.png" alt="testling harness output"></p>
<p>This badge was produced by pushing an update to the <a href="https://github.com/bustardcelly/cucumberjs-examples">cucumberjs-examples</a> exampe repo with a defined webhook. (If you followed along in the previous articles, you will note that the failing IE tests are due to the use of <code>Object.create</code> in source without a polyfill).</p>
<p>_The process of adding a webhook to your project is described in better detail in the <a href="https://ci.testling.com/guide/quick_start">testling documentation</a>._</p>
<h3 id="donate">donate</h3>
<p>If you do use <a href="https://ci.testling.com/">testling</a> in any fashion, I implore you to <a href="https://ci.testling.com/donate">donate to the cause</a> :)</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article I introduced how the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> CLI tool can be used to generate a browser-based testrunner to report tests in <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol">TAP</a> format and integrate the invaluable <a href="https://ci.testling.com/">testling</a> service to run the tests on various browsers that may not be at your disposal otherwise.</p>
<p>While <a href="https://ci.testling.com/">testling</a> provides one consumer endpoint, using the <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol">TAP</a> specification in reporting test results can easily be consumed by another test harness of your choice.</p>
<p>For more information on running <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> in the browser and/or to report any issues, please visit the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> repository.</p>
]]></description><link>/blog-posts/2014/02/18/cucumberjs-testling/index.html</link><guid isPermaLink="true">/blog-posts/2014/02/18/cucumberjs-testling/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[BDD in JavaScript V: CucumberJS and The Browser, II]]></title><description><![CDATA[<p><em>&quot;Whoa. Whoa. Whoa. You can&#39;t just use roman numerals all over the place in your post titles...&quot;</em></p>
<p>In the <a href="http://custardbelly.com/blog/blog-posts/2014/02/10/cucumberjs-tests-browser/index.html">previous article</a> I addressed the available libraries and practices to have your <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> specs running in a browser environment, as well as introduced a new project begun by me: <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a>.</p>
<p>I had originally had the entirety of this post in the previous post, but felt that it was a little bit of information overload. As such, I decided to split them into two posts.</p>
<p>The intent of this article is to address incorporating <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> into our current Grocery List Application example and continue developing features that involve User Interaction with the DOM.</p>
<h3 id="-gt-code">&gt; code</h3>
<p>Supported files related to this and any subsequent posts on this topic will be available at:<br><a href="https://github.com/bustardcelly/cucumberjs-examples">https://github.com/bustardcelly/cucumberjs-examples</a></p>
<h2 id="cucumberjs-browser">cucumberjs-browser</h2>
<p>The <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> CLI tool was created to provide a means in which to write my <strong>Features</strong>, <strong>Step Definitions</strong> and support files as I normally would for a project, and bundle them to be run in a browser and provide custom reporting.</p>
<p>First order of business for incorporating the <strong>cucumberjs-browser</strong> tool into the Grocery List applicaiton project we have been working through in this series is to install the tool:</p>
<pre><code><span class="hljs-variable">$npm</span> install <span class="hljs-attribute">-g</span> cucumberjs<span class="hljs-attribute">-browser</span>
</code></pre><p>(you may need to <code>sudo</code>) </p>
<p>That should install the tool and now be accessible from the command line. The <a href="https://github.com/bustardcelly/cucumberjs-browser/blob/master/README.md">README</a> is the best place to find the most up-to-date infromation about the tool, but the general usage is as follows:</p>
<pre><code>$ <span class="hljs-tag">cucumberjs-browser</span> <span class="hljs-attr_selector">[-o outdir]</span> <span class="hljs-attr_selector">[-f format]</span> <span class="hljs-attr_selector">[--tmpl template]</span> <span class="hljs-attr_selector">[--features features]</span>
</code></pre><p>We&#39;ll get into how we will use it with our project and the options in a bit, but before then...</p>
<h2 id="fail-first">Fail first</h2>
<p>In a pervious article in this series, we added an <code>add-item</code> feature that detailed the scenarios of adding and accessible an item from a collection of the Grocery List application. This is still a valid logical feature that normally I would not modify to incorporate User Interaction when incorporating <strong>Features</strong> related to the application being browser-based. Instead, I would create a new <strong>Feature</strong> that details how a User can add and view new item in a browser environment.</p>
<p>Let&#39;s define our spec:</p>
<p><em>/features/add-item-view.feature</em></p>
<pre><code>Feature: Shopper can add <span class="hljs-keyword">and</span> view new <span class="hljs-property">item</span> <span class="hljs-keyword">in</span> Grocery List
  As a shopper using <span class="hljs-keyword">the</span> browser-based app
  I want <span class="hljs-keyword">to</span> add an <span class="hljs-property">item</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">my</span> grocery <span class="hljs-type">list</span> view
  So <span class="hljs-keyword">that</span> I can remember <span class="hljs-keyword">to</span> buy <span class="hljs-keyword">that</span> <span class="hljs-property">item</span> <span class="hljs-keyword">at</span> <span class="hljs-keyword">the</span> grocery store

  Background: Grocery List Application <span class="hljs-keyword">is</span> Open
    Given I have opened <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> <span class="hljs-type">application</span>

  Scenario: Submit <span class="hljs-keyword">of</span> valid <span class="hljs-property">item</span> adds <span class="hljs-property">item</span> <span class="hljs-keyword">to</span> <span class="hljs-type">list</span>
    Given I have an empty grocery <span class="hljs-type">list</span> view
    When I provide a valid grocery <span class="hljs-type">list</span> <span class="hljs-property">item</span> <span class="hljs-property">name</span>
    And I select <span class="hljs-keyword">to</span> add an <span class="hljs-property">item</span>
    Then The <span class="hljs-property">item</span> <span class="hljs-keyword">is</span> added <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> view

  Scenario: Submit <span class="hljs-keyword">of</span> valid <span class="hljs-property">item</span> adds <span class="hljs-property">item</span> <span class="hljs-keyword">to</span> collection
    Given I have an empty grocery <span class="hljs-type">list</span> view
    When I provide a valid grocery <span class="hljs-type">list</span> <span class="hljs-property">item</span> <span class="hljs-property">name</span>
    And I select <span class="hljs-keyword">to</span> add an <span class="hljs-property">item</span>
    Then The <span class="hljs-property">item</span> <span class="hljs-keyword">is</span> accessible <span class="hljs-keyword">from</span> <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> collection
</code></pre><p>We have declared two <strong>Scenarios</strong> that define the <strong>Feature</strong> criteria in which a User interacts with DOM elements to add and view a new item to the Grocery List application.</p>
<p>Running that produces the expected <code>undefined</code> steps notification:</p>
<pre><code>$ npm run test
<span class="hljs-preprocessor">.UUU</span><span class="hljs-preprocessor">.UUUU</span><span class="hljs-preprocessor">.UUUU</span>........

<span class="hljs-number">4</span> scenarios (<span class="hljs-number">2</span> undefined, <span class="hljs-number">2</span> passed)
<span class="hljs-number">21</span> steps (<span class="hljs-number">10</span> undefined, <span class="hljs-number">11</span> passed)
</code></pre><h3 id="given-i-have-an-empty-grocery-list-view">Given I have an empty grocery list view</h3>
<p>We have a few things we need to address, but before we get into the nitty-gritty, let&#39;s turn this <span style="color:red;">red</span> in true TDD fashion while filling out our API expectation of the <em>Given</em> in each of the <strong>Scenarios</strong></p>
<p>_/features/step<em>definitions/add-item-view.steps.js</em></p>
<pre><code><span class="hljs-keyword">var</span> assert = <span class="hljs-built_in">require</span>(<span class="hljs-string">'assert'</span>);

module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
<span class="hljs-pi">  'use strict'</span>;

  <span class="hljs-keyword">this</span>.World = <span class="hljs-built_in">require</span>(<span class="hljs-string">'../support/world'</span>).World;

  <span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have an empty grocery list view$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    <span class="hljs-keyword">this</span>.emptyGroceryListView();
    assert.equal(<span class="hljs-keyword">this</span>.getGroceryListView().childNodes.length, <span class="hljs-number">0</span>);
    callback();
  });

});
</code></pre><pre><code>$ npm run test
.F.F.F........

(::) failed steps (::)
<span class="hljs-keyword">...</span>
Failing scenarios:
/Users/toddanderson/Documents/workspace/custardbelly/cucumberjs-example/features/add-item-view.feature:<span class="hljs-number">9</span> <span class="hljs-comment"># Scenario: Select of Add Item opens input</span>
/Users/toddanderson/Documents/workspace/custardbelly/cucumberjs-example/features/add-item-view.feature:<span class="hljs-number">14</span> <span class="hljs-comment"># Scenario: Submit of valid item adds item to list</span>
/Users/toddanderson/Documents/workspace/custardbelly/cucumberjs-example/features/add-item-view.feature:<span class="hljs-number">20</span> <span class="hljs-comment"># Scenario: Submit of valid item adds item to collection</span>

<span class="hljs-number">5</span> scenarios (<span class="hljs-number">3</span> failed, <span class="hljs-number">2</span> passed)
<span class="hljs-number">22</span> steps (<span class="hljs-number">3</span> failed, <span class="hljs-number">8</span> skipped, <span class="hljs-number">11</span> passed)
</code></pre><p>Huge explosion. Red everywhere. Dogs and cats, living together. Mass hysteria.</p>
<p>That&#39;s good, we expect the world to crash with nothing to support our claims of an &quot;empty grocery list view&quot;. What does that even mean in the current context? We haven&#39;t even a web page to view our Grocery List. These all are issues we need to address in resolving just this single <strong>Step Definition</strong>.</p>
<h2 id="client-side-script">Client-Side Script</h2>
<p>This is a good point to discuss the client-side script that will act as our main entry point for the browser-based Grocery List Application. </p>
<p>If you have been following along with the examples in this series, we have been slowly building up specs for our Grocery List Application, yet it has been done so while testing under the <a href="http://nodejs.org">Node</a>-based <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> CLI tool. Nothing wrong with that, and in fact we have a good starting point in which we can ensure that a proper collection model is maintained with regards to adding and accessing items.</p>
<p>However, now we are moving to a browser environment and need to address how we will load and interact with our application within the browser context. Because we have been developing node modules (to be tested under CucumberJS specs) which utilize the <a href="http://wiki.commonjs.org/wiki/Modules/1.1">CommonJS module format</a> we can easily bundle our scripts for the browser using the wonderful <a href="http://browserify.org/">browserify</a> tool.</p>
<p><em>Disclaimer: Hats off to <a href="http://benclinkinbeard.com/">Ben Clinkenbeard</a> for finally persuading me to look into <a href="http://browserify.org/">browserify</a> over my years-long obsession with <a href="http://requirejs.org/">RequireJS</a>.</em></p>
<h3 id="browserify">Browserify</h3>
<p>It is too much for this article to address <a href="http://browserify.org/">browserify</a> and its history and attributes. There are several articles that are google-able that explain what <strong>browserify</strong> is, how to use it, and its virtues and disadvantages over AMD. I implore you to check them out and make a sound judgement as it relates to your team and project requirements.</p>
<p>That said, I have found <a href="http://browserify.org/">browserify</a> extremely beneficial and am going to use it for the examples in this series in delivering the client-side scripts.</p>
<p>First order of business is to install <strong>browserify</strong> as you would any project-local node module:</p>
<pre><code><span class="hljs-variable">$ </span>npm install browserify
</code></pre><p>Now we need to define how we want our module to be bundled for the browser. If we are talking a single entry point - which most main files are - I prefer to define a global name to assign our module so it is easily accessible on the DOM. Keeping in mind that we are primarily bundling our code so we can do TDD, we define an proper output directory that won&#39;t get mixed up with our distribution:</p>
<pre><code>$ mkdir test/script &amp;&amp; \
  node node_modules/<span class="hljs-preprocessor">.bin</span>/browserify script/app<span class="hljs-preprocessor">.js</span> -o test/script/app<span class="hljs-preprocessor">.js</span> -s grocerylist
</code></pre><p>With that command, we created the output directory for our main file - <code>app.js</code> - and bundled the <em>script/app.js</em> file with any dependencies (which currently were only <em>script/model/grocery-list.js</em>). As well, our module is accessible on the <code>window</code> object as <code>grocerylist</code>.</p>
<h2 id="index-file">Index File</h2>
<p>So we have our bundled scripts and an exposed entry to our application through <code>window.grocerylist</code>, and now we need a way to access and view the application - an html file.</p>
<p>Because we will be using the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> tool to bundle our features and specs to be run under a browser environment, we will copy and modify the default template shipped with that tool to suit our needs for our application.</p>
<p>At this stage, we are simply going to add a <code>script</code> tag for our application bundle we created in the previous section:</p>
<p><em>template/testrunner.html</em></p>
<pre><code><span class="hljs-doctype">&lt;!doctype html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">http-equiv</span>=<span class="hljs-value">"Content-Type"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"text/html;charset=utf-8"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"lib/cucumber.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"features.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="vbscript">&lt;% _.<span class="hljs-keyword">each</span>(modules, <span class="hljs-keyword">function</span>(module) { %&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"&lt;%= module.filepath %&gt;"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="vbscript">&lt;% }); %&gt;</span>
    <span class="vbscript">&lt;% <span class="hljs-keyword">if</span>(listener.exists) { %&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"script/&lt;%= listener.filename %&gt;"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="vbscript">&lt;% }; %&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">
      (<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(window)</span> {</span>

        <span class="hljs-comment">// Need to concat all *.features &gt; browserify.standalone = cukefeatures</span>
        <span class="hljs-keyword">var</span> features = window.cukefeatures.split(<span class="hljs-string">'&amp;crarr'</span>).join(<span class="hljs-string">'\n'</span>);

        <span class="hljs-comment">// Need to concat all support + step_definitions, and export as a function</span>
        <span class="hljs-keyword">var</span> support = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
          <span class="hljs-keyword">this</span>.Given = <span class="hljs-keyword">this</span>.When = <span class="hljs-keyword">this</span>.Then = <span class="hljs-keyword">this</span>.defineStep;
          <span class="hljs-comment">// Would be put on window if /support/world found.</span>
          <span class="hljs-keyword">if</span>(<span class="hljs-string">'world'</span> <span class="hljs-keyword">in</span> window) {
            <span class="hljs-keyword">this</span>.World = window[<span class="hljs-string">'world'</span>].World;
          }
          &lt;% _.each(steps, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(step)</span> {</span> %&gt;
          window[<span class="hljs-string">'&lt;%= step.name %&gt;'</span>].call(<span class="hljs-keyword">this</span>);
          <span class="xml"><span class="vbscript">&lt;% }); %&gt;</span>
        };

        var runtime = Cucumber(features, support);
        <span class="vbscript">&lt;% <span class="hljs-keyword">if</span>(listener.exists) { %&gt;</span>
        runtime.attachListener(window.cukelistener.instance());
        <span class="vbscript">&lt;% }; %&gt;</span>
        runtime.start(function(){
          <span class="vbscript">&lt;% <span class="hljs-keyword">if</span>(listener.exists) { %&gt;</span>
          window.cukelistener.instance().complete();
          <span class="vbscript">&lt;% } <span class="hljs-keyword">else</span> { %&gt;</span>
          console.log(Array.prototype.slice.call(arguments));
          <span class="vbscript">&lt;% }; %&gt;</span>
        });
      }(window));
    </span></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"./script/app.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>
</code></pre><p>Most of what is in this page template is copied from the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> project. The only addition - at this point - is the script appended within the <code>body</code> that will load our app bundle.</p>
<p>If we were to run the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> tool and generate our bundled app, specs and template:</p>
<pre><code>$ cucumberjs<span class="hljs-attribute">-browser</span> <span class="hljs-attribute">-o</span> test <span class="hljs-subst">--</span>tmpl template/testrunner<span class="hljs-built_in">.</span>html <span class="hljs-attribute">-f</span> tap
</code></pre><p>That will generate the JavaScript bundle files for the <strong>Features</strong>, <strong>Step Definitions</strong> and support files we have been creating and curating in this series, along with the templated HTML file with our resources defined and place them in a <em>/test</em> directory.</p>
<p>If we were to open that HTML file - <em>/test/cucumberjs-testrunner.html</em> - and opened the Console of our developer tools, we would see a <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol">TAP</a> report of our test... <span style="color: red;">failing</span> :)</p>
<p>If we were to change the format option:</p>
<pre><code>$ cucumberjs<span class="hljs-attribute">-browser</span> <span class="hljs-attribute">-o</span> test <span class="hljs-subst">--</span>tmpl template/testrunner<span class="hljs-built_in">.</span>html <span class="hljs-attribute">-f</span> ui
</code></pre><p>We would see those same <span style="color:red;">failing</span> tests, but this time on the DOM.</p>
<div style="width: 100%; overflow-x: scroll; background-color:#fff; text-align: center;">
  <img src="http://custardbelly.com/blog/images/cucumberjs-browser-2.png" alt="cucumberjs in the browser, failing">
</div>

<p>We have gone from failing on the command line to failing in the browser... isn&#39;t it glorious :)</p>
<h2 id="automate-all-the-things">Automate all the things</h2>
<p>We had <a href="http://custardbelly.com/blog/blog-posts/2014/01/29/cucumberjs-build/index.html">previously automated our testing</a> under the node-based environment; it was a simple as setting up a file watcher and issuing a command to run the <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> CLI tool on change.</p>
<p>Our process has now become a little more involved, but not anything too complex (<em>thanks to the wonderful <a href="https://www.npmjs.org/">npm</a> community!</em>) that an automated build and test procedure couldn&#39;t be implemented. The only difference is that feedback will now reside in the DOM and/or Console of a browser - so instead of coding in an editor and watching it fail on the command line, we are now going to need to focus on failures reported in the browser as we TDD.</p>
<h3 id="watch-script">watch script</h3>
<p>Just as we had done in a <a href="http://custardbelly.com/blog/blog-posts/2014/01/29/cucumberjs-build/index.html">previous article</a>, we are going to create a new script that will essentially do the following:</p>
<ol>
<li>start a livereload server</li>
<li>start a local server to serve the testrunner</li>
<li>launch the testrunner in a browser</li>
<li>bundle the app and run the cucumberjs-browser tool</li>
<li>watch and reload the testrunner in the browser on change to source files</li>
</ol>
<p>To accomplish this task, we are going to use a couple more npm modules; in particular:</p>
<ol>
<li><a href="https://github.com/mklabs/tiny-lr">tiny-lr</a></li>
<li><a href="https://github.com/senchalabs/connect">connect</a></li>
<li><a href="https://github.com/jjrdn/node-open">open</a></li>
</ol>
<p>I invite you to go check each of those projects out as I won&#39;t go into much detail about each of them in this article. It should be noted, however, that you will need to install the <a href="http://livereload.com/">LiveReload</a> <a href="http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-">browser extension(s)</a> in order to properly use the <code>watch</code> script:</p>
<p><em>cuke-browser-watcher.js</em></p>
<pre><code>#!<span class="hljs-regexp">/usr/</span>bin/env node
<span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);
<span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);
<span class="hljs-keyword">var</span> watch = <span class="hljs-built_in">require</span>(<span class="hljs-string">'node-watch'</span>);
<span class="hljs-keyword">var</span> child_process = <span class="hljs-built_in">require</span>(<span class="hljs-string">'child_process'</span>);
<span class="hljs-keyword">var</span> mkdirp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'mkdirp'</span>);
<span class="hljs-keyword">var</span> browserify = <span class="hljs-built_in">require</span>(<span class="hljs-string">'browserify'</span>);

<span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>);
<span class="hljs-keyword">var</span> tinylr = <span class="hljs-built_in">require</span>(<span class="hljs-string">'tiny-lr'</span>);
<span class="hljs-keyword">var</span> connect = <span class="hljs-built_in">require</span>(<span class="hljs-string">'connect'</span>);
<span class="hljs-keyword">var</span> open = <span class="hljs-built_in">require</span>(<span class="hljs-string">'open'</span>);
<span class="hljs-keyword">var</span> S = <span class="hljs-built_in">require</span>(<span class="hljs-string">'string'</span>);

<span class="hljs-keyword">var</span> outdir = <span class="hljs-string">'test'</span>;
<span class="hljs-keyword">var</span> browserCukes;

<span class="hljs-keyword">var</span> livereloadPort = <span class="hljs-number">35729</span>;
<span class="hljs-keyword">var</span> connectPort = <span class="hljs-number">8080</span>;
<span class="hljs-keyword">var</span> JS_EXT = <span class="hljs-regexp">/^.*\.js/i</span>;
<span class="hljs-keyword">var</span> options = [<span class="hljs-string">'-f'</span>, <span class="hljs-string">'ui'</span>,
               <span class="hljs-string">'-o'</span>, outdir,
               <span class="hljs-string">'--tmpl'</span>, <span class="hljs-string">'template/testrunner.html'</span>];

<span class="hljs-comment">// [TASKS]</span>
<span class="hljs-comment">// a. re-bundle the app.</span>
<span class="hljs-keyword">var</span> bundleApplication = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(f, callback)</span> {</span>
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    browserify(__dirname + <span class="hljs-string">'/script/app.js'</span>)
      .bundle({
        standalone: <span class="hljs-string">'app'</span>
      })
      .pipe(fs.createWriteStream(path.resolve(outdir + <span class="hljs-string">'/script/app.js'</span>)))
      .on(<span class="hljs-string">'close'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
        console.log(<span class="hljs-string">'changed app.js...'</span>);
        <span class="hljs-keyword">if</span>(callback) {
          callback();
        }
      });
  };
};
<span class="hljs-comment">// b. rerun cucumberjs-browser tool.</span>
<span class="hljs-keyword">var</span> cuke = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(f, callback)</span> {</span>
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">var</span> filename = S(path.basename(f, <span class="hljs-string">'.js'</span>).split(<span class="hljs-string">'.'</span>).join(<span class="hljs-string">'-'</span>)).camelize().s;
    browserCukes = child_process.spawn(<span class="hljs-string">'cucumberjs-browser'</span>, options)
      .on(<span class="hljs-string">'exit'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
        console.log(<span class="hljs-string">'changed '</span> + filename + <span class="hljs-string">'...'</span>);
        <span class="hljs-keyword">if</span>(callback) {
          callback();
        }
      });
  };
};

<span class="hljs-comment">// 1. Recursive mkdir /test/script if not exist.</span>
mkdirp.sync(outdir + <span class="hljs-string">'/script'</span>);

<span class="hljs-comment">// 2. Create tiny-livereload server.</span>
<span class="hljs-keyword">var</span> lr = tinylr();
lr.listen(livereloadPort, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  console.log(<span class="hljs-string">'livereload listening on '</span> + livereloadPort + <span class="hljs-string">'...'</span>);
});

<span class="hljs-comment">// 3. Start server on localhost.</span>
<span class="hljs-keyword">var</span> app = connect().use(connect.static(__dirname + <span class="hljs-string">'/test'</span>));
<span class="hljs-keyword">var</span> server = http.createServer(app).listen(connectPort, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  console.log(<span class="hljs-string">'local server started on '</span> + connectPort + <span class="hljs-string">'...'</span>);
  console.log(<span class="hljs-string">'Note: Remember to start the livereload browser extension!'</span>);
  console.log(<span class="hljs-string">'http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-'</span>);
  cuke(<span class="hljs-string">'./features/support/world'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    bundleApplication(<span class="hljs-string">'./script/app.js'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
      open(<span class="hljs-string">'http://localhost:'</span> + connectPort + <span class="hljs-string">'/cucumber-testrunner.html'</span>);  
    })();
  })();
});

<span class="hljs-comment">// 4. Watch source and generate bundles.</span>
watch([<span class="hljs-string">'./features'</span>, <span class="hljs-string">'./script'</span>], {recursive:<span class="hljs-literal">true</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(filename)</span> {</span>
  <span class="hljs-comment">// Used to resolve when running operation(s) are complete.</span>
  <span class="hljs-keyword">var</span> resolver;
  <span class="hljs-keyword">var</span> running = <span class="hljs-literal">false</span>;
  <span class="hljs-keyword">var</span> resolveWatch = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(limit)</span> {</span>
    <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;
    running = <span class="hljs-literal">true</span>;
    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
      <span class="hljs-keyword">if</span>(++count === limit) {
        count = <span class="hljs-number">0</span>;
        running = <span class="hljs-literal">false</span>;
      }
      <span class="hljs-keyword">else</span> {
        running = <span class="hljs-literal">true</span>;
      }
    };
  };

  <span class="hljs-keyword">if</span>(!running &amp;&amp; filename.match(JS_EXT)) {
    <span class="hljs-keyword">var</span> bundleAppInvoke = bundleApplication(filename, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
      lr.changed({
        body: {
          files: [<span class="hljs-string">'script/app'</span>]
        }
      });
      resolver();
    });
    <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/^script?/i</span>.test(filename)) {
      resolver = resolveWatch(<span class="hljs-number">1</span>);
      bundleAppInvoke();
    }
    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/^features?/i</span>.test(filename)) {
      resolver = resolveWatch(<span class="hljs-number">2</span>);
      cuke(filename, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
        lr.changed({
          body: {
            files: [filename]
          }
        });
        resolver();
        bundleAppInvoke();
      })();
    }
  }

});
</code></pre><p>This <code>watch</code> script is very similar to the one we created previously. Aside from moving the bundler tasks outside of the <code>watch()</code>, the main difference is that we now start a <code>tiny-livereload</code> server and <code>http</code> server running on port 8080 before starting the <code>watch</code> task.</p>
<p>Running this will also automatically launch the testrunner in your default browser. It is important to note that, in order for the reload on file change to work, you must enable the <a href="http://livereload.com/">LiveReload</a> <a href="http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-">browser extension for that browser</a>.</p>
<p>As we have done before, we can add this to our package <code>scripts</code>:</p>
<p><em>package.json</em></p>
<pre><code>{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"cucumberjs-examples"</span>,
<span class="hljs-keyword">...</span>
  <span class="hljs-string">"scripts"</span>: {
    <span class="hljs-string">"test"</span>: <span class="hljs-string">"node node_modules/.bin/cucumber-js"</span>,
    <span class="hljs-string">"watch"</span>: <span class="hljs-string">"node cuke-watcher.js"</span>,
    <span class="hljs-string">"watch-browser"</span>: <span class="hljs-string">"node cuke-browser-watcher"</span>
  }
<span class="hljs-keyword">...</span>
}
</code></pre><p>Open up the terminal and enter the following command:</p>
<pre><code><span class="hljs-variable">$ </span>npm run watch-browser
</code></pre><p>... and we are all set to keep TDD&#39;ing with an automated <code>watch</code> script that will reload the browser on change to our step definitions and application source files!</p>
<h2 id="back-to-passing">Back to Passing</h2>
<p>We side-stepped our development to address a few key issues: bundling scripts for the browser and automating tests against <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a>. With our <code>watch</code> script up and running, we can see we are in the <span style="color:red;">red</span> still - let&#39;s start turning steps <span style="color:green">green</span> :)</p>
<p>First order of business is that our first <strong>Given</strong> step for the Add Item View <strong>Feature</strong> is interfacing with a currently non-existant API on the <strong>World</strong>. We eschewed the need for an additional Web Driver library which would provide a conventient API through a browser facade. At this stage, I think we can reasonably have our <strong>World</strong> provide that API and not need to include more external libraries. </p>
<p><em>It might even be a reasonable discussion that such Web Drivers are not needed at all in such circumstances, but I won&#39;t go there for the moment as that gets into a discussion about integration testing vs unit testing and BDD practice - ie, a can of worms ;)</em></p>
<h3 id="modifying-our-world">Modifying Our World</h3>
<p>Now that we know we are running our tests in the browser, we have access to the global <code>window</code> and can reference the DOM without restriction to running <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> under <a href="http://nodejs.org">node</a>.</p>
<p>Let&#39;s modify our <strong>World</strong> to expose the API we are invoking from our <strong>Given</strong> in the Add Item View __Feature:</p>
<p><em>/features/support/world.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> World = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">World</span><span class="hljs-params">(callback)</span> {</span>

  <span class="hljs-keyword">this</span>.window = window;
  <span class="hljs-keyword">this</span>.app = window.app;
  <span class="hljs-keyword">this</span>.groceryListApplication = <span class="hljs-literal">undefined</span>;

  <span class="hljs-keyword">this</span>.openGroceryList = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.app.newSession();
  };
  <span class="hljs-keyword">this</span>.createGroceryItem = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-string">'apple'</span>;
  };

  <span class="hljs-keyword">this</span>.emptyGroceryListView = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">this</span>.app.empty();
  };

  callback();

};

module.exports.World = World;
</code></pre><p>There is actually a quite bit changed from our previous <strong>World</strong>:</p>
<ol>
<li>Removed <code>require()</code> of app module</li>
<li>Added access to <code>app</code> reference on <code>window</code> from our browserified bundle</li>
<li>Changed reference to <code>app</code> that creates a new session</li>
<li>Added <code>emptyGroceryListView</code> method to World</li>
</ol>
<p>So we took the <strong>World</strong> into a browser environment with its referencing the app, but we are still (as expected) failing - this time alerting us to:</p>
<p><span style="color:red;">- Cannot call method &#39;newSession&#39; of undefined at World.openGroceryList</span></p>

<p>which is stemming from our previously defined <strong>Background</strong> step definition:</p>
<pre><code><span class="hljs-keyword">Background</span>: Grocery <span class="hljs-keyword">List</span> Application is <span class="hljs-keyword">Open</span>
  Given <span class="hljs-keyword">I</span> have opened the grocery list application
</code></pre><p>This actually stems from a much larger problem: accessing the the application module on the <code>window</code> before it has finished being loaded by the browser. As such, we will need to modify this step definition to ensure that the DOM has completed load before we can move forward in interactinf with the <strong>World</strong> API that now exposes communication to the DOM.</p>
<p>_/features/step<em>definitions/background-open-application.step.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;
<span class="hljs-keyword">var</span> assert = <span class="hljs-built_in">require</span>(<span class="hljs-string">'assert'</span>);

module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  <span class="hljs-keyword">this</span>.World = <span class="hljs-built_in">require</span>(<span class="hljs-string">'../support/world'</span>).World;

  <span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have opened the grocery list application$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    (<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(world)</span> {</span>
      world.domload(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
        world.groceryListApplication = world.openGroceryList();
        assert(world.groceryListApplication, <span class="hljs-string">'Grocery List Application is required to be open for editability.'</span>);
        callback();
      });
    }(<span class="hljs-keyword">this</span>));
  });

};
</code></pre><p>Now we are offloading our assertion and callback to the complete of DOM load through the <strong>World</strong> to ensure that we have successfully loaded the application.</p>
<p>This will now fail on <span style="color: red;">- Object #&lt;World&gt; has no method &#39;domload&#39;</span>, so let&#39;s get that fixed up:</p>
<p><em>/features/support/world.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> World = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">World</span><span class="hljs-params">(callback)</span> {</span>

  <span class="hljs-keyword">this</span>.window = process.browser ? window : {};
  <span class="hljs-keyword">this</span>.app = <span class="hljs-literal">undefined</span>;
  <span class="hljs-keyword">this</span>.groceryListApplication = <span class="hljs-literal">undefined</span>;

  <span class="hljs-keyword">var</span> defineGlobals = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(w, doc)</span> {</span>
    <span class="hljs-keyword">this</span>.app = w.app;
  };

  <span class="hljs-keyword">this</span>.domload = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    (<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(world)</span> {</span>
      <span class="hljs-keyword">if</span>(document.readyState === <span class="hljs-string">'complete'</span>) {
        defineGlobals.call(world, window, document);
        callback();  
      }
      <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">var</span> delegate = document.addEventListener ? <span class="hljs-string">'addEventListener'</span> : <span class="hljs-string">'attachEvent'</span>;
        <span class="hljs-keyword">var</span> eventType = document.addEventListener ? <span class="hljs-string">'load'</span> : <span class="hljs-string">'onload'</span>;
        window[delegate](eventType, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
          defineGlobals.call(world, window, document);
          callback();
        });
      }
    }(<span class="hljs-keyword">this</span>));
  };

  <span class="hljs-keyword">this</span>.openGroceryList = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.app.newSession();
  };
  <span class="hljs-keyword">this</span>.createGroceryItem = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-string">'apple'</span>;
  };

  callback();

};

module.exports.World = World;
</code></pre><p>Woohoo! Now we are back with the exception <span style="color: red;">Object #&lt;World&gt; has no method &#39;emptyGroceryListView&#39;</span> that got us in this mess... <em>BUT</em> the previous tests we had <span style="color: green;">passing</span> are now passing again :)</p>
<p>For the sake of getting too &quot;noisy&quot; with code and explanations, for the following edits - unless an explanation is deemed worthy - I will just roll along with modifications to the test and source and show the series of <span style="color: red;">failures</span>.</p>
<p><em>/features/support/world.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> World = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">World</span><span class="hljs-params">(callback)</span> {</span>

  <span class="hljs-keyword">this</span>.window = process.browser ? window : {};
  <span class="hljs-keyword">this</span>.app = <span class="hljs-literal">undefined</span>;
  <span class="hljs-keyword">this</span>.groceryListApplication = <span class="hljs-literal">undefined</span>;

...

  <span class="hljs-keyword">this</span>.emptyGroceryListView = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">this</span>.groceryListApplication.empty();
  };

  callback();

};

module.exports.World = World;
</code></pre><p><span style="color: red;">- Object #&lt;World&gt; has no method &#39;empty&#39; at World.emptyGroceryListView</span></p>

<p><em>/script/app.js</em></p>
<pre><code><span class="hljs-keyword">...</span>

var application = {
  init: <span class="hljs-keyword">function</span>(list) {
    this.list = list;
    <span class="hljs-keyword">return</span> this;
  },
  empty: <span class="hljs-keyword">function</span>() {
    this.list.empty();
  }
};

<span class="hljs-keyword">...</span>
</code></pre><p><span style="color: red;">- Object #&lt;World&gt; has no method &#39;getGroceryListView&#39; at World</span></p>

<p><em>/features/support/world.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> World = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">World</span><span class="hljs-params">(callback)</span> {</span>

  <span class="hljs-keyword">this</span>.window = process.browser ? window : {};
  <span class="hljs-keyword">this</span>.app = <span class="hljs-literal">undefined</span>;
  <span class="hljs-keyword">this</span>.groceryListApplication = <span class="hljs-literal">undefined</span>;

...

  <span class="hljs-keyword">this</span>.getGroceryListView = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">this</span>.groceryListApplication.$listview;
  };

  callback();

};

module.exports.World = World;
</code></pre><p><span style="color: red;">- Cannot read property &#39;childNodes&#39; of undefined at World</span></p>

<p><em>/script/app.js</em></p>
<pre><code><span class="hljs-keyword">...</span>

var application = {
  init: <span class="hljs-keyword">function</span>(list) {
    this.list = list;
    this.$listview = document.querySelector(<span class="hljs-string">'#grocery-list'</span>);
    <span class="hljs-keyword">return</span> this;
  },
  empty: <span class="hljs-keyword">function</span>() {
    var gl = this.$listview;
    <span class="hljs-keyword">while</span> (gl.hasChildNodes()) {
      gl.removeChild(gl.lastChild);
    }
    this.list.empty();
  }
};

<span class="hljs-keyword">...</span>
</code></pre><p><span style="color: red;">- Cannot read property &#39;childNodes&#39; of null at World</span></p>

<p><em>/template/testrunner.html</em></p>
<pre><code><span class="hljs-doctype">&lt;!doctype html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
    ...
    <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"grocery-list"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"./script/app.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>
</code></pre><p>And we are back to <span style="color: green;">green</span>!... and <span style="color: rgb(117, 117, 37);">pending</span>. Let&#39;s move on to our next step definition:</p>
<h3 id="when-i-provide-a-valid-grocery-list-item-name">When I provide a valid grocery list item name</h3>
<p>_/features/step<em>definitions/add-item-view.steps.js</em></p>
<pre><code><span class="hljs-keyword">...</span>

var enteredItem;

this.Given(/^I have an empty grocery list view$/, <span class="hljs-keyword">function</span>(callback) {
  this.emptyGroceryListView();
  assert.equal(this.getGroceryListView().childNodes.length, <span class="hljs-number">0</span>);
  callback();
});

this.When(/^I provide a valid grocery list item name$/, <span class="hljs-keyword">function</span>(callback) {
  enteredItem = this.createGroceryItem();
  this.enterNewGorceryListItem(enteredItem);
  callback();
});

<span class="hljs-keyword">...</span>
</code></pre><p>Back in the <span style="color: red;">red</span>!  </p>
<p><span style="color: red;">- Object #&lt;World&gt; has no method &#39;enterNewGorceryListItem&#39; at World</span></p>

<p><em>/features/support/world.js</em></p>
<pre><code><span class="hljs-keyword">var</span> World = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">World</span><span class="hljs-params">(callback)</span> {</span>

  <span class="hljs-keyword">this</span>.window = process.browser ? window : {};
  <span class="hljs-keyword">this</span>.app = <span class="hljs-literal">undefined</span>;
  <span class="hljs-keyword">this</span>.groceryListApplication = <span class="hljs-literal">undefined</span>;

  <span class="hljs-keyword">var</span> defineGlobals = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(w, doc)</span> {</span>
    <span class="hljs-keyword">this</span>.app = w.app;
  };

...

  <span class="hljs-keyword">this</span>.enterNewGorceryListItem = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>
    <span class="hljs-keyword">this</span>.groceryListApplication.enterNewItem(item);
  };

  callback();

};

module.exports.World = World;
</code></pre><p><span style="color: red;">- Object #&lt;Object&gt; has no method &#39;enterNewItem&#39; at World.enterNewGorceryListItem</span></p>

<p><em>/script/app.js</em></p>
<pre><code><span class="hljs-keyword">...</span>

var application = {
  init: <span class="hljs-keyword">function</span>(list) {
    this.list = list;
    this.$listview = document.querySelector(<span class="hljs-string">'#grocery-list'</span>);
    this.$itemInputView = document.querySelector(<span class="hljs-string">'#item-input'</span>);
    <span class="hljs-keyword">return</span> this;
  },
  empty: <span class="hljs-keyword">function</span>() {
    var gl = this.$listview;
    <span class="hljs-keyword">while</span> (gl.hasChildNodes()) {
      gl.removeChild(gl.lastChild);
    }
    this.list.empty();
  },
  enterNewItem: <span class="hljs-keyword">function</span>(item) {
    this.$itemInputView.value = item;
  }
};

<span class="hljs-keyword">...</span>
</code></pre><p><span style="color: red;">- Cannot set property &#39;value&#39; of null at Object.application.enterNewItem</span></p>

<p><em>/template/testrunner.html</em></p>
<pre><code><span class="hljs-doctype">&lt;!doctype html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
    ...
    <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"grocery-list"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">form</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"itemInput"</span>&gt;</span>Item name:<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"item-input"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"itemInput"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">item</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"./script/app.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>
</code></pre><p>Back to <span style="color: rgb(117, 117, 37);">pending</span>! Next step:</p>
<h3 id="and-i-select-to-add-an-item">And I select to add an item</h3>
<p>_/features/step<em>definitions/add-item-view.steps.js</em></p>
<pre><code><span class="hljs-keyword">...</span>

this.When(/^I select to add an item$/, <span class="hljs-keyword">function</span>(callback) {
  this.clickAddGroceryListItem();
  callback();
});

<span class="hljs-keyword">...</span>
</code></pre><p><span style="color: red;">- Object #&lt;World&gt; has no method &#39;clickAddGroceryListItem&#39; at World.</span></p>

<p><em>/features/support/world.js</em></p>
<pre><code><span class="hljs-keyword">var</span> World = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">World</span><span class="hljs-params">(callback)</span> {</span>

  <span class="hljs-keyword">this</span>.window = process.browser ? window : {};
  <span class="hljs-keyword">this</span>.app = <span class="hljs-literal">undefined</span>;
  <span class="hljs-keyword">this</span>.groceryListApplication = <span class="hljs-literal">undefined</span>;

  <span class="hljs-keyword">var</span> defineGlobals = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(w, doc)</span> {</span>
    <span class="hljs-keyword">this</span>.app = w.app;
  };

...

  <span class="hljs-keyword">this</span>.createClickEvent = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">var</span> event = document.createEvent(<span class="hljs-string">'MouseEvents'</span>);
    event.initEvent(<span class="hljs-string">'click'</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);
    <span class="hljs-keyword">return</span> event;
  };

  <span class="hljs-keyword">this</span>.clickAddGroceryListItem = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">var</span> clickevent = <span class="hljs-keyword">this</span>.createClickEvent();
    <span class="hljs-keyword">this</span>.groceryListApplication.$addbutton.dispatchEvent(clickevent);
  };

...

  callback();

};

module.exports.World = World;
</code></pre><p><span style="color: red;">- Cannot call method &#39;dispatchEvent&#39; of undefined at World.clickAddGroceryListItem</span></p>

<p><em>/script/app.js</em></p>
<pre><code><span class="hljs-keyword">var</span> application = {
  init: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(list)</span> {</span>
    this.<span class="hljs-keyword">list</span> = <span class="hljs-keyword">list</span>;
    this.<span class="hljs-variable">$listview</span> = document.querySelector(<span class="hljs-string">'#grocery-list'</span>);
    this.<span class="hljs-variable">$itemInputView</span> = document.querySelector(<span class="hljs-string">'#item-input'</span>);
    this.<span class="hljs-variable">$addbutton</span> = document.querySelector(<span class="hljs-string">'#add-button'</span>);
    <span class="hljs-keyword">return</span> this;
  },
  <span class="hljs-keyword">empty</span>: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">var</span> gl = this.<span class="hljs-variable">$listview</span>;
    <span class="hljs-keyword">while</span> (gl.hasChildNodes()) {
      gl.removeChild(gl.lastChild);
    }
    this.<span class="hljs-keyword">list</span>.<span class="hljs-keyword">empty</span>();
  },
  enterNewItem: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>
    this.<span class="hljs-variable">$itemInputView</span>.value = item;
  }
};
</code></pre><p><span style="color: red;">- Cannot call method &#39;dispatchEvent&#39; of null at World.clickAddGroceryListItem</span></p>

<p><em>/template/testrunner.html</em></p>
<pre><code><span class="hljs-doctype">&lt;!doctype html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
    ...
    <span class="hljs-tag">&lt;<span class="hljs-title">ul</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"grocery-list"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">form</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">label</span> <span class="hljs-attribute">for</span>=<span class="hljs-value">"itemInput"</span>&gt;</span>Item name:<span class="hljs-tag">&lt;/<span class="hljs-title">label</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"item-input"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"itemInput"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">item</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">"add-button"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"button"</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"./script/app.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>
</code></pre><p>Back to <span style="color: rgb(117, 117, 37);">pending</span>! We&#39;re getting into assertion territory :) Next step:</p>
<h3 id="then-the-item-is-added-to-the-grocery-list-view">Then The item is added to the grocery list view</h3>
<p>_/features/step<em>definitions/add-item-view.steps.js</em></p>
<pre><code><span class="hljs-keyword">...</span>

this.Then(/^The item is added to the grocery list view$/, <span class="hljs-keyword">function</span>(callback) {
  assert.equal(this.getGroceryListViewItemAtIndex(<span class="hljs-number">0</span>), enteredItem, <span class="hljs-string">'Entered item should be first in empty list.'</span>);
  callback();
});

<span class="hljs-keyword">...</span>
</code></pre><p><span style="color: red;">- Object #&lt;World&gt; has no method &#39;getGroceryListViewItemAtIndex&#39; at World</span></p>

<p><em>/features/support/world.js</em></p>
<pre><code>var World = <span class="hljs-keyword">function</span> World(callback) {

  this.window = process.browser ? window : {};
  this.app = undefined;
  this.groceryListApplication = undefined;

  var defineGlobals = <span class="hljs-keyword">function</span>(w, doc) {
    this.app = w.app;
  };

<span class="hljs-keyword">...</span>

  this.getGroceryListViewItemAtIndex = <span class="hljs-keyword">function</span>(index) {
    <span class="hljs-keyword">return</span> this.groceryListApplication.$listview.childNodes[index].textContent;
  }

<span class="hljs-keyword">...</span>

  callback();

};

module.exports.World = World;
</code></pre><p><span style="color: red;">- Cannot read property &#39;textContent&#39; of undefined at World.getGroceryListViewItemAtIndex</span></p>

<p><em>/script/app.js</em></p>
<pre><code>...

<span class="hljs-keyword">var</span> application = {
  init: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(list)</span> {</span>
    this.<span class="hljs-keyword">list</span> = <span class="hljs-keyword">list</span>;
    this.<span class="hljs-variable">$listview</span> = document.querySelector(<span class="hljs-string">'#grocery-list'</span>);
    this.<span class="hljs-variable">$itemInputView</span> = document.querySelector(<span class="hljs-string">'#item-input'</span>);
    this.<span class="hljs-variable">$addbutton</span> = document.querySelector(<span class="hljs-string">'#add-button'</span>);
    (<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(app)</span> {</span>
      app.<span class="hljs-variable">$addbutton</span>.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(event)</span> {</span>
        <span class="hljs-keyword">var</span> item = app.<span class="hljs-variable">$itemInputView</span>.value;
        app.addItemToView(item);
      });
    }(this));
    <span class="hljs-keyword">return</span> this;
  },
  <span class="hljs-keyword">empty</span>: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">var</span> gl = this.<span class="hljs-variable">$listview</span>;
    <span class="hljs-keyword">while</span> (gl.hasChildNodes()) {
      gl.removeChild(gl.lastChild);
    }
    this.<span class="hljs-keyword">list</span>.<span class="hljs-keyword">empty</span>();
  },
  enterNewItem: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>
    this.<span class="hljs-variable">$itemInputView</span>.value = item;
  },
  addItemToView: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>
    <span class="hljs-keyword">var</span> li = document.createElement(<span class="hljs-string">'li'</span>);
    <span class="hljs-keyword">var</span> text = document.createTextNode(item);
    li.appendChild(text);
    this.<span class="hljs-variable">$listview</span>.appendChild(li);
  }
};

...
</code></pre><p>By adding a <code>click</code> handler to the <code>button</code>, we are updating the view by adding a <code>li</code> element to the list view.</p>
<p>And we&#39;re back to <span style="color: rgb(117, 117, 37);">pending</span>! One last step:</p>
<h3 id="then-the-item-is-accessible-from-the-grocery-list-collection">Then The item is accessible from the grocery list collection</h3>
<p>_/features/step<em>definitions/add-item-view.steps.js</em></p>
<pre><code><span class="hljs-keyword">...</span>

this.Then(/^The item is accessible from the grocery list collection$/, <span class="hljs-keyword">function</span>(callback) {
  assert.equal(this.groceryListApplication.list.getItemIndex(enteredItem), <span class="hljs-number">0</span>, <span class="hljs-string">'Added item should be found at first index.'</span>);
  callback();
});

<span class="hljs-keyword">...</span>
</code></pre><p>Utilizing the <code>getItemIndex()</code> method we created in passing the collection features from a previous article, we get back to failing.</p>
<p><span style="color: red;">- Added item should be found at first index. at World</span></p>
<p><em>/script/app.js</em></p>
<pre><code><span class="hljs-keyword">...</span>

var application = {
  init: <span class="hljs-keyword">function</span>(list) {
    this.list = list;
    this.$listview = document.querySelector(<span class="hljs-string">'#grocery-list'</span>);
    this.$itemInputView = document.querySelector(<span class="hljs-string">'#item-input'</span>);
    this.$addbutton = document.querySelector(<span class="hljs-string">'#add-button'</span>);
    (<span class="hljs-keyword">function</span>(app) {
      app.$addbutton.addEventListener(<span class="hljs-string">'click'</span>, <span class="hljs-keyword">function</span>(event) {
        var item = app.$itemInputView.value;
        app.addItemToView(item);
        app.list.add(item);
      });
    }(this));
    <span class="hljs-keyword">return</span> this;
  },
  <span class="hljs-keyword">...</span>
};

<span class="hljs-keyword">...</span>
</code></pre><p>In adding a call to <code>list.add()</code> in the button handler within we just defined an update to the view, we bring ourselves to full <span style="color: green;">green</span>!</p>
<div style="width: 100%; overflow-x: scroll; background-color:#fff; text-align: center;">
  <img src="http://custardbelly.com/blog/images/cucumberjs-browser-3.png" alt="cucumberjs in the browser, passing">
</div>

<h2 id="considerations">Considerations</h2>
<p>If you have following along in getting these new browser-based <strong>Features</strong> to pass in that environment, I have taken some liberties with regards to architecture and process with the hopes to not add noise to the task at hand.</p>
<p>In reality, we should consider the next phase as a <em>Refactor</em>. The particular areas in which I see issues that I would address and.or discuss with my team are:</p>
<ul>
<li>Implementing view update based on collection events</li>
<li>Templatize-ing the main view to be wrapped in production and injecting as a partial to the testrunner template</li>
<li>Building the application to be deployed as a web-based application and User Tested</li>
</ul>
<p>I am sure there are more, and that you have a few ideas as well, but these are at least three aspects of the architecture of the project and product that can be tackled with assurance now that we have a test harness for the features criteria :)</p>
<h2 id="conclusion">Conclusion</h2>
<p>If you made it down this far, I do appreciate you taking the time to follow along - I know this was a bit of a long one.</p>
<p>I hoped to have demonstrated the process of going from <strong>Features</strong> to <strong>Step Definitions</strong> to implementation code to pass criteria all while living in a real browser environment using the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> and test automation. On the surface, it may seem like quite a process, but my personal experience is that BDD forces you into thinking about minimilistic design while putting your code under a test harness from which you can maintain and add new features with assurance.</p>
<p>Source for examples related to this post can be found in the <a href="https://github.com/bustardcelly/cucumberjs-examples/tree/0.5.0.post">0.5.0.post tag on my Github account</a>.</p>
<h2 id="to-come">To Come</h2>
<p>There are a few extra productivity tidbits I have picked up while working with the wondeful <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> tool in developing several applications for both the web and server.</p>
<p>Who knows... I have had a blast going through the articles in this series demonstrating TDD using the BDD tool, <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>. I might just continue to evolve the example to a fully-functional application just as I had done in the <a href="http://custardbelly.com/blog/blog-pages/category/grocery-ls.html">Making of a Test-Driven Grocery List Application</a> series which focused on the <a href="http://jasmine.github.io/2.0/introduction.html">Jasmine</a> library.</p>
<p>Additionally, I am invested in the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> I created during (and as a result) of this series and hope to write some more articles on its structure, usage and any additions/fixes that are made and I welcome you to help me in making <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> a great tool in being able run your specs in a real browser environment without having to change your current workflow in defining <strong>Features</strong>, <strong>Step Definitions</strong> and support files.</p>
<p>Cheers!</p>
]]></description><link>/blog-posts/2014/02/12/cucumberjs-browser-update/index.html</link><guid isPermaLink="true">/blog-posts/2014/02/12/cucumberjs-browser-update/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[BDD in JavaScript IV: CucumberJS and The Browser]]></title><description><![CDATA[<p>In my <a href="http://custardbelly.com/blog/blog-posts/2014/01/29/cucumberjs-build/index.html">previous post</a> in this series detailing how I use <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>, I addressed a few common build tools in JavaScript to automate the watching and running of tests. While beneficial to a proper agile workflow, I did not introduce any new concepts or development information directly associated with using CucumberJS, itself.</p>
<p>In this article, I intend to take on a pretty meaty subject - running your cukes in the browser. It is a subject I have grappled with for some time and have tried different solutions, eventually <a href="https://github.com/bustardcelly/cucumberjs-browser">creating my own</a>. </p>
<h3 id="-gt-code">&gt; code</h3>
<p>Supported files related to this and any subsequent posts on this topic will be available at:<br><a href="https://github.com/bustardcelly/cucumberjs-examples">https://github.com/bustardcelly/cucumberjs-examples</a></p>
<p><em>Disclaimer: I did not start out this series to promote the <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> tool. In fact, it came to life as a result of this series :)</em></p>
<h2 id="why-the-browser">Why The Browser</h2>
<p><a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> is built on <a href="http://nodejs.org">Node</a>. As such, the CLI tool that we have been running to verify our tests in previous articles is living in that environment. </p>
<p>This is well and good if we were creating an application that was intended to live within Node. However, what if we are building an application that is to live inside the browser, which is often the case for me as a, primarily, Front End Developer? How do we go from <strong>Features</strong> detailing DOM interaction to passing <strong>Step Definitions</strong> that require a browser environment using <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>?</p>
<h2 id="options">Options</h2>
<p>The following options are those I have found or been alerted to by the community. I have used a few of them to much benefit, but felt there was always one or two things that kept me from truly embracing them as a good solution. I hope to showcase their strengths and weaknesses to allow you to make a more informed decision on what may be the best for your team.</p>
<h3 id="writing-specs-in-the-dom">Writing Specs in the DOM</h3>
<p>Example: <a href="https://github.com/cucumber/cucumber-js/blob/master/example/index.html">https://github.com/cucumber/cucumber-js/blob/master/example/index.html</a>.</p>
<p>This is an example from the <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> team that demonstrates how to define <strong>Features</strong> and <strong>Step Definitions</strong> in <code>textarea</code> elements. These are read and evaluated at runtime by the bundled browser-based CucumberJS library, with the assertions being printed to the DOM as well.</p>
<p>A reasonable approach, and much of its implementation was an inspiration for my <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> tool (addressed later). My main issue with incorporating this into my development and testing workflow is the break in having my <strong>Features</strong>, <strong>Step Definitions</strong> and test support as entities residing in separate files as we have done in the examples of previous articles in this series. Instead of curating <strong>Features</strong> in a much more organized way involving the file system, I would need to maintain them in the textual values defined for <code>textarea</code>s in a web page. My workflow just seemed interrupted in doing so; I could not directly relate a Ticket in our Issue Tracker with a <strong>Feature</strong> file and its associated <strong>Step</strong> file(s).</p>
<h3 id="zombiejs">ZombieJS</h3>
<p>There are small examples on the landing page for <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> repo that are fairly easy to follow and there is a great example <a href="http://www.antonydenyer.co.uk/">Antony Denyer</a> as well: <a href="https://github.com/antonydenyer/zombiejsplayground">https://github.com/antonydenyer/zombiejsplayground</a>.</p>
<p>The <a href="http://zombie.labnotes.org/">ZombieJS</a> API is actually quite easy to understand and use and have incorporated using Zombie in a couple of my projects. The main issue I have in using Zombie in all my projects is &quot;trust&quot;. Not trust in Zombie as a good tool, trust in that the assertions are cross-browser; under the covers, it is a mixture of the DOM library <a href="http://jsdom.org/">JSDom</a>, <a href="https://github.com/brianmcd/contextify">Contextify</a> for V8 execution and various other - very excellent, I should say - libraries that are used to &#39;emulate&#39; a browser in a headless manner.</p>
<p>Again, I don&#39;t want that explanation to take away from the excellent tool that <a href="http://zombie.labnotes.org/">ZombieJS</a> is and its usefulness and benefits it has provided me in previous (and future) projects. Infact, while I was <a href="https://twitter.com/_toddanderson_/status/414210165001699328">extolling its virtues over twitter</a>, <a href="https://twitter.com/s9tpepper">Omar Gonzalez</a> reminded me that it is best to run tests in browsers and tipped me to his project <a href="https://github.com/s9tpepper/karma-cucumberjs">karma-cucumberjs</a>.</p>
<p>Omar was right. While it has a nice API and is quick and easy to get working, it is not a real browser. In the end, I may have false positives and if I was to go to production with my application that requires cross-browser support, issues may arise that the tests did not catch under Zombie.</p>
<h3 id="karma-cucumberjs">karma-cucumberjs</h3>
<p>As mentioned in the previous section, respected TDD&#39;er <a href="https://twitter.com/s9tpepper">Omar Gonzalez</a> has a project - <a href="https://github.com/s9tpepper/karma-cucumberjs">karma-cucumberjs</a> - that allows you to define Cucumber specs for the browser and provides an adapter for the <a href="http://karma-runner.github.io/0.10/index.html">Karma</a> testrunner.</p>
<p>Now, I have not personally tried it (apologies, Omar!), nor do I use <a href="http://karma-runner.github.io/0.10/index.html">Karma</a>. Both are filed under <code>Things to Look Into</code>. I will say, what kept me from jumping in and testing the waters was similar to the reason for not using the <a href="https://github.com/cucumber/cucumber-js/blob/master/example/index.html">DOM example</a> provided by the <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> team: I had to write my <strong>Step Definitions</strong> differently than I normally would - specifically, I would have to wrap them in a <code>addStepDefinitions</code> function.</p>
<p>Again, a viable solution from a venerable developer whom I trust, but I have not personally used because I wanted to keep my workflow relatively the same as I would in defining <strong>Features</strong> and <strong>Step Definitions</strong> for specs don&#39;t need to know about or run under a browser environment.</p>
<h3 id="cucumberjs-browser">cucumberjs-browser</h3>
<p>Not finding a solution that afforded me to simply deploy my <strong>Features</strong>, <strong>Steps Definitions</strong> and subsequent support files to be run in the browser, I decided to make one that would allow me to; and so <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> was born.</p>
<p>In basic terms, what <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> does is bundle the <strong>Features</strong>, <strong>Step Definitions</strong> and any support files into standalone modules (using <a href="http://browserify.org/">browserify</a>) and defines them for a page using a <a href="http://lodash.com/docs">lodash</a> template. Included, as well, is the bundled library from <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>. </p>
<p>When the page is loaded in any browser, the specs are run just as they normally would be from the command line. Through the CLI options, you have the ability to define a listener that will handle the passing and failing of steps. _Current support for <a href="http://en.wikipedia.org/wiki/Test_Anything_Protocol">TAP</a> in console and basic UI. More to come..._</p>
<p>The <a href="https://github.com/bustardcelly/cucumberjs-browser/blob/master/README.md">README</a> is probably the best place to start as it will be kept more up to date than this post in the future, but here is a quick rundown:</p>
<h4 id="installation">Installation</h4>
<p>You install <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> globally through npm:</p>
<pre><code>$ npm install <span class="hljs-attribute">-g</span> cucumberjs<span class="hljs-attribute">-browser</span>
</code></pre><h4 id="usage">Usage</h4>
<p>To run the tool, you can use the following options:</p>
<pre><code>$ <span class="hljs-tag">cucumberjs-browser</span> <span class="hljs-attr_selector">[-o outdir]</span> <span class="hljs-attr_selector">[-f format]</span> <span class="hljs-attr_selector">[--tmpl template]</span> <span class="hljs-attr_selector">[--features features]</span>
</code></pre><p>There are defaults for each of these options and you most likely will only really need to provide a custom template to be used based on the requirements of your project. The basic one that ships with the tool does nothing but load and run your specs: <a href="https://github.com/bustardcelly/cucumberjs-browser/blob/master/template/cucumber-testrunner.template">cucumber-testrunner.template</a>. This should be a jumping off point in which you add your css and scripts and anything else required to get your tests passing. Again, it uses <a href="http://lodash.com/docs">lodash</a> to generate the page, so bear that in mind.</p>
<h4 id="output">Output</h4>
<p>If we were to run <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> against the current work we have been doing in this series and then open any browser, we would be presented with something like the following:</p>
<div style="width: 100%; overflow-x: scroll; background-color:#fff; text-align: center;">
  <img src="http://custardbelly.com/blog/images/cucumberjs-browser-1.png" alt="cucumberjs in the browser">
</div>

<h2 id="conclusion">Conclusion</h2>
<p>For this post, I had originally started updating the example we have been working through in this series to incoprate User Interaction with the application in a browser with <span style="color: red;">failing</span> tests everywhere... it made me smile :) But, I felt it was extending the length of this post to a point in which it was becoming information overload.</p>
<p>As such, I am in the middle of a follow up post in how to utilize <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a> for our current Grocery List Application example in delivering a test-driven browser-based application supported by <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> specs.</p>
<p>At the very least, I hope this post highlighted some possible solutions for testing in the browser and will draw you back to the following post where i go more in depth about working with <a href="https://github.com/bustardcelly/cucumberjs-browser">cucumberjs-browser</a>. &#39;Til then...</p>
]]></description><link>/blog-posts/2014/02/10/cucumberjs-tests-browser/index.html</link><guid isPermaLink="true">/blog-posts/2014/02/10/cucumberjs-tests-browser/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[gulp-rev-append: simple cache-busting plugin]]></title><description><![CDATA[<p>I just released <a href="https://www.npmjs.org/package/gulp-rev-append">gulp-rev-append</a>, a simple cache-busting plugin for <a href="http://gulpjs.org">gulp</a> that appends a query-string file hash to script and stylesheet dependencies in HTML files.</p>
<p>There are <a href="https://www.npmjs.org/search?q=gulp-rev">several other cache-busting plugins</a> currently available by some awesome developers and I suggest you look at those to fit your project&#39;s need.</p>
<p>For my particular project in which I decided to create the <a href="https://www.npmjs.org/package/gulp-rev-append">gulp-rev-append</a> plugin, I was looking to:</p>
<ul>
<li>enable cache-busting by appending a file hash on query string</li>
<li>not require additionally markup commenting to declare dependencies to be modified</li>
<li>not generate an additional manifest to be a dependency in file access for production-level application</li>
</ul>
<p>I was trying to develop a simple web-based mobile site on a desktop while testing on devices and cache-ing was giving me a headache. I did not want to modify my workflow and build to accommodate an addition cache-manifest, nor did I foresee my work requirng a more robust cache-busting technique that the other plugins provided. </p>
<p><em>If this project was to be in millions of hands out in production, I would certainly use a file revving solution such as <a href="https://www.npmjs.org/package/gulp-rev">https://www.npmjs.org/package/gulp-rev</a>.</em></p>
<h2 id="usage">Usage</h2>
<p>The <a href="https://github.com/bustardcelly/gulp-rev-append">gulp-rev-append</a> plugins allows for appending a query-string file hash to dependencies declared in html files defined using the following regex: <code>(?:href|src)=&quot;(.*)[\?]rev=(.*)[\&quot;]</code></p>
<p>That&#39;s fancy talk for any stylesheet or script declarations that are declared in an html file such as the following:</p>
<pre><code><span class="hljs-doctype">&lt;!doctype html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/css"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"style/style-one.css?rev=@@hash"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"script/script-one.js?rev=@@hash"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"script/script-two.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>hello, world!<span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"script/script-three.js?rev=@@hash"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>
</code></pre><p>will turn into something similar as the following after running <code>gulp-rev-append</code>:</p>
<pre><code><span class="hljs-doctype">&lt;!doctype html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/css"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"style/style-one.css?rev=d65aaba987e9c1eefeb4be9cfd34e0de"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"script/script-one.js?rev=17a5da6c8a2d875cf48aefb722eefa07"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"script/script-two.js"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>hello, world!<span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"script/script-three.js?rev=5cadf43edba6a97980d42331f9fffd17"</span>&gt;</span><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>
</code></pre><p>Any subsequent runs of the <code>gulp-rev-append</code> file will change the output <em>only</em> if the target file(s) declared have been modified. This is because the revision hash is computed using the target file contents.</p>
<p>The only requirement is that the dependency to be appended with the hash be declared using <code>?rev=</code>. The <code>@@hash</code> is not required, and any value will be overriden as the dependency file contents change.</p>
<h3 id="installation">Installation</h3>
<pre><code>$ npm install gulp<span class="hljs-attribute">-rev</span><span class="hljs-attribute">-append</span> <span class="hljs-subst">--</span>save<span class="hljs-attribute">-dev</span>
</code></pre><h3 id="declaration">Declaration</h3>
<p><em>gulpfile.js</em></p>
<pre><code><span class="hljs-keyword">var</span> rev = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-rev-append'</span>);

gulp.task(<span class="hljs-string">'rev'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  gulp.src(<span class="hljs-string">'./index.html'</span>)
    .pipe(rev())
    .pipe(gulp.dest(<span class="hljs-string">'.'</span>));
});
</code></pre><h3 id="execution">Execution</h3>
<pre><code><span class="hljs-variable">$ </span>gulp rev
</code></pre><h2 id="a-word-of-warning">A word of warning</h2>
<p>Using query strings to cache-bust dependencies isn&#39;t fool proof. These are some great articles that explain why:</p>
<p><a href="https://developers.google.com/speed/docs/best-practices/caching?csw=1#LeverageProxyCaching">Google | Leverage Proxy Cache Article</a><br><a href="http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/">Steve Souders | Revving Filenames: don&#39;t use querystring</a></p>
<p>As mentioned previously, file revving is a more robust cache-busting technique and there is already a great <a href="http://gulpjs.org">gulp</a> plugin out there called <a href="https://www.npmjs.org/package/gulp-rev">https://www.npmjs.org/package/gulp-rev</a> to fit your development needs.</p>
<h2 id="project">project</h2>
<p><a href="https://github.com/bustardcelly/gulp-rev-append">gulp-rev-append</a></p>
<p>Cheers.</p>
]]></description><link>/blog-posts/2014/03/18/gulp-rev-append/index.html</link><guid isPermaLink="true">/blog-posts/2014/03/18/gulp-rev-append/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[BDD in JavaScript III: CucumberJS and Test Automation]]></title><description><![CDATA[<p>In my <a href="http://custardbelly.com/blog/blog-posts/2014/01/22/cucumberjs-world/index.html">previous post</a> I addressed the concepts of the <strong>World</strong> context and <strong>Background</strong> scenario. I am going to pause in actually working with <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> in delivering code in a BDD manner for this article and address another vital part of the development process: <strong>Automation</strong>.</p>
<h3 id="-gt-code">&gt; code</h3>
<p>Supported files related to this and any subsequent posts on this topic will be available at:<br><a href="https://github.com/bustardcelly/cucumberjs-examples">https://github.com/bustardcelly/cucumberjs-examples</a></p>
<h2 id="why-automate-">Why Automate?</h2>
<p>The benefit of automation is in time saved. If we can pinpoint tasks that we do repetitively during development and automate them, we can save large amounts of time that could be put back into doing more coding, thinking, learning, laughing, beering - the list goes on.</p>
<p>While going through the basics of <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> in the previous articles, I was demonstrating how I use the tool to TDD from the outside-in and constantly hopping back and forth from my code editor to the terminal to run this simple command over and over:</p>
<pre><code><span class="hljs-variable">$ </span>node node_modules/.bin/cucumber-js
</code></pre><p>Now, I am pretty good at <code>CMD+TAB</code> - not to brag - but I would much prefer to get feedback on my tests instantly as I describe my asserts and modify my code. If we automate the running of <strong>Cucumber</strong> on file change, we can start seeing results quicker and we can take that time removed from manually switching between editor and terminal and running commands and put that time back into thinking how to design our code more cleanly :)</p>
<p>This automation and instant feedback really shows its worth in the <strong>Refactor</strong> phase in which you have previously implemented code to pass the criteria in a <strong>Feature</strong>.</p>
<h2 id="task-automation-and-javascript">Task Automation and JavaScript</h2>
<p>When talking about build tools and task automation for JavaScript projects, there are roughly 3 types of task runners that are brought up:</p>
<ol>
<li><a href="http://gruntjs.com/">Grunt</a></li>
<li><a href="http://gulpjs.com/">Gulp</a></li>
<li><a href="http://substack.net/task_automation_with_npm_run">npm run</a></li>
</ol>
<p>There are additional tools that have been around for some time - particularly, in the past I have used <a href="http://ant.apache.org/">Ant</a> and <a href="http://www.gnu.org/software/make/">Make</a> for my build process - but, generally speaking, these are the prevelant tools of the trade in JavaScript as it stands today. </p>
<p>Some people think that each oppose each other, but I lean toward utilizing one or the others based on its merits and the requirements of a project. I have several on-going projects, both professional and personal, and each project actually incorporates one of each of these. I will discuss my thoughts on the value of each tool within each section in which I set up automation for our <a href="https://github.com/cucumber/cucumber-js">Cucumber</a> tests.</p>
<h2 id="npm-run">Npm run</h2>
<p>I&#39;ll start off with the basics. By basics, I mean that there is no additonal tool required to install and get up and running with our test automation; we have everything already installed that we need: node &amp; npm.</p>
<h3 id="benifits">Benifits</h3>
<p><a href="https://twitter.com/substack">James Halliday</a> had previously written a <a href="http://substack.net/task_automation_with_npm_run">great post</a> addressing the use of <code>npm run</code> in task automation, and I agree in so far as keeping things simple. The benefits of defining tasks in the <code>scripts</code> tag of your <code>package.json</code> file are <strong>a) simplicity</strong> and <strong>b) no additional tooling</strong>. I do have the reservations that the &quot;simplicity&quot; vanishes if you have to eventually maintain dozens of tasks - some that may be similar with different arguments - and continually want to run series and parallels. </p>
<p>When your build process becomes more complex, <a href="https://twitter.com/substack">James Halliday</a> does mention moving it to a bash file, but I would argue to perhaps look at a more robust solution with the tools described previously (and in more detail later in this article).</p>
<h3 id="usage">Usage</h3>
<p>If we were to simply take the process of running our tests as we have in previous articles, we can modify our <code>package.json</code> file by adding the following <code>scripts</code> tag and task:</p>
<p><em>package.json</em></p>
<pre><code>{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"cucumberjs-examples"</span>,
  <span class="hljs-keyword">...</span>
  <span class="hljs-string">"scripts"</span>: {
      <span class="hljs-string">"test"</span>: <span class="hljs-string">"node node_modules/.bin/cucumber-js"</span>
  }
  <span class="hljs-keyword">...</span>
}
</code></pre><p>Plain and simple. To run it, we&#39;d hop over to our terminal:</p>
<pre><code>$ npm run test

<span class="hljs-subst">&gt;</span> cucumberjs<span class="hljs-attribute">-examples</span>@<span class="hljs-number">0.1</span><span class="hljs-number">.0</span> test /Users/toddanderson/Documents/workspace/custardbelly/cucumberjs<span class="hljs-attribute">-example</span>
<span class="hljs-subst">&gt;</span> node node_modules<span class="hljs-subst">/</span><span class="hljs-built_in">.</span>bin/cucumber<span class="hljs-attribute">-js</span>
<span class="hljs-attribute">...</span><span class="hljs-attribute">...</span><span class="hljs-built_in">..</span>

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> passed)
<span class="hljs-number">8</span> steps (<span class="hljs-number">8</span> passed)
</code></pre><p>Same result. We get to type less now, so that&#39;s good. However, we are not really automating the process for running our tests. As mentioned previously, we are looking for the benefit of automating the running of our tests on change to <strong>Step Definitions</strong> and code.</p>
<p>As such, we create a simple node script that will watch our <code>script</code> and <code>feature/step_definitions</code> and run the <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> CLI tool on each change:</p>
<p><strong>cuke-watcher.js</strong></p>
<pre><code>#!<span class="hljs-regexp">/usr/</span>bin/env node
<span class="hljs-keyword">var</span> watch = <span class="hljs-built_in">require</span>(<span class="hljs-string">'node-watch'</span>);
<span class="hljs-keyword">var</span> child_process = <span class="hljs-built_in">require</span>(<span class="hljs-string">'child_process'</span>);
<span class="hljs-keyword">var</span> running = <span class="hljs-literal">false</span>;
<span class="hljs-keyword">var</span> cucumber;

<span class="hljs-keyword">var</span> JS_EXT = <span class="hljs-regexp">/^.*\.js/i</span>;
<span class="hljs-keyword">var</span> options = [<span class="hljs-string">'node_modules/.bin/cucumber-js'</span>, 
               <span class="hljs-string">'features'</span>, 
               <span class="hljs-string">'-r'</span>, <span class="hljs-string">'features/step_definitions'</span>,
               <span class="hljs-string">'-f'</span>, <span class="hljs-string">'pretty'</span>];

watch([<span class="hljs-string">'./features/step_definitions'</span>, <span class="hljs-string">'script'</span>], {recursive:<span class="hljs-literal">true</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(filename)</span> {</span>

  <span class="hljs-keyword">if</span>(!running &amp;&amp; filename.match(JS_EXT)) {

    running = <span class="hljs-literal">true</span>;

    cucumber = child_process.spawn(<span class="hljs-string">'node'</span>, options)
                    .on(<span class="hljs-string">'exit'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
                      running = <span class="hljs-literal">false</span>;
                    });

    cucumber.stdout.on(<span class="hljs-string">'data'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(d)</span> {</span>
      console.log(<span class="hljs-built_in">String</span>(d));
    });

    cucumber.stderr.on(<span class="hljs-string">'data'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(d)</span> {</span>
      console.error(<span class="hljs-built_in">String</span>(d));
    });

  }

});
</code></pre><p>We are using the wonderful <a href="https://npmjs.org/package/node-watch">node-watch</a> module that is a convenient wrapper to <code>fs.watch</code>, and upon change, we spawn the <strong>Cucumber</strong> tool as a child process. Running <strong>Cucumber</strong> as a child process allows it to exit its own process without having to exit the <code>watch</code> process, which would kill all automation.</p>
<p>Modify our <code>package.json</code> to invoke this script:</p>
<p><em>package.json</em></p>
<pre><code>{
  <span class="hljs-string">"name"</span>: <span class="hljs-string">"cucumberjs-examples"</span>,
  <span class="hljs-keyword">...</span>
  <span class="hljs-string">"scripts"</span>: {
      <span class="hljs-string">"test"</span>: <span class="hljs-string">"node node_modules/.bin/cucumber-js"</span>,
      <span class="hljs-string">"watch"</span>: <span class="hljs-string">"node cuke-watcher.js"</span>
  }
  <span class="hljs-keyword">...</span>
}
</code></pre><p>And run it in the terminal:</p>
<pre><code><span class="hljs-variable">$ </span>npm run watch
</code></pre><p>And you will see the cursor flash with the <code>watch</code> process running. If you were to modify any of the <strong>Step Definition</strong> or source files of our current <a href="https://github.com/bustardcelly/cucumberjs-examples">Grocery List</a> example project, you would see <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> run and produce the same results as before - the only difference is that it is now waiting for you to modify them again so it can run again.</p>
<p>It will continue to <code>watch</code> and run tests until you exit the process, most commonly done by focusing on the terminal and hitting <code>CTRL+C</code>.</p>
<h2 id="grunt">Grunt</h2>
<p>Up until a few years ago, I  stuck with what I knew best and preferred to maintain builds for my JavaScript projects using <a href="http://www.gnu.org/software/make/">Make</a>. After having the fortunate opportunity to hear <a href="http://benalman.com/">Ben Alman</a> speak and demonstrate <a href="http://gruntjs.com/">Grunt</a> at <a href="http://2013.texasjavascript.com/">TXJS</a> in 2012, I decided to give <strong>Grunt</strong> a real try - and I have, for the most part, not looked back.</p>
<p><a href="http://gruntjs.com/">Grunt</a> is my go-to task automation tool for large projects that involve various complex tasks for developing, testing and deployment. For the most part, if my tasks are not solely based on files, I will incorporate <strong>Grunt</strong> into my project. </p>
<p>Along with a solid history and great documentation, there is also a very active community that creates task plugins for <strong>Grunt</strong>: <a href="http://gruntjs.com/plugins">http://gruntjs.com/plugins</a>. You can find virtually anything you need, and if for some odd reason you can&#39;t, you can create one: <a href="http://gruntjs.com/creating-plugins">Creating Grunt Plugins Docs</a>.</p>
<p><em>It is too much for this article to get into a discussion about <strong>Grunt</strong> and its concepts, so please read the <a href="http://gruntjs.com/getting-started">documentation</a> on their site for clarity. In this section I intend to address how to use <strong>Grunt</strong> to automate the tests we have been developing in this series.</em></p>
<h3 id="usage">Usage</h3>
<p>Just as we setup a watcher for our <strong>Step Definitions</strong> and scripts for our <code>npm run</code> example, we will be using 2 <a href="http://gruntjs.com/">Grunt</a> plugin tasks provided by the wonderful development community:</p>
<ul>
<li><a href="https://github.com/gruntjs/grunt-contrib-watch">grunt-contrib-watch</a> - maintained by the contributors for gruntjs</li>
<li><a href="https://github.com/s9tpepper/grunt-cucumber-js">grunt-cucumber</a> - maintained by venerable developer <a href="https://twitter.com/s9tpepper">Omar Gonzalez</a></li>
</ul>
<p>I will assume you have <a href="http://gruntjs.com/getting-started">Grunt installed properly</a> and start with the <code>Gruntfile</code>:</p>
<p><em>Gruntfile.js</em></p>
<pre><code>module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(grunt)</span> {</span>
<span class="hljs-pi">  'use strict'</span>;

  grunt.initConfig({
    pkg: grunt.file.readJSON(<span class="hljs-string">'package.json'</span>),
    watch: {
      cucumber: {
        files: [<span class="hljs-string">'features/**/*.js'</span>, <span class="hljs-string">'script/**/*.js'</span>],
        tasks: [<span class="hljs-string">'cucumberjs'</span>]
      }
    },
    cucumberjs: {
      src: <span class="hljs-string">'features'</span>,
      options: {
        steps: <span class="hljs-string">'features/step_definitions'</span>,
        format: <span class="hljs-string">'pretty'</span>
      }
    }
  });

  grunt.loadNpmTasks(<span class="hljs-string">'grunt-contrib-watch'</span>);
  grunt.loadNpmTasks(<span class="hljs-string">'grunt-cucumber'</span>);

  grunt.registerTask(<span class="hljs-string">'watch-tests'</span>, <span class="hljs-string">'Starts a watch for test automation.'</span>, [<span class="hljs-string">'watch:cucumber'</span>]);

};
</code></pre><p>Within the <code>Gruntfile</code> we have configured <code>cucumberjs</code> task with the same arguments we have been using in previous examples and configured a <code>watch</code> task to listen for changes to JavaScript files in the <em>features</em> and <em>script</em> directories.</p>
<p>Additionally, we have defined a <code>watch-tests</code> task which we can invoke using <strong>Grunt</strong> from the command line:</p>
<pre><code><span class="hljs-variable">$ </span>grunt watch-tests
</code></pre><p>Running that will do, essentially, what we have done using <code>npm run</code> in the previous section: the <code>watch</code> process will be active and execute the <strong>Cucumber</strong> specs upon a change to JavaScript files in the target directories. To stop the task from running, focus on the terminal and <code>CTRL+C</code> to exit the process.</p>
<h2 id="gulp">Gulp</h2>
<p><a href="http://gulpjs.com/">Gulp</a> is a (relatively) new-comer to the JavaScript-based task runner ecosystem. Like <a href="http://gruntjs.com/">Grunt</a>, it is a task-based build tool that has <a href="https://github.com/gulpjs/gulp/blob/master/README.md">good documentation</a> and a lively community <a href="http://gratimax.github.io/search-gulp-plugins/">contributing plugins</a>. All good things.</p>
<p><a href="http://gulpjs.com/">Gulp</a>&#39;s build system uses <a href="http://nodejs.org/api/stream.html">streams</a> which allows you to pipe multiple tasks together. As well, the tasks defined in the <code>gulpfile</code> are the code itself - as opposed to <strong>Grunt</strong> in which you provide a configuration for your tasks that are consumed by <strong>Grunt</strong> and provided to the targetted plugin through a task registry.</p>
<p>There are <a href="http://blog.ponyfoo.com/2014/01/09/gulp-grunt-whatever">plenty</a> of <a href="http://www.100percentjs.com/just-like-grunt-gulp-browserify-now/">other articles</a> <a href="http://jaysoo.ca/2014/01/27/gruntjs-vs-gulpjs/">contrasting the two</a>, so I won&#39;t rehash them here. I will say that I choose <strong>Gulp</strong> over <strong>Grunt</strong> in projects where the build requirements are strictly focused on files - ie, take these files, do something to them (min, concat) and put them in this directory.</p>
<p><strong>As a side note: I highly recommend <a href="https://twitter.com/substack">James Halliday</a>&#39;s excellent <a href="https://github.com/substack/stream-handbook">stream-handbook</a> to get a better understanding of streams in <a href="http://nodejs.org">node</a>.</strong></p>
<h3 id="usage">Usage</h3>
<p>The <a href="http://gratimax.github.io/search-gulp-plugins/">plugin community</a> for <a href="http://gulpjs.com/">Gulp</a> is fairly active, but as I mentioned previously <strong>Gulp</strong>&#39;s system is really based on streams. As such, I don&#39;t intend to see a plugin for running <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> tests specifically, as we have with <a href="https://github.com/s9tpepper/grunt-cucumber-js">grunt-cucumber</a> - nor do intend to make one or continue to look for one: I don&#39;t think such a plugin is well suited to <strong>Gulp</strong>.</p>
<p>That&#39;s said, we can certainly set up a <code>watch</code> task on our <strong>Step Definitions</strong> and scripts just as we have in the previous examples!</p>
<p><strong>gulpfile.js</strong></p>
<pre><code><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp'</span>);
<span class="hljs-keyword">var</span> watch = <span class="hljs-built_in">require</span>(<span class="hljs-string">'gulp-watch'</span>);
<span class="hljs-keyword">var</span> child_process = <span class="hljs-built_in">require</span>(<span class="hljs-string">'child_process'</span>);

<span class="hljs-keyword">var</span> cucumber;
<span class="hljs-keyword">var</span> running = <span class="hljs-literal">false</span>;
<span class="hljs-keyword">var</span> options = [<span class="hljs-string">'node_modules/.bin/cucumber-js'</span>,
               <span class="hljs-string">'features'</span>, 
               <span class="hljs-string">'-r'</span>, <span class="hljs-string">'features/step_definitions'</span>,
               <span class="hljs-string">'-f'</span>, <span class="hljs-string">'pretty'</span>];

gulp.task(<span class="hljs-string">'cucumber'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  <span class="hljs-keyword">if</span>(!running) {
    running = <span class="hljs-literal">true</span>;
    cucumber = child_process.spawn(<span class="hljs-string">'node'</span>, options)
                    .on(<span class="hljs-string">'exit'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
                      running = <span class="hljs-literal">false</span>;
                    });
    cucumber.stdout.on(<span class="hljs-string">'data'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(d)</span> {</span>
      console.log(<span class="hljs-built_in">String</span>(d));
    });

    cucumber.stderr.on(<span class="hljs-string">'data'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(d)</span> {</span>
      console.error(<span class="hljs-built_in">String</span>(d));
    });
  }
});

gulp.task(<span class="hljs-string">'watch-tests'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  gulp.src([<span class="hljs-string">'features/**/*.js'</span>, <span class="hljs-string">'script/**/*.js'</span>])
      .pipe(watch(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
        gulp.run(<span class="hljs-string">'cucumber'</span>);
      }));
});
</code></pre><p>Running that is very similar to how we ran our <strong>Grunt</strong> task:</p>
<pre><code><span class="hljs-variable">$ </span>gulp watch-tests
</code></pre><p>As you may notice, this example fairly similar to the <code>npm run</code> example shown previously. The main difference is that we pipe the streams through the <code>gulp-watch</code> plugin which triggers <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> as a child process upon change to targetted files.</p>
<h2 id="conclusion">Conclusion</h2>
<p>So, which one should you use? Whichever! They each have their merits and it should be discussed with your team in alignment with the requirements for the current project.</p>
<p>It was my intent to showcase how to incoporate automated testing with <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> using the three most popular task runner / build tools so we can devote more time to thinking about design instead of hopping from our code editor to the terminal for each change to our <strong>Step Definitions</strong>.</p>
<p>I didn&#39;t introduce any new concepts related to <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>, itself, but felt it necessary to address automation at this stage within the series as I feel it is a vital part to Test-Driven Development and the Agile process and something that should be addressed in the early stages of a project.</p>
<p>That said, I look forward to the next article where we get to write more tests and which I intend to introduce running tests in a browser environment :)</p>
<p>Source for examples related to this post can be found in the <a href="https://github.com/bustardcelly/cucumberjs-examples/tree/0.3.0.post">0.3.0.post tag on my Github account</a>.</p>
]]></description><link>/blog-posts/2014/01/29/cucumberjs-build/index.html</link><guid isPermaLink="true">/blog-posts/2014/01/29/cucumberjs-build/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[BDD in JavaScript II: CucumberJS, the World and Background]]></title><description><![CDATA[<p>In <a href="http://custardbelly.com/blog/blog-posts/2014/01/08/bdd-in-js-cucumberjs/index.html">my previous post</a>, I demonstrated how I use <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> - the JavaScript port of the <a href="http://cukes.info/">Cucumber</a> BDD testing tool - in developing Test-Driven code. I walked through going from a <span style="color:red;">failing</span> feature with two scenarios to a <span style="color:green;">passing</span> cuke, while taking care to only add enough code that would make the assertions pass and refactoring as I went along under the assurance of a test harness.</p>
<p>There are a few topics that I didn&#39;t address in the previous post that I utilize in my testing process that I wanted to touch on in this post as any further articles I may write on the subject of <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> most likely will reference them. These are:</p>
<ul>
<li>the World<del>, chico, and everything in it.</del></li>
<li>Background</li>
</ul>
<h3 id="-gt-code">&gt; code</h3>
<p>Supported files related to this and any subsequent posts on this topic will be available at:<br><a href="https://github.com/bustardcelly/cucumberjs-examples">https://github.com/bustardcelly/cucumberjs-examples</a></p>
<h2 id="world">World</h2>
<p>The <strong>World</strong> brings context to your <strong>Scenarios</strong>.</p>
<p>In the examples from <a href="http://custardbelly.com/blog/blog-posts/2014/01/08/bdd-in-js-cucumberjs/index.html">my previous post</a> variables were declared locally to the module export and available for reference within each <strong>Step</strong>. This may be suitable for some cases, but can cause issues or provide false results if you are not aware that those values last across the life cycle of <em>all</em> the <strong>Steps</strong> declared in that module. In other words, they are not reset for each <strong>Scenario</strong>.</p>
<p>To bring context to each <strong>Scenario</strong>, you can use the <strong>World</strong> constructor within which you can define various properties and methods that may be relevant in setting up the environment under test for each <strong>Scenario</strong>. Additonally, you access the defined <strong>World</strong> within each <strong>Step</strong> using the <code>this</code> keyword - just as you are familiar to in referencing context scope within JavaScript.</p>
<h3 id="example">Example</h3>
<p>If I were to take the complete steps module for the <em>Add Item</em> <strong>Feature</strong> from the <a href="https://github.com/bustardcelly/cucumberjs-examples/blob/0.1.0.post/features/step_definitions/add-item.steps.js">previous example</a> and modify it to incorporate a <strong>World</strong> context, it would look something like the following:</p>
<p>_/features/step<em>definitions/add-item.steps.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;
<span class="hljs-keyword">var</span> assert = <span class="hljs-built_in">require</span>(<span class="hljs-string">'assert'</span>);

module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  <span class="hljs-keyword">var</span> listItem;

  <span class="hljs-keyword">this</span>.World = <span class="hljs-built_in">require</span>(process.cwd() + <span class="hljs-string">'/features/support/world'</span>).World;

  <span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have an empty grocery list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    <span class="hljs-keyword">this</span>.myList = <span class="hljs-keyword">this</span>.createNewGroceryList();
    callback();
  });

  <span class="hljs-keyword">this</span>.When(<span class="hljs-regexp">/^I add an item to the list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    listItem = <span class="hljs-keyword">this</span>.createGroceryItem();
    <span class="hljs-keyword">this</span>.myList.add(listItem);
    callback();
  });

  <span class="hljs-keyword">this</span>.Then(<span class="hljs-regexp">/^The grocery list contains a single item$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    assert.equal(<span class="hljs-keyword">this</span>.myList.getAll().length, <span class="hljs-number">1</span>, <span class="hljs-string">'Grocery List should grow by one item.'</span>);
    callback();
  });

  <span class="hljs-keyword">this</span>.Then(<span class="hljs-regexp">/^I can access that item from the grocery list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    assert.notEqual(<span class="hljs-keyword">this</span>.myList.getItemIndex(listItem), -<span class="hljs-number">1</span>, <span class="hljs-string">'Added item should be found at non-negative index.'</span>);
    callback();
  });

};
</code></pre><p>You will notice that in place of the <code>myList</code> variable declaration is a definition of the <strong>World</strong> context that will be the context for each <strong>Step</strong> in a <strong>Scenario</strong>. The <strong>World</strong> constructor is run at the start of each <strong>Scenario</strong>. As such, any properties have a life-cycle within the <strong>Steps</strong> of each <strong>Scenario</strong> that may be defined in this <strong>Feature</strong>. Again, this differs from the previous implementation where <code>myList</code> had a life-cycle through <em>all</em> the <strong>Steps</strong> of the module. </p>
<p><em>Note: The life of <code>this.myList</code> is realistically the same as the function local <code>myList</code> in the previous example, since it was being reassigned a new instance of <code>GroceryList</code> for each <strong>Scenario</strong>.</em></p>
<p>Additionally, you may notice that I have offloaded the creation or declaration of items to factory methods on the <strong>World</strong> - it&#39;s just a habit or best practice of mine and allows me to &quot;hide&quot; such implementation details within a single context so I can focus more closely on the assertion rules.</p>
<p>The <strong>World</strong> that is referenced in this <strong>Steps</strong> module is pulled in from the <em>/features/support</em> directory:</p>
<p><em>/features/support/world.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> GroceryList = <span class="hljs-built_in">require</span>(process.cwd() + <span class="hljs-string">'/script/model/grocery-list'</span>);

<span class="hljs-keyword">var</span> World = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">World</span><span class="hljs-params">(callback)</span> {</span>

  <span class="hljs-keyword">this</span>.myList = <span class="hljs-literal">undefined</span>;
  <span class="hljs-keyword">this</span>.createNewGroceryList = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> GroceryList.create();
  };
  <span class="hljs-keyword">this</span>.createGroceryItem = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-string">'apple'</span>;
  };

  callback();

};

module.exports.World = World;
</code></pre><p>This defines the <strong>World</strong> constructor on the <code>module.exports</code> and, when is invoked by <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>, is provided a <code>callback</code> delegate that you invoke when you are done &quot;prepping&quot; your <strong>World</strong> context. There are other support hooks, such as <em>BeforeEach()</em> and <em>AfterEach()</em> that are available, but I won&#39;t discuss them in this article.</p>
<p>If we were to run our tests now:</p>
<pre><code>$ node_modules<span class="hljs-subst">/</span><span class="hljs-built_in">.</span>bin/cucumber<span class="hljs-attribute">-js</span>

<span class="hljs-attribute">...</span><span class="hljs-attribute">...</span>

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> passed)
<span class="hljs-number">6</span> steps (<span class="hljs-number">6</span> passed)
</code></pre><p>We arrive at the same result as before: <span style="color:green;">passing</span>.</p>
<h4 id="-gt-aside">&gt; aside</h4>
<p>This example may seem a little superfluos in its demonstration of the benefits of a <strong>World</strong> context, but - for the sake of continuity - I wanted to show how I would modify the previous example to incorporate the <strong>World</strong>. As well, we will be building off of this structure when we approach incorporating tests within a browser context.</p>
<h2 id="background">Background</h2>
<p>The <strong>Background</strong> is part of the <a href="http://docs.behat.org/guides/1.gherkin.html">Gherkin DSL</a> that allows you to provide an overarching context for all <strong>Scenarios</strong> defined in a <strong>Feature</strong>. It is defined in your feature spec and details <strong>Steps</strong> to be run prior to each <strong>Scenario</strong> defined within the same spec. <em>It should be noted that if you use the Before Hooks the <strong>Background</strong> steps are run after those hook methods.</em></p>
<p>I use <strong>Background</strong> mainly to provide an environmental context for my <strong>Feature</strong>. With the state of JavaScript today - and sometimes wearing the full-stack developer hat - it is not uncommon that I would be writing a <a href="http://nodejs.org">node</a> module for the server-side along with browser-based modules for the client-side within the same project. Additionally, with the various module libraries and build tools available from the community today, I am sometimes developing libraries that provide a module for both the browser and <a href="http://nodejs.org">node</a>! Crazy mixed up world. But I digress...</p>
<p>The point being: <strong>Background</strong> is useful, in my testing workflow, in setting up a <strong>Feature</strong> with the context of running the Tests under <a href="http://nodejs.org">node</a> or in a browser.</p>
<p>We could modify the existing <strong>Feature</strong> created in the <a href="http://custardbelly.com/blog/blog-posts/2014/01/08/bdd-in-js-cucumberjs/index.html">previous post</a> to include a <strong>Background</strong> used in defining the environment:</p>
<p><em>/features/add-item.feature</em></p>
<pre><code>Feature: Shopper can add an <span class="hljs-property">item</span> <span class="hljs-keyword">to</span> their Grocery List
  As a shopper
  I want <span class="hljs-keyword">to</span> add an <span class="hljs-property">item</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">my</span> grocery <span class="hljs-type">list</span>
  So <span class="hljs-keyword">that</span> I can remember <span class="hljs-keyword">to</span> buy <span class="hljs-keyword">that</span> <span class="hljs-property">item</span> <span class="hljs-keyword">at</span> <span class="hljs-keyword">the</span> grocery store

  Background:
    Given I have opened <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span> <span class="hljs-type">application</span>

  Scenario: Item added <span class="hljs-keyword">to</span> grocery <span class="hljs-type">list</span>
    Given I have an empty grocery <span class="hljs-type">list</span>
    When I add an <span class="hljs-property">item</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> <span class="hljs-type">list</span>
    Then The grocery <span class="hljs-type">list</span> <span class="hljs-keyword">contains</span> a single <span class="hljs-property">item</span>

  Scenario: Item accessible <span class="hljs-keyword">from</span> grocery <span class="hljs-type">list</span>
    Given I have an empty grocery <span class="hljs-type">list</span>
    When I add an <span class="hljs-property">item</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> <span class="hljs-type">list</span>
    Then I can access <span class="hljs-keyword">that</span> <span class="hljs-property">item</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span>
</code></pre><p>I have set up my <strong>Background</strong> to explicitly state that I have opened up the application we are building. If you have been following along, we actually had never even created a main application file - we were just testing a collection model. So this brings a little more real-life context to the situation at hand; we are in the process of building an application that people will use and interact with.</p>
<p>Within the <strong>Background</strong> you can add additional steps, such as <em>And</em>, <em>But</em>, <em>When</em> and <em>Then</em>, yet I try to stick to only having a <em>Given</em> followed by one or two <em>And</em>&#39;s or <em>But</em>&#39;s.</p>
<p>If we were to run that now:</p>
<pre><code>$ node_modules/.bin/cucumber-js

U-U-

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> <span class="hljs-literal">undefined</span>)
<span class="hljs-number">8</span> steps (<span class="hljs-number">2</span> <span class="hljs-literal">undefined</span>, <span class="hljs-number">6</span> skipped)

You can implement step definitions <span class="hljs-keyword">for</span> <span class="hljs-literal">undefined</span> steps <span class="hljs-keyword">with</span> these snippets:

<span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have opened the grocery list application$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
  <span class="hljs-comment">// express the regexp above with the code you wish you had</span>
  callback.pending();
});
</code></pre><p>We&#39;d see that neither of the <em>Scenarios</em> are entered and we are alerted to an undefined step definition.</p>
<h3 id="background-step-definition">Background Step Definition</h3>
<p>I have a tendency to separate my background step definitions from my scenario step definitions - in both separate files and file naming convention. In other words, I would not add this step to the _/features/step<em>definitions/add-item.steps.js</em>. The main reason being that I reuse the same background step definitions across many features. As such, I place these steps in a separate file that is prefixed with <strong>background-</strong>:</p>
<p>_/features/step<em>definitions/background-open-application.steps.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;
<span class="hljs-keyword">var</span> assert = <span class="hljs-built_in">require</span>(<span class="hljs-string">'assert'</span>);

module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  <span class="hljs-keyword">this</span>.World = <span class="hljs-built_in">require</span>(process.cwd() + <span class="hljs-string">'/features/support/world'</span>).World;

  <span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have opened the grocery list application$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    <span class="hljs-comment">// express the regexp above with the code you wish you had</span>
    callback.pending();
  });

};
</code></pre><p>Similar to how we just modified the Add Item <strong>Feature</strong>, we are defining our world and we now have a pending <strong>Step</strong> to assert as passing. Technically I save the assertions for the <em>Then</em> <strong>Steps</strong>, but when I work with <strong>Background</strong>&#39;s I consider them pretty vital to the <strong>Scenarios</strong> environment. Therefore, most of my <strong>Background</strong>&#39;s have assertions, or in the very least, asynchronous requests which invoke the callback on completion. <em>(A better example of this will be in a following post when I address testing under a browser)</em>.</p>
<p>Let&#39;s define how we expect the application to be started in the <strong>World</strong> and what sort of validation we expect to assert that, in fact, we have opened the grocery list application so that we can edit its collection:</p>
<p>_/features/step<em>definitions/background-open-application.steps.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;
<span class="hljs-keyword">var</span> assert = <span class="hljs-built_in">require</span>(<span class="hljs-string">'assert'</span>);

module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  <span class="hljs-keyword">this</span>.World = <span class="hljs-built_in">require</span>(process.cwd() + <span class="hljs-string">'/features/support/world'</span>).World;

  <span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have opened the grocery list application$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    <span class="hljs-keyword">this</span>.groceryListApplication = <span class="hljs-keyword">this</span>.openGroceryList();
    assert(<span class="hljs-keyword">this</span>.groceryListApplication, <span class="hljs-string">'Grocery List Application is required to be open for editability.'</span>);
    callback();
  });

};
</code></pre><p>Running that will <span style="color:red;">fail</span> both or our scenarios due to exceptions on the <strong>World</strong>:</p>
<pre><code>$ node_modules/.bin/cucumber-js

F-F-

(::) failed steps (::)

TypeError: Object #&lt;World&gt; <span class="hljs-keyword">has</span> no <span class="hljs-function"><span class="hljs-keyword">method</span> '<span class="hljs-title">openGroceryList</span>'

<span class="hljs-title">Failing</span> <span class="hljs-title">scenarios</span>:</span>
/Users/toddanderson/Documents/workspace/custardbelly/cucumberjs-example/features/<span class="hljs-keyword">add</span>-item.feature:<span class="hljs-number">9</span> # Scenario: Item added <span class="hljs-keyword">to</span> grocery list
/Users/toddanderson/Documents/workspace/custardbelly/cucumberjs-example/features/<span class="hljs-keyword">add</span>-item.feature:<span class="hljs-number">14</span> # Scenario: Item accessible <span class="hljs-keyword">from</span> grocery list

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> failed)
<span class="hljs-number">8</span> steps (<span class="hljs-number">2</span> failed, <span class="hljs-number">6</span> skipped)
</code></pre><p>We&#39;ll modify our <strong>World</strong> to handle such properties and perform operations with regards to how we design the act of &quot;opening&quot; a new grocery list application. </p>
<p><em>Note: As mentioned previously in this and past articles, such details are really meant for a team discussion in architecture of the application. As such, I am taking liberties here in how I would go about providing as little code as possible to make the tests pass while adhering to my current design principles.</em></p>
<p><em>/features/support/world.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> application = <span class="hljs-built_in">require</span>(process.cwd() + <span class="hljs-string">'/script/app'</span>);
<span class="hljs-keyword">var</span> GroceryList = <span class="hljs-built_in">require</span>(process.cwd() + <span class="hljs-string">'/script/model/grocery-list'</span>);

<span class="hljs-keyword">var</span> World = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">World</span><span class="hljs-params">(callback)</span> {</span>

  <span class="hljs-keyword">this</span>.groceryListApplication = <span class="hljs-literal">undefined</span>;
  <span class="hljs-keyword">this</span>.myList = <span class="hljs-literal">undefined</span>;

  <span class="hljs-keyword">this</span>.openGroceryList = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> application.newSession();
  };
  <span class="hljs-keyword">this</span>.createNewGroceryList = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> GroceryList.create();
  };
  <span class="hljs-keyword">this</span>.createGroceryItem = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-string">'apple'</span>;
  };

  callback();

};

module.exports.World = World;
</code></pre><p>The <strong>World</strong> has been modified with the previously expected properties from our <strong>Background</strong> step and defines the creation of a new application through the <code>newSession</code> method on the <code>application</code> module. However, that module does not exist:</p>
<pre><code><span class="hljs-variable">$ </span>node_modules/.bin/cucumber-js

<span class="hljs-class"><span class="hljs-keyword">module</span>.<span class="hljs-title">js</span>:340</span>
    throw err;
          ^
<span class="hljs-constant">Error</span><span class="hljs-symbol">:</span> <span class="hljs-constant">Cannot</span> find <span class="hljs-class"><span class="hljs-keyword">module</span> '/<span class="hljs-title">Users</span>/<span class="hljs-title">toddanderson</span>/<span class="hljs-title">Documents</span>/<span class="hljs-title">workspace</span>/<span class="hljs-title">custardbelly</span>/<span class="hljs-title">cucumberjs</span>-<span class="hljs-title">example</span>/<span class="hljs-title">script</span>/<span class="hljs-title">app</span>'</span>
</code></pre><p>Let&#39;s quickly create the main application module:</p>
<p><em>/script/app.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> application = {
  init: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-comment">// stub.</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;
  }
};

module.exports = {
  newSession: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.create(application).init();
  }
};
</code></pre><p>In this module, we have defined the factory method <code>newSession</code> which generates a new <code>application</code> instance and returns the reference from a call to <code>init()</code>.</p>
<p>If we were to run our tests again:</p>
<pre><code>$ node_modules<span class="hljs-subst">/</span><span class="hljs-built_in">.</span>bin/cucumber<span class="hljs-attribute">-js</span>

<span class="hljs-attribute">...</span><span class="hljs-attribute">...</span><span class="hljs-built_in">..</span>

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> passed)
<span class="hljs-number">8</span> steps (<span class="hljs-number">8</span> passed)
</code></pre><p>We are back to <span style="color:green;">green</span>!</p>
<h3 id="take-a-breather">take a breather</h3>
<p>Alright, we just added some environment context to our tests using the <strong>Background</strong> and <em>Given</em> step(s), and are bringing more solidarity to the actual testing environment in so much as we have started to address the concept that the grocery list is to be interacted with from an application. This concept was known and assumed before, yet in our previous example, we did not address an actual <strong>User Role</strong> (<em>The Shopper</em>) in context - we simply made sure that our gorcery list collection model was able to receive and retain an item.</p>
<p>That&#39;s fine, we were getting started; we had some tasks and we are not going to throw away our work.</p>
<p>However, our previous example and step definitions should be modified to address the <strong>User</strong> interacting with the application, in so much as operations being acted upon in context to an open grocery list application.</p>
<h3 id="get-back-to-work">get back to work</h3>
<p>That last section was all very wordy. Basically the whole <code>myList</code> business that is going on the <strong>World</strong> and references in the Add Item <strong>Feature</strong> steps that we just did previously in this article, I want that to go away. I want to interact with a list instance held on the application.</p>
<h3 id="refactorying">Refactorying</h3>
<p>The first modification is in the Add Item <strong>Feature</strong> steps:</p>
<p>_/features/step<em>definitions/add-item.steps.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;
<span class="hljs-keyword">var</span> assert = <span class="hljs-built_in">require</span>(<span class="hljs-string">'assert'</span>);

module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  <span class="hljs-keyword">var</span> listItem;

  <span class="hljs-keyword">this</span>.World = <span class="hljs-built_in">require</span>(process.cwd() + <span class="hljs-string">'/features/support/world'</span>).World;

  <span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have an empty grocery list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    <span class="hljs-keyword">this</span>.groceryListApplication.list.empty();
    callback();
  });

  <span class="hljs-keyword">this</span>.When(<span class="hljs-regexp">/^I add an item to the list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    listItem = <span class="hljs-keyword">this</span>.createGroceryItem();
    <span class="hljs-keyword">this</span>.groceryListApplication.list.add(listItem);
    callback();
  });

  <span class="hljs-keyword">this</span>.Then(<span class="hljs-regexp">/^The grocery list contains a single item$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    assert.equal(<span class="hljs-keyword">this</span>.groceryListApplication.list.getAll().length, <span class="hljs-number">1</span>, <span class="hljs-string">'Grocery List should grow by one item.'</span>);
    callback();
  });

  <span class="hljs-keyword">this</span>.Then(<span class="hljs-regexp">/^I can access that item from the grocery list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    assert.notEqual(<span class="hljs-keyword">this</span>.groceryListApplication.list.getItemIndex(listItem), -<span class="hljs-number">1</span>, <span class="hljs-string">'Added item should be found at non-negative index.'</span>);
    callback();
  });

};
</code></pre><p>We have removed all references to the <code>myList</code> property that we added to <strong>World</strong> and replaced it with references to the <code>groceryListApplication.list</code> property.</p>
<pre><code>$ node_modules/.bin/cucumber-js

.F-.F-

(::) failed steps (::)

TypeError: Cannot call <span class="hljs-function"><span class="hljs-keyword">method</span> '<span class="hljs-title">empty</span>' <span class="hljs-title">of</span> <span class="hljs-title">undefined</span></span>
</code></pre><p>Back to <span style="color:red;">failing</span> at the first <strong>Step</strong> in each <strong>Scenario</strong>; the reason being that the application instance has no <code>list</code> property.</p>
<p><em>/script/app.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> GroceryList = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./model/grocery-list'</span>);

<span class="hljs-keyword">var</span> application = {
  init: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(list)</span> {</span>
    <span class="hljs-keyword">this</span>.list = list;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;
  }
};

module.exports = {
  newSession: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">var</span> newList = GroceryList.create();
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.create(application).init(newList);
  }
};
</code></pre><p>In modifying the <code>app</code> module, we have designed it so that when <code>newSession</code> is invoked, a new instance of <code>GroceryList</code> is passed in.</p>
<p>Run that:</p>
<pre><code>$ node_modules/.bin/cucumber-js

.F-.F-

(::) failed steps (::)

TypeError: Object #&lt;Object&gt; <span class="hljs-keyword">has</span> no <span class="hljs-function"><span class="hljs-keyword">method</span> '<span class="hljs-title">empty</span>'</span>
</code></pre><p>… and we have no <code>empty</code> method on the <code>GroceryList</code>.</p>
<p><em>/script/model/grocery-list.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> groceryList = {
  empty: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">this</span>.list.length = <span class="hljs-number">0</span>;
  },
  add: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>
    <span class="hljs-keyword">this</span>.list.push(item);
  },
  getAll: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.list;
  },
  getItemIndex: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(value)</span> {</span>
    <span class="hljs-keyword">var</span> index = <span class="hljs-keyword">this</span>.list.length;
    <span class="hljs-keyword">while</span>(--index &gt; -<span class="hljs-number">1</span>) {
      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.list[index] === value) {
        <span class="hljs-keyword">return</span> index;
      }
    }
    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;
  }
};

module.exports = {
  create: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.create(groceryList, {
      <span class="hljs-string">'list'</span>: {
        value: [],
        writable: <span class="hljs-literal">false</span>,
        enumerable: <span class="hljs-literal">true</span>  
      }
    });
  }
};
</code></pre><p>We added the <code>empty</code> method to the <code>groceryList</code> object which essentially just clears the underlying <code>Array</code> instance.</p>
<p>Run the tests again:</p>
<pre><code>$ node_modules<span class="hljs-subst">/</span><span class="hljs-built_in">.</span>bin/cucumber<span class="hljs-attribute">-js</span>

<span class="hljs-attribute">...</span><span class="hljs-attribute">...</span><span class="hljs-built_in">..</span>

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> passed)
<span class="hljs-number">8</span> steps (<span class="hljs-number">8</span> passed)
</code></pre><p>And we are back to <span style="color:green;">green</span>! Successful reactor… so far :)</p>
<p>We have carefully moved our collection model that is under test to the application, but we have some lingering and unneccessary code in our <strong>World</strong>. <em>I love removing code.</em></p>
<p>Here is our now cleaned up <strong>World</strong>:</p>
<p><em>/features/support/world.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> application = <span class="hljs-built_in">require</span>(process.cwd() + <span class="hljs-string">'/script/app'</span>);

<span class="hljs-keyword">var</span> World = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">World</span><span class="hljs-params">(callback)</span> {</span>

  <span class="hljs-keyword">this</span>.groceryListApplication = <span class="hljs-literal">undefined</span>;

  <span class="hljs-keyword">this</span>.openGroceryList = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> application.newSession();
  };
  <span class="hljs-keyword">this</span>.createGroceryItem = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-string">'apple'</span>;
  };

  callback();

};

module.exports.World = World;
</code></pre><p>Woohoo!</p>
<h2 id="conclusion">Conclusion</h2>
<p>I set out to address a few concepts associated with CucumberJS that I use regurlarly, but in doing so, I ended up modifying and refactoring the current example :) That wasn&#39;t the original intent when I started this post, but I was having fun.</p>
<ul>
<li>The <strong>World</strong> is useful in defining context for each <strong>Scenario</strong>. I often use it to also hold factory and general operation methods that may be called across many different <strong>Scenarios</strong></li>
<li><strong>Background</strong> is useful in defining environment context across <strong>Scenarios</strong> in separate <strong>Features</strong>. I often use it to assert that the proper environment is available before stepping into the <strong>Scenarios</strong>.</li>
</ul>
<p>I think the work we went through in this post will be very beneficial when I introduce running tests under a browser. Stay tuned…</p>
<p>Source for examples related to this post can be found in the <a href="https://github.com/bustardcelly/cucumberjs-examples/tree/0.2.0post">0.2.0.post tag on my Github account</a>.</p>
]]></description><link>/blog-posts/2014/01/22/cucumberjs-world/index.html</link><guid isPermaLink="true">/blog-posts/2014/01/22/cucumberjs-world/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[BDD in JavaScript: CucumberJS]]></title><description><![CDATA[<p>I have previously written about <strong>TDD</strong> in JavaScript, most notably using the BDD-style library <a href="https://github.com/pivotal/jasmine">Jasmine</a> in a series on <a href="http://custardbelly.com/blog/blog-pages/category/grocery-ls.html">building a Test-Driven Grocery List Application</a>. In that posts series I went through thinking of User Stories for Features and Scenarios as actual development tasks, and - reading back on it - it&#39;s all very green (no pun intended) in my finding a way to deliver test-driven code. Nothing wrong with that and I will most likely look upon this and subsequent posts in the same manner. That said, I still hold true that TDD is the best way to deliver concise, tested and well thought-out code.</p>
<p>Since that time, however, I have incorporated a different tool into my <strong>TDD</strong> workflow for JavaScript-based projects that affords me the integration of Feature specs more closely to my development and truly encompasses my current ideal of <strong>Behaviour Driven Development</strong>: <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>. Essentially, it allows me to truly adhere to <strong>TDD</strong> while developing from the outside in - running automated tests that fail until I have written code that supports a feature.</p>
<h3 id="-gt-assumptions-and-notes">&gt; assumptions and notes</h3>
<p>For the examples in this post, it is assumed that you are familiar with <a href="http://nodejs.org">NodeJS</a>, <a href="https://npmjs.org/">npm</a>, developing node modules and common unit testing practices as these topics too large to discuss in this post.</p>
<p>Supported files related to this and any subsequent posts on this topic will be available at:<br><a href="https://github.com/bustardcelly/cucumberjs-examples">https://github.com/bustardcelly/cucumberjs-examples</a></p>
<h2 id="cucumberjs">CucumberJS</h2>
<p><a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> is a JavaScript port of the popular BDD tool <a href="http://cukes.info/">Cucumber</a> (which itself was a rewrite of RSpec). It allows you to define Feature Specs in a Domain-Specific-Language (DSL) - called <a href="http://docs.behat.org/guides/1.gherkin.html">Gherkin</a> - and run your specs using a command line tool which will report the passing and/or failing of scenarios and the steps they are comprised of.</p>
<p>It is important to note that <strong>Cucumber</strong> itself does not provide a default assertion library. It is a testing framework providing a command line tool that consumes defined Features and validates Scenarios by running Steps that are written in JavaScript. It is the developers choice to include the desired assertion library used in order to make those steps <span style="color:green;">pass</span> or <span style="color:red;">fail</span>. It is my intent to clarify the process by example through a single Feature with multiple Scenarios in this post.</p>
<h3 id="installation">Installation</h3>
<p>You can install <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> in your project using <a href="https://npmjs.org/">npm</a>:</p>
<pre><code><span class="hljs-comment">$</span> <span class="hljs-comment">npm</span> <span class="hljs-comment">install</span> <span class="hljs-comment">cucumber</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">save</span><span class="hljs-literal">-</span><span class="hljs-comment">dev</span>
</code></pre><h2 id="gherkin">Gherkin</h2>
<p>If you had followed along in the previous <a href="http://custardbelly.com/blog/blog-pages/category/grocery-ls.html">TDD Series</a>, you will find the specs defined in that series similar to <a href="http://docs.behat.org/guides/1.gherkin.html">Gherkin</a>. In fact, I will be re-hashing a feature spec from that series to demonstrate working through your first cuke (aka, passing feature spec).</p>
<p>If we were to remake the <a href="(http://custardbelly.com/blog/blog-pages/category/grocery-ls.html">Grocery List</a> application under TDD/BDD using <strong>Cucumber</strong>, we would first start with a feature using the <strong>Gherkin</strong> syntax:</p>
<p><em>/features/add-item.feature</em></p>
<pre><code>Feature: Shopper can <span class="hljs-built_in">add</span> <span class="hljs-operator">an</span> <span class="hljs-keyword">item</span> <span class="hljs-built_in">to</span> their Grocery List
  As <span class="hljs-operator">a</span> grocery shopper
  I want <span class="hljs-built_in">to</span> <span class="hljs-built_in">add</span> <span class="hljs-operator">an</span> <span class="hljs-keyword">item</span> <span class="hljs-built_in">to</span> my grocery list
  So that I can remember <span class="hljs-built_in">to</span> buy that <span class="hljs-keyword">item</span> <span class="hljs-keyword">at</span> <span class="hljs-operator">the</span> grocery store

  Scenario: Item added <span class="hljs-built_in">to</span> grocery list
    Given I have <span class="hljs-operator">an</span> <span class="hljs-constant">empty</span> grocery list
    When I <span class="hljs-built_in">add</span> <span class="hljs-operator">an</span> <span class="hljs-keyword">item</span> <span class="hljs-built_in">to</span> <span class="hljs-operator">the</span> list
    Then The grocery list <span class="hljs-operator">contains</span> <span class="hljs-operator">a</span> single <span class="hljs-keyword">item</span>

  Scenario: Item accessible <span class="hljs-built_in">from</span> grocery list
    Given I have <span class="hljs-operator">an</span> <span class="hljs-constant">empty</span> grocery list
    When I <span class="hljs-built_in">add</span> <span class="hljs-operator">an</span> <span class="hljs-keyword">item</span> <span class="hljs-built_in">to</span> <span class="hljs-operator">the</span> list
    Then I can access that <span class="hljs-keyword">item</span> <span class="hljs-built_in">from</span> <span class="hljs-operator">the</span> grocery list
</code></pre><p>The <strong>Feature</strong> defines a business value, while the <strong>Scenarios</strong> define the steps that provides that value. Most often, in the software development world, it is from these <strong>Scenarios</strong> that development tasks are taken on and QA tests are defined.</p>
<p>I stopped at two Scenarios, but we could very easily add more scenarios to this feature; immediately what comes to mind are item insertion rules and validation of properties that allow for an item to be added or rejected. In hindsight, it could make more sense in creating seperate feature specs for such details. We could spend a whole post on such topics, though... let&#39;s get back to the feature already defined.</p>
<p>Within each <strong>Scenario</strong> is a list of sequential <strong>Steps</strong>: <em>Given</em>, <em>When</em> and <em>Then</em>. It is these steps that <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> will execute after having consume this feature spec. After each of those, you can optionally have <em>And</em> and <em>But</em>, however - though necessary and unavoidable at times - I try to stay away from such additional step clauses.</p>
<h3 id="running-it">Running it</h3>
<p>Having saved that down to a file in a <strong>/features</strong> direcory, we can then run it under <strong>Cucumber</strong>:</p>
<pre><code><span class="hljs-variable">$ </span>node_modules/.bin/cucumber-js
</code></pre><p>By default, <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> will consume all feature specs found in the relative <strong>/features</strong> directory.</p>
<p>The current console output will look something like the following which essentially means that all the steps have not been located or defined:</p>
<pre><code>UUUUUU

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> <span class="hljs-literal">undefined</span>)
<span class="hljs-number">6</span> steps (<span class="hljs-number">6</span> <span class="hljs-literal">undefined</span>)

You can implement step definitions <span class="hljs-keyword">for</span> <span class="hljs-literal">undefined</span> steps <span class="hljs-keyword">with</span> these snippets:

<span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have an empty grocery list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
  <span class="hljs-comment">// express the regexp above with the code you wish you had</span>
  callback.pending();
});

<span class="hljs-keyword">this</span>.When(<span class="hljs-regexp">/^I add an item to the list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
  <span class="hljs-comment">// express the regexp above with the code you wish you had</span>
  callback.pending();
});

<span class="hljs-keyword">this</span>.Then(<span class="hljs-regexp">/^The grocery list contains a single item$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
  <span class="hljs-comment">// express the regexp above with the code you wish you had</span>
  callback.pending();
});

<span class="hljs-keyword">this</span>.Then(<span class="hljs-regexp">/^I can access that item from the grocery list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
  <span class="hljs-comment">// express the regexp above with the code you wish you had</span>
  callback.pending();
});
</code></pre><p>So we have 6 undefined <strong>Steps</strong> that make up 2 <strong>Scenarios</strong> and the <strong>CucumberJS</strong> ci tool even provides examples of defining them!</p>
<p>An important part of that snippet to understand is that there are only 4 steps to implement. In our <strong>Feature</strong> we have 2 <strong>Scenerios</strong> each with 3 <strong>Steps</strong>. There are a total of 6 steps, but we only need to define 4. The reason being that each <strong>Scenario</strong> shares the same <em>Given</em> and <em>When</em> step; these only need to be defined once and will be run separately for each <strong>Scenario</strong>. Essentially, if you define similar <strong>Steps</strong> using the same context, it will reuse the &quot;setup&quot; for a single <strong>Step</strong> within each <strong>Scenario</strong>.</p>
<p><em>I use &quot;setup&quot; in quotes because I mean it more in a role of defining context for <strong>When</strong> and <strong>Then</strong> steps.</em></p>
<p><em>I don&#39;t want to get it confused with the setup/teardown methods of other unit testing practices - which are known as Before/After support tasks in CucumberJS - and carry more of a context of setting up an environment in which tests are then executed (such as filling a DB of users) and then tearing down that set up.</em></p>
<h2 id="step-definitions">Step Definitions</h2>
<p>In the previous section, we saw that running <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> against our Add Item Feature alerted us that we have undefined (and, though not printed in <span style="color:red;">red</span>, failing) scenarios to support the feature. By default <strong>CucumberJS</strong> reads in all features from the <strong>/features</strong> directory relative to where the command was run, but it could not locate the supported step files in which these methods are defined.</p>
<p>As mentioned previously, <strong>CucumberJS</strong> does not provide an assertion library. The only assumption at this point - since the <strong>CucumberJS</strong> tool is run under <a href="http://nodejs.org/">NodeJS</a> - is that the supported steps will be loaded as node modules with an exported function to be executed. As we start implementing the steps, we will need to decide on the assertion library to use in validating our logic. We&#39;ll put that decision on the shelf at the moment and get the barebones setup to fail :)</p>
<p>To start, let&#39;s take those step definitions provided by the <strong>CucumberJS</strong> ci tool and drop them into a node module:</p>
<p>_/features/step<em>definitions/add-item.steps.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  <span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have an empty grocery list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    callback.pending();
  });

  <span class="hljs-keyword">this</span>.When(<span class="hljs-regexp">/^I add an item to the list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    callback.pending();
  });

  <span class="hljs-keyword">this</span>.Then(<span class="hljs-regexp">/^The grocery list contains a single item$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    callback.pending();
  });

  <span class="hljs-keyword">this</span>.Then(<span class="hljs-regexp">/^I can access that item from the grocery list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    callback.pending();
  });

};
</code></pre><p>By default, <strong>CucumberJS</strong> will look for steps to be loaded within a folder titled <code>step_definitions</code> under the <strong>/features</strong> directory relative to where you issue the command. You can optionally use the <code>-r</code> option to have <strong>CucumberJS</strong> load steps from another location. Running the default is the same as setting the following step definition directory option:</p>
<pre><code><span class="hljs-built_in">.</span>/node_modules<span class="hljs-subst">/</span><span class="hljs-built_in">.</span>bin/cucumber<span class="hljs-attribute">-js</span> <span class="hljs-attribute">-r</span> features/step_definitions
</code></pre><p>The console output will now look like the following:</p>
<pre><code><span class="hljs-comment">P</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">P</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>

<span class="hljs-comment">2</span> <span class="hljs-comment">scenarios</span> <span class="hljs-comment">(2</span> <span class="hljs-comment">pending)</span>
<span class="hljs-comment">6</span> <span class="hljs-comment">steps</span> <span class="hljs-comment">(2</span> <span class="hljs-comment">pending</span><span class="hljs-string">,</span> <span class="hljs-comment">4</span> <span class="hljs-comment">skipped)</span>
</code></pre><p>Not too suprising seeing as we notify the callback of a <code>pending</code> state. <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> enters the first step (<em>Given</em>) and is immediately returned with a pending notification. As such, it doesn&#39;t bother with entering any subsequent steps and marks them as skipped.</p>
<p><em>Note: It is too much to get into a discussion about <a href="http://addyosmani.com/writing-modular-js/">client-side modules and AMD vs CommonJS</a>. For the purposes of this example I will be using CommonJS, as I my current interests lie in utilizing <a href="https://github.com/substack/node-browserify">Browserify</a> for client-side development. For a long time, I was a proponent of <a href="http://requirejs.org/">RequireJS</a> and AMD. Again, a whole other discussion :)</em></p>
<h3 id="given">Given</h3>
<p><hr/>
To get closer to <span style="color:green;">green</span>, we&#39;ll tackle the <strong>Given</strong> step first:</p>
<p>_/features/step<em>definitions/add-item.step.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> GroceryList = <span class="hljs-built_in">require</span>(process.cwd() + <span class="hljs-string">'/script/model/grocery-list'</span>);

module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>

  <span class="hljs-keyword">var</span> myList;

  <span class="hljs-keyword">this</span>.Given(<span class="hljs-regexp">/^I have an empty grocery list$/</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(callback)</span> {</span>
    myList = GroceryList.create();
    callback();
  });
  ...

};
</code></pre><p>If we were to run that again, we&#39;d get an exception right away:</p>
<pre><code><span class="hljs-variable">$ </span>./node_modules/.bin/cucumber-js

<span class="hljs-class"><span class="hljs-keyword">module</span>.<span class="hljs-title">js</span>:340</span>
    throw err;
          ^
<span class="hljs-constant">Error</span><span class="hljs-symbol">:</span> <span class="hljs-constant">Cannot</span> find <span class="hljs-class"><span class="hljs-keyword">module</span> './<span class="hljs-title">script</span>/<span class="hljs-title">model</span>/<span class="hljs-title">grocery</span>-<span class="hljs-title">list</span>'</span>
    at <span class="hljs-constant">Function</span>.<span class="hljs-constant">Module</span>._resolveFilename (<span class="hljs-class"><span class="hljs-keyword">module</span>.<span class="hljs-title">js</span>:338:15)</span>
    at <span class="hljs-constant">Function</span>.<span class="hljs-constant">Module</span>._load (<span class="hljs-class"><span class="hljs-keyword">module</span>.<span class="hljs-title">js</span>:280:25)</span>
    at <span class="hljs-constant">Module</span>.<span class="hljs-keyword">require</span> (<span class="hljs-class"><span class="hljs-keyword">module</span>.<span class="hljs-title">js</span>:364:17)</span>
    at <span class="hljs-keyword">require</span> (<span class="hljs-class"><span class="hljs-keyword">module</span>.<span class="hljs-title">js</span>:380:17)</span>
    at <span class="hljs-constant">Object</span>.&lt;anonymous&gt; (<span class="hljs-regexp">/Users/toddanderson</span><span class="hljs-regexp">/Documents/workspace</span><span class="hljs-regexp">/custardbelly/cucumberjs</span>-example/features/step_definitions/add-item.steps.<span class="hljs-symbol">js:</span><span class="hljs-number">3</span><span class="hljs-symbol">:</span><span class="hljs-number">19</span>)
</code></pre><p>Which is understandable, we haven&#39;t any other code but this step definition module and are trying to require a module that doesn&#39;t exist. In sticking with TDD, this is a good thing - we know why it&#39;s failing and we expect it; I would be pulling my hair out if it <em>didn&#39;t</em> throw an exception!</p>
<p>In order to get this to pass, we&#39;ll create a node module in the specified directory and which exports an object with a <code>create</code> method:</p>
<p><em>/script/model/grocery-list.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

module.exports = {
  create: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>);
  }
};
</code></pre><p>We have provided the minimal requirement to get our <em>Given</em> step to pass. We&#39;ll worry about the details as we approach the latter steps.</p>
<p>Run that again, and <strong>CucumberJS</strong> enters in to the <em>When</em> step of each <strong>Scenario</strong> and aborts due to pending return.</p>
<pre><code>$ ./node_modules/<span class="hljs-preprocessor">.bin</span>/cucumber-js

<span class="hljs-preprocessor">.P</span>-<span class="hljs-preprocessor">.P</span>-

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> pending)
<span class="hljs-number">6</span> steps (<span class="hljs-number">2</span> pending, <span class="hljs-number">2</span> skipped, <span class="hljs-number">2</span> passed)
</code></pre><h3 id="when">When</h3>
<p><hr/>
In the previous section, to make the <em>Given</em> step pass on each <strong>Scenario</strong> we implemented the beginnings of a Grocery List model generated from a factory method, <code>create</code>, from the <code>grocery-list</code> module. I don&#39;t want to get into a debate of object creation, the <strong>new</strong> operator, classes and prototypes - at least not in this post - and will assume that you are familiar and comfortable (at least in reading code) with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create</a> defined for ECMAScript 5.</p>
<p>In reviewing the <em>When</em> step for the <strong>Scenarios</strong>:</p>
<pre><code>When I <span class="hljs-built_in">add</span> <span class="hljs-operator">an</span> <span class="hljs-keyword">item</span> <span class="hljs-built_in">to</span> <span class="hljs-operator">the</span> list
</code></pre><p>we need to provide a way in which to add an item to the Grocery List instance created in the <em>Given</em> - and do so in as little code to make the step pass...</p>
<p>First, we&#39;ll define our expectation of the make up and <code>add</code> signature of the Grocery List in the step definitions:</p>
<p>_/features/step<em>definitions/add-item.step.js</em></p>
<pre><code><span class="hljs-keyword">...</span>
module.exports = <span class="hljs-keyword">function</span>() {

  var myList,
      listItem = <span class="hljs-string">'apple'</span>;

  this.Given(/^I have an empty grocery list$/, <span class="hljs-keyword">function</span>(callback) {
    myList = GroceryList.create();
    callback();
  });

  this.When(/^I add an item to the list$/, <span class="hljs-keyword">function</span>(callback) {
    myList.add(listItem);
    callback();
  });
  <span class="hljs-keyword">...</span>

};
</code></pre><p>If we run that again:</p>
<pre><code>$ ./node_modules/.bin/cucumber-js

.F-.F-

(::) failed steps (::)

TypeError: Object object <span class="hljs-keyword">has</span> no <span class="hljs-function"><span class="hljs-keyword">method</span> '<span class="hljs-title">add</span>'</span>
</code></pre><p>Oooo-weee! Now we&#39;re talking. Big, bright <span style="color:red;">red F&#39;s</span>. :)</p>
<p>To make that get back to passing, we&#39;ll modify <code>grocery-list</code> with as little code as possible:</p>
<p><em>/script/model/grocery-list.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> groceryList = {
  add: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>
    <span class="hljs-comment">//</span>
  }
};

module.exports = {
  create: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.create(groceryList);
  }
};
</code></pre><p>Run again, and <strong>CucumberJS</strong> has progressed to the <em>Then</em> steps which are reporting a <code>pending</code> state.</p>
<pre><code>$ ./node_modules/<span class="hljs-preprocessor">.bin</span>/cucumber-js

.<span class="hljs-preprocessor">.P</span>.<span class="hljs-preprocessor">.P</span>

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> pending)
<span class="hljs-number">6</span> steps (<span class="hljs-number">2</span> pending, <span class="hljs-number">4</span> passed)
</code></pre><h3 id="then">Then</h3>
<p><hr/>
We progressed through our step implementations and have reached the step(s) at which we assert operations and properties that prove that our scenario provides its intended value. As mentioned previously, <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> does not provide an assertion library. My preference in assertion libraries is a combination of <a href="https://github.com/chaijs/chai">Chai</a>, <a href="http://github.com/cjohansen/Sinon.JS">Sinon</a> and <a href="http://github.com/domenic/sinon-chai">Sinon-Chai</a>, but for the examples in this post, I am just going to use the <code>assert</code> module that comes with <a href="http://nodejs.org">NodeJS</a>. I encourage you to check out other assertion libraries and leave a note if you have a favorite; perhaps one of these posts will address how I use <strong>Chai</strong> and <strong>Sinon</strong>.</p>
<p><em>Note: This section will be a little example heavy as we quickly switch from modifying our code and run the spec runner frequently.</em></p>
<h3 id="first-scenario">First Scenario</h3>
<p>In reviewing the first <strong>Scenario</strong>&#39;s <em>Then</em> step:</p>
<pre><code>Then The grocery list <span class="hljs-operator">contains</span> <span class="hljs-operator">a</span> single <span class="hljs-keyword">item</span>
</code></pre><p>we will need to prove that the Grocery List instance grows by a factor of 1 for each new item added.</p>
<p>Update the step to define how we expect that specification to be validated:</p>
<p>_/feature/step<em>definitions/add-item.step.js</em></p>
<pre><code><span class="hljs-keyword">...</span>
var assert = <span class="hljs-keyword">require</span>(<span class="hljs-string">'assert'</span>);
<span class="hljs-keyword">...</span>
module.exports = <span class="hljs-keyword">function</span>() {
<span class="hljs-keyword">...</span>

  this.Then(/^The grocery list contains a single item$/, <span class="hljs-keyword">function</span>(callback) {
    assert.equal(myList.getAll().length, <span class="hljs-number">1</span>, <span class="hljs-string">'Grocery List should grow by one item.'</span>);
    callback();
  });

<span class="hljs-keyword">...</span>
};
<span class="hljs-keyword">...</span>
</code></pre><p>We&#39;ve pulled in the <code>assert</code> module and attempt to validate that the length of the Grocery List has grown by a value of 1 after having run the previous step - <em>When</em> - in adding the item.</p>
<p>Run that and we&#39;ll get an exception:</p>
<pre><code>$ ./node_modules/.bin/cucumber-js

..F..P

(::) failed steps (::)

TypeError: Object #&lt;Object&gt; <span class="hljs-keyword">has</span> no <span class="hljs-function"><span class="hljs-keyword">method</span> '<span class="hljs-title">getAll</span>'</span>
</code></pre><p>Let&#39;s add that method to our Grocery List model:</p>
<p><em>/script/model/grocery-list.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> groceryList = {
  add: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>
    <span class="hljs-comment">//</span>
  },
  getAll: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-comment">//</span>
  }
};

module.exports = {
  create: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.create(groceryList);
  }
};
</code></pre><p>And back to running our specs:</p>
<pre><code>$ .<span class="hljs-regexp">/node_modules/</span>.bin/cucumber-js

..F..P

(::) failed steps (::)

<span class="hljs-attribute">TypeError</span>: Cannot read property <span class="hljs-string">'length'</span> <span class="hljs-keyword">of</span> <span class="hljs-literal">undefined</span>
</code></pre><p>Seeing as the code is not returning anything from <code>getAll()</code>, we can&#39;t access a <code>length</code> property for our assertion test.</p>
<p>If we modify the code to return an Array:</p>
<p>_/feature/step<em>definitions/add-item.step.js</em></p>
<pre><code><span class="hljs-keyword">...</span>
getAll: <span class="hljs-keyword">function</span>() {
  <span class="hljs-keyword">return</span> [];
}
<span class="hljs-keyword">...</span>
</code></pre><p>And run the specs again, we&#39;ll get the assertion error message we provided:</p>
<pre><code>$ ./node_modules/<span class="hljs-preprocessor">.bin</span>/cucumber-js

.<span class="hljs-preprocessor">.F</span>.<span class="hljs-preprocessor">.P</span>

(::) failed steps (::)

<span class="hljs-label">AssertionError:</span> Grocery List should grow by one item.
</code></pre><p>Now, we have a proper <span style="color:red;">Fail</span> being reported to us from an assertion that causes the step to not pass. Hooray!</p>
<h3 id="-take-a-breather-">-- take a breather --</h3>
<p>Let&#39;s pause here for a second before adding more code to get this step to <span style="color:green;">pass</span>. The issue at hand is not actually adding an item to the array being returned, it is more about ensuring that an item is added through the <code>add</code> method and the result from <code>getAll</code> being a list extended with that item.</p>
<p>Implementation details that are involved in making this test pass is where your team uses their architecture experience, but care is required that only the most essential code is added and not to go overboard in thinking about the internals of the Grocery List collection model. It&#39;s a slippery tight-rope that could easily fall down a rabbit hole - just like that poorly-worded metaphor :)</p>
<h3 id="-get-back-to-work-">-- get back to work! --</h3>
<p>For the purposes of this examples, we&#39;ll use the <code>propertiesObject</code> argument of <code>Object.create</code> to define a <code>list</code> getter that will serve as a mutable array for our grocery list items:</p>
<p><em>/script/model/grocery-list.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> groceryList = {
  add: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>
    <span class="hljs-keyword">this</span>.list.push(item);
  },
  getAll: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.list;
  }
};

module.exports = {
  create: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.create(groceryList, {
      <span class="hljs-string">'list'</span>: {
        value: [],
        writable: <span class="hljs-literal">false</span>,
        enumerable: <span class="hljs-literal">true</span>  
      }
    });
  }
};
</code></pre><p>If we run that, we&#39;ll find that the first <strong>Scenario</strong> is now passing!</p>
<pre><code>$ ./node_modules/<span class="hljs-preprocessor">.bin</span>/cucumber-js

....<span class="hljs-preprocessor">.P</span>

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">1</span> pending, <span class="hljs-number">1</span> passed)
<span class="hljs-number">6</span> steps (<span class="hljs-number">1</span> pending, <span class="hljs-number">5</span> passed)
</code></pre><h3 id="second-scenario">Second Scenario</h3>
<p>In reviewing the final step of our 2nd <strong>Scenario</strong>, the pending implementation is accessing the added item:</p>
<pre><code>Then I can access <span class="hljs-keyword">that</span> <span class="hljs-property">item</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span>
</code></pre><p>To make this step pass we need to verify that we can access the item appended to the Grocery List by invoking <code>add()</code> with an item. </p>
<p>As with the implementation of accessing the length of the Grocery List, there are several ways in which we could make this test pass in the code. Again, I feel this is where software development experience and taste comes into play with regards to architecture, but I also do prefer <em>trying</em> to produce the least amount of code possible; and I will be the first to admit that sometimes I go a little absent-minded and create more code than is necessary... hence, <em>trying</em> :)</p>
<p>That said, we also have to take into account language and environment specifications in how we address making the assertion pass - and the browser, with its history, has many to consider. That is not a slight, it is just a forethought in setting expectations for requirements.</p>
<p>Specifically: suppose we were to say that the step can be verified using the <code>Array.indexOf()</code> method on the collection returned from &#39;getAll()&#39; on the Grocery List object? Without a polyfill, then we are limiting ourselves to passing assertions on <a href="http://kangax.github.io/es5-compat-table/#Array.prototype.indexOf">IE 9 and older</a>. Such considerations are just the tip of the iceberg when deciding about what to introduce into your codebase in order to have your tests pass, and really should be left up to a team discussion on what is considered necessary to get the product to production.</p>
<p>I could go on and on, but let&#39;s just assume we want to cover all bases when it comes to browsers (IE 6 and up, shudder). In my opinion, to make this second <strong>Scenario</strong> turn green, we will add a <code>getItemIndex()</code> method with the following signature:</p>
<pre><code>+ getItemIndex(itemValue):<span class="hljs-keyword">int</span>
</code></pre><p>We&#39;ll first modify the step to fail:</p>
<p>_/feature/step<em>definitions/add-item.step.js</em></p>
<pre><code>this.Then(/^I can access <span class="hljs-keyword">that</span> <span class="hljs-property">item</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">the</span> grocery <span class="hljs-type">list</span>$/, function(callback) {
  assert.notEqual(myList.getItemIndex(listItem), -<span class="hljs-number">1</span>, 'Added <span class="hljs-property">item</span> should be found <span class="hljs-keyword">at</span> non-negative index.');
  callback();
});
</code></pre><p>The acceptance in order for this test to pass is that the index at which the added item resides in the collection is non-negative. For this scenariom we are not trying to validate a specification as to <em>where</em> new item is added in a list (eg, prepended or appended), but simply that it is accessible.</p>
<p>Running that will produce an exception:</p>
<pre><code>$ ./node_modules/.bin/cucumber-js

.....F

(::) failed steps (::)

TypeError: Object #&lt;Object&gt; <span class="hljs-keyword">has</span> no <span class="hljs-function"><span class="hljs-keyword">method</span> '<span class="hljs-title">getItemIndex</span>'</span>
</code></pre><p>Let&#39;s modify our <strong>Grocery List</strong> object to support the <code>getItemIndex</code> method:</p>
<p><em>/script/model/grocery-list.js</em></p>
<pre><code><span class="hljs-pi">'use strict'</span>;

<span class="hljs-keyword">var</span> groceryList = {
  add: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(item)</span> {</span>
    <span class="hljs-keyword">this</span>.list.push(item);
  },
  getAll: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.list;
  },
  getItemIndex: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(value)</span> {</span>
    <span class="hljs-keyword">var</span> index = <span class="hljs-keyword">this</span>.list.length;
    <span class="hljs-keyword">while</span>(--index &gt; -<span class="hljs-number">1</span>) {
      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.list[index] === value) {
        <span class="hljs-keyword">return</span> index;
      }
    }
    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;
  }
};

module.exports = {
  create: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.create(groceryList, {
      <span class="hljs-string">'list'</span>: {
        value: [],
        writable: <span class="hljs-literal">false</span>,
        enumerable: <span class="hljs-literal">true</span>  
      }
    });
  }
};
</code></pre><p>In our implementation of <code>getItemIndex</code>, the list is traversed and, if item is found, the index is returned. Otherwise, a value of -1 is returned. Essentially, how the <code>Array.indexOf</code> method works of ECMAScript 5.</p>
<p><em>Note: I know it seems silly to use Object.create from ECMAScript 5, but not Array.indexOf. The reason - mostly - being that I normally always include a polyfill for Object.create and not for Array.indexOf. I suppose habit.</em></p>
<p>Now if we run the specs again under <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a>:</p>
<pre><code>$ <span class="hljs-built_in">.</span>/node_modules<span class="hljs-subst">/</span><span class="hljs-built_in">.</span>bin/cucumber<span class="hljs-attribute">-js</span>

<span class="hljs-attribute">...</span><span class="hljs-attribute">...</span>

<span class="hljs-number">2</span> scenarios (<span class="hljs-number">2</span> passed)
<span class="hljs-number">6</span> steps (<span class="hljs-number">6</span> passed)
</code></pre><p>Our cukes are <span style="color:green;">GREEN</span>! (This is the point you wipe your brow and slow clap).</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this post, I introduce how I use the BDD tool <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> in order to adhere to Test Driven Development in JavaScript. I went through using an example of a single <strong>Feature</strong> with two <strong>Scenarios</strong> and turning <span style="color:red;">failing</span> <strong>Steps</strong> to <span style="color:green;">green</span> cukes. If you are unfamiliar with the process with making tests fail first only to produce code to make the test pass, I hope you followed along; I may be wordy and the process could appear to take a lot of time, but development under such practices does start to move smoothly once you get in the groove. Additionally, I think there is a huge reward in having your code under a test harness when it comes to refactoring and bug fixing - both in developer health and business.</p>
<h2 id="the-future">The Future</h2>
<p>I was going to cover the following topics in this post but have decided to exclude with the hopes of re-addressing in a later post:</p>
<ul>
<li>The <a href="https://github.com/cucumber/cucumber-tck/blob/master/world.feature">World</a> support utility</li>
<li>Build integration (<a href="http://gruntjs.com/">Grunt</a> and <a href="http://gulpjs.com/">Gulp</a>) and automation</li>
<li>Report generation for Continuous Integration</li>
</ul>
<p>Additionally, in a following post I want to address how I use <a href="https://github.com/cucumber/cucumber-js">CucumberJS</a> to run tests that rely on browser integration - ie, <strong>window</strong> and <strong>document</strong> access.</p>
<p><em>In the past I have used <a href="http://zombie.labnotes.org/">ZombieJS</a> to much success, but <a href="https://twitter.com/s9tpepper">Omar Gonzalez</a> has tipped me to him <a href="https://github.com/s9tpepper/karma-cucumberjs">Karma solution</a> that I am excited to test-drive.</em></p>
]]></description><link>/blog-posts/2014/01/08/bdd-in-js-cucumberjs/index.html</link><guid isPermaLink="true">/blog-posts/2014/01/08/bdd-in-js-cucumberjs/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item><item><title><![CDATA[A slight obsession over page speed]]></title><description><![CDATA[<p>Lately, several projects (both personal and work-related) have ignited an increasing obsession over page load speed and performance. I wanted to highlight a few tools and resources I find useful in analyzing performance and delivering web pages in production with optimal load time.</p>
<h2 id="where-d-this-hat-come-from-">Where&#39;d this hat come from?</h2>
<p>Over the past decade I primarily have been a client-side application developer. Sometimes my business card changes or personal introductions are made that get &#39;engineer&#39; and &#39;architect&#39; thrown in there, but truthfully I spend my days coding applications, regardless of language. I enjoy writing and shipping code under certain practices and methodologies and ocassionally pause to assess my current workflow and modify where bottlenecks are prevelant.</p>
<p>Up until recent years I was primarily concerned with code performance; rendering pipelines and element lifecycles, user-perceived performance cases for remote or off-loaded operations, optimizing algorithms for sorting, mapping, analyzing data, etc. I still am, but I also have become increasingly focused on delivery and load perfomance - especially in today&#39;s climate of people viewing web content on handheld devices without WiFi available. </p>
<p>Perhaps it is due the increasing work of web-based clients over desktop or native applications, but - if I am being honest - I never really paid attention to load time for older web-based application projects for several reasons:</p>
<ul>
<li>Flash plugin (preload, skip intro)</li>
<li>Desktop browser targets</li>
<li>Blind naivete</li>
</ul>
<p>However, as an end-user myself (don&#39;t like the term much, either) trying to access web content on my phone while on my bus ride home, my world is consumed with <code>waiting...</code>. As such, I wised up rather quick when I started to think about how someone would be absolutely frustrated and move on after 1/4 second without seeing any visible load response from a web application I lovingly crafted to in some way (hopefully) make their life easier.</p>
<p>That&#39;s when I started incorporating page load analysis to my deployment workflow.</p>
<h2 id="best-practices">Best Practices</h2>
<p>There is excellent documentation out there regarding best practices in delivering web pages with optimal performance. Some of the best known ones are below:</p>
<p>Yahoo: <a href="http://developer.yahoo.com/performance/rules.html">Best Practices for Speeding Up Your Web Site</a><br>Google: <a href="https://developers.google.com/speed/docs/best-practices/rules_intro">Web Perfomance Best Practices; Google</a><br>Steve Souders: <a href="http://stevesouders.com/hpws/rules.php">14 Rules for Faster-Loading Web Sites</a></p>
<p>I won&#39;t rehash the tidbits those articles provide, so please visit those links for a wealth of information and follow the following blogs to keep abreast of the latest in research and development of web performance:</p>
<ul>
<li><a href="http://stevesouders.com/">Steve Souders</a></li>
<li><a href="http://calendar.perfplanet.com/">Perfomance Calendar</a>  </li>
</ul>
<p>One aspect I find interesting is that a handful of the preferred optimizations described in those articles - such as concatenation, data-uris and script and styles placement on pages - have actually become part of the build phase of my development workflow, especially with the rise of tools such as <a href="http://gruntjs.com">Grunt</a> and the developer community creating post-process tasks. </p>
<p>It is not taken for granted that I can select tools and code under certain architectural principles I perceive as providing a comfortable development environment and have these tools at my disposal to deliver the end product in an optimal fashion. <em>Another resolution for this year is to contribute more to the libraries and tools I use often - whether through code or monetary donations.</em></p>
<h2 id="manual-performance-analysis">Manual Performance Analysis</h2>
<p>There are a few sites and tools I visit that will perform analysis on a site while in development:</p>
<ul>
<li><a href="http://www.webpagetest.org/">WebPageTest</a></li>
<li><a href="http://gtmetrix.com/">GTmetrix</a></li>
<li><a href="http://tools.pingdom.com/">pingdom</a></li>
<li><a href="https://developers.google.com/speed/docs/insights/using_chrome">PageSpeed Chrome Developer Tool</a></li>
</ul>
<p>Additonally, <a href="http://www.feedthebot.com/tools/">feedthebot</a> has a handful of neat little tools to test some things - specifically if gzip is working on your site.</p>
<p>They all - along with various other metrics - provide a scoring based on some criteria which, as far as I can tell, are defined either by <strong>Yahoo!</strong> (via <a href="http://developer.yahoo.com/yslow/">yslow</a>) or <strong>Google</strong> (via <a href="https://developers.google.com/speed/pagespeed/?csw=1">PageSpeed</a>).</p>
<p>Typically I stick to opening and running <a href="https://developers.google.com/speed/pagespeed/?csw=1">PageSpeed</a> when developing in Chrome to get a overall recommndation of optimizations and then visit <a href="http://www.webpagetest.org/">WebPageTest</a> when I want some serious analysis and am busy updating my <strong>.htaccess</strong> file with rewrites and expiries.</p>
<h2 id="integrating-performance-reporting-in-workflow">Integrating Performance Reporting in Workflow</h2>
<p>Running analysis using tools described above is a great way to see some metrics and determine what solutions to take to better the load performance of your site/application, but I like to automate all the things when I can as well as provide reporting to Continuous Integration servers so that we can document progress or failures. To provide such value, I am a strong proponent of using <a href="http://www.sitespeed.io/">sitespeed.io</a>.</p>
<p>I have nothing bad to say about <a href="http://www.sitespeed.io/">sitespeed.io</a>. It&#39;s built on top of <a href="https://github.com/ariya/phantomjs">PhantomJS</a>, <a href="https://github.com/marcelduran/yslow/">yslow</a>, <a href="https://github.com/tobli/browsertime">browsertime</a> and <a href="https://github.com/twbs/bootstrap/">bootstrap</a>. You can alternatively use the <a href="http://yslow.org/phantomjs/">yslow script for PhantomJS</a> if you want something more stripped down, but <a href="http://www.sitespeed.io/">sitespeed.io</a> generates a nice set of web documents that provide performance summaries along with being able to produce a <strong><a href="http://www.sitespeed.io/documentation/#junit">JUnit</a></strong> report for CI.</p>
<p>The documentation for <strong>sitespeed.io</strong> is thorough and easy to follow along and the <a href="http://www.sitespeed.io/documentation/#configuration">configuration options</a> are insanely helpful in finding possible pages on your site that may be of issue.</p>
<h3 id="grunt-integration">Grunt integration</h3>
<p>I am sure there is some <a href="http://gruntjs.com">Grunt</a> task out there in the wild that hooks into running <strong>sitespeed.io</strong> (or I should probably just stop being lazy and make one), but I have yet to find or search for one. I personally just use <a href="https://github.com/jharding/grunt-exec">grunt-exec</a> to run the command during a build and deploy. With the proper <a href="http://www.sitespeed.io/documentation/#installation">installation of sitespeed.io</a>, I have the following subtask under <code>exec</code> task:</p>
<pre><code>grunt.initConfig({
  <span class="hljs-keyword">...</span>
  exec: {
    sitespeed: {
      cmd: <span class="hljs-string">'sitspeed.io -u http://staging.mysite.com -r ./doc/metrics'</span>
    }
  }
}
});

grunt.loadNpmTasks(<span class="hljs-string">'grunt-exec'</span>);
grunt.registerTask(<span class="hljs-string">'dryrun'</span>, <span class="hljs-string">'Build, deploy and analyze.'</span>,\ 
  [<span class="hljs-string">'build'</span>, <span class="hljs-string">'deploy:staging'</span>, <span class="hljs-string">'exec:sitespeed'</span>]);
</code></pre><p>That generates the JUnit report and summary documentation artifacts that can be consumed and presented by your CI server of choice. I also have a tendency to use the <a href="https://github.com/marcelduran/yslow/">yslow</a> script for <a href="https://github.com/ariya/phantomjs">PhantomJS</a> in tandem on the <code>exec</code> task as that will print out my perfomance grade in the console after issuing my <strong>grunt</strong> deployment.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Sometimes, especially when working with 3rd party libraries, web fonts, etc, it is unrealistic to hit 100 for your performance grading - who am I kidding, it is damn near impossible. I try to stay above 90 and feel satisfied. </p>
<p>As well, it should be stated that the final test is actually physically visiting the sites on handheld devices over a data plan. As I mentioned previously, I usually do some perceived perfomance testing while on the bus ride home, ensuring that I don&#39;t get frustrated with the load time on my own work (and I hope I am more critical of my own stuff than others are ;)).</p>
<p>This is just the tip of the iceberg when it comes to analyzing load performance and with developments coming out of Google, such as <a href="http://www.chromium.org/spdy/spdy-whitepaper">SPDY</a> and <a href="https://code.google.com/p/modpagespeed/">mod_pagespeed</a>, an exciting space to keep an eye on in order to deliver your content faster and keep end-users happily enjoying your sites and applications.</p>
]]></description><link>/blog-posts/2014/01/06/obsession-over-page-speed/index.html</link><guid isPermaLink="true">/blog-posts/2014/01/06/obsession-over-page-speed/index.html</guid><dc:creator><![CDATA[Todd Anderson]]></dc:creator><pubDate>Invalid Date</pubDate></item></channel></rss>